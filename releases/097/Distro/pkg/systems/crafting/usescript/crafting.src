/* $Id$ */

use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":containers:containers";
include ":crafting:crafting";

program crafting(mobile, tool)
	SendSysMessage(mobile, "Select a material to work with.");
	var targ := Target(mobile);
	if ( !targ.IsA(POLCLASS_ITEM) )
		SendSysMessage(mobile, "Cancelled.");
		return 0;
	elseif ( !CanUseToolOnMaterial(mobile, tool, targ) )
		return 0;
	endif
	
	var start_menu_elem := GetInitialMenu(tool, targ);
	if ( !start_menu_elem )
		SendSysMessage(mobile, "You can't make anything with that tool on this material.");
		return 0;
	endif
	
	//This is done so we dont lose these values if the material_used is totally consumed.
	var material		:= struct;
	material.+graphic	:= targ.graphic;
	material.+color		:= targ.color;
	material.+objtype	:= targ.objtype;
	material.+amount	:= targ.amount;
	material.+serial	:= targ.serial;
	
	var create := SelectCraftable(mobile, tool, start_menu_elem, material);
endprogram

function CanUseToolOnMaterial(mobile, tool, targ)
	if ( !(targ in EnumerateItemsInContainer(mobile.backpack) ) )
		SendSysMessage(mobile, "You can only use materials in your backpack.");
		return 0;
	endif	
	
	return 1;
endfunction

function SelectCraftable(mobile, tool, start_menu_elem, byref material)
	if ( start_menu_elem.SelectScript )
		return Run_Script(start_menu_elem.SelectScript, array{mobile, start_menu_elem});
	endif
	
	var cur_menu_elem := start_menu_elem;
	var history := array{cur_menu_elem};
	var depth := 1;
	while ( mobile.connected )
		ShowCraftablesMenu(mobile, cur_menu_elem, depth, material.color);
	endwhile
	
	return 1;
endfunction


function InternalMenuSystem()
	return 1;
endfunction

function CheckMaterials()
	return 1;
endfunction

function ConsumeMaterials()
	return 1;
endfunction

function DoSkillCheck()
	return 1;
endfunction

function InternalSkillCheck()
	return 1;
endfunction

function CreateItem()
	return 1;
endfunction

