/* $Id$
 *
 */

use uo;
use os;
use http;
use polsys;

include ":servperf:header";
include ":attributes:attributes";
include ":containers:storageAreas";

unload_scripts("");

program HTMLPage()
	DoHeader("Object Viewer");
	TableHeader("Object Viewer");

	var list := QueryParam("List");
	if ( list )
		case ( list )
			"Accounts":
				AcctLister(QueryParam("Ext"));
				break;
			"Online":
				OnlineLister();
				break;
			"Storage":
				StorageLister();
				break;
			default:
				DoError("Unknown 'List' type!");
				break;
		endcase
	else
		StartPoint();
	endif

	DoFooter();
	return 1;
endprogram

function StartPoint()
	WriteHTML("<BR>");

	WriteHTML("<TABLE WIDTH=400>");
	WriteHTML("<TR>");
	WriteHTML("<TD CLASS='header2'>Select a start point.</TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>");
	WriteHTML("<LI><A HREF='?List=Accounts'>Accounts</A></LI>");
	WriteHTML("<LI><A HREF='?List=Online'>Online Characters</A></LI>");
	WriteHTML("<LI><A HREF='?List=Storage'>Storage Areas</A></LI>");
	WriteHTML("<BR>");
	WriteHTML("</TD>");
	WriteHTML("</TR>");
	WriteHTML("</TABLE>");

	WriteHTML("<BR>");

	WriteHTML("<FORM METHOD='GET'>");
	WriteHTML("<TABLE WIDTH=400>");
	WriteHTML("<TR>");
	WriteHTML("<TD CLASS='header2' COLSPAN='3'>Search</TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>Search Text</TD><TD COLSPAN='2'><INPUT TYPE='TEXT' SIZE='45' NAME='SearchText'></TD>");
	WriteHTML("</TR>");

	WriteHTML("<TR>");
	WriteHTML("<TD ROWSPAN='4'>Search Where</TD>");
	WriteHTML("<TD>Accounts</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhere' VALUE='Accounts'></TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>Top Level Items</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhere' VALUE='TLIs'></TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>Storage Areas</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhere' VALUE='Storage'></TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>Players</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhere' VALUE='Players'></TD>");
	WriteHTML("</TR>");

	WriteHTML("<TR>");
	WriteHTML("<TD ROWSPAN='2'>Search What</TD>");
	WriteHTML("<TD>Name/Desc</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhat' VALUE='NameDesc'></TD>");
	WriteHTML("</TR>");
	WriteHTML("<TR>");
	WriteHTML("<TD>Serial</TD><TD ALIGN='CENTER'><INPUT TYPE='RADIO' NAME='SearchWhat' VALUE='Serial'></TD>");
	WriteHTML("</TR>");

	WriteHTML("<TR>");
	WriteHTML("<TD COLSPAN='3' ALIGN='CENTER'><INPUT TYPE='SUBMIT' NAME='Submit' VALUE='Submit'></TD>");
	WriteHTML("</TR>");

	WriteHTML("</FORM>");
	WriteHTML("</TABLE>");

	return 1;
endfunction

function DoError(text)
	WriteHTML("<TABLE>");
	WriteHTML("<TR>");
	WriteHTML("<TD CLASS='header'>!! ERROR !!</TD>");
	WriteHTML("</TR>");
	WriteHTML("<TD><FONT COLOR='RED'>"+text+"</FONT></TD>");
	WriteHTML("</TR>");
	WriteHTML("</TABLE>");

	return 1;
endfunction

function LocationBar(tree)
	WriteHTML("<TABLE WIDTH='100%'>");
	WriteHTML("<TR>");
	WriteHTMLRaw("<TD CLASS='tree'>");

	var tree_size := tree.Size();
	var i := 1;
	for ( i:=1; i<=tree_size; i+=2 )
		WriteHTMLRaw("<A HREF='?"+tree[i]+"'>"+tree[i+1]+"</A>");
		if ( i+1 < tree_size )
			WriteHTMLRaw("<B> -> </B>");
		endif
		SleepMS(2);
	endfor
	WriteHTML("</TD>");
	WriteHTML("</TR>");
	WriteHTML("</TABLE>");
	WriteHTML("<BR>");

	return 1;
endfunction

function FilterBar(selected:="")
	WriteHTML("<TABLE WIDTH='100%'>");
	WriteHTML("<TR>");
	WriteHTMLRaw("<TD>");
	var link := "<A HREF='?List=Accounts&Ext=%23'>#</A> ";
	if ( selected == "#" )
		link := "<B><I>"+link+"</I></B>";
	endif
	WriteHTMLRaw(link);
	var i;
	for ( i:=65; i<=90; i+=1 )
		var letter := CChr(i);
		link := "<A HREF='?List=Accounts&Ext="+letter+"'>"+letter+"</A>";
		if ( letter == selected )
			link := "<B><I>"+link+"</I></B>";
		endif
		WriteHTMLRaw(link+" ");
		SleepMS(2);
	endfor
	link := "<A HREF='?List=Accounts&Ext=All'>All</A> ";
	if ( selected == "All" )
		link := "<B><I>"+link+"</I></B>";
	endif
	WriteHTMLRaw(link);
	WriteHTML("</TD>");
	WriteHTML("</TR>");
	WriteHTML("</TABLE>");

	WriteHTML("<BR>");

	return 1;
endfunction

function AcctLister(selected:="All")
	LocationBar(array{"", "Index"});
	FilterBar(selected);
	var acct_list := SortAccounts(selected);

	WriteHTML("<TABLE WIDTH=400>");
	WriteHTML("<TR>");
	WriteHTML("<TD CLASS='header2'>");
	WriteHTML("Total Accounts: " + acct_list.Size());
	WriteHTML("</TD>");
	WriteHTML("</TR>");
	foreach list in ( acct_list )
		WriteHTML("<TR>");
		WriteHTML("<TD>");
		WriteHTML("<B>"+_list_iter+"</B><BR>");

		foreach account in ( list )
			WriteHTML("<LI>"+account+"</LI>");
			SleepMS(2);
		endforeach
		WriteHTML("</TD>");
		WriteHTML("</TR>");
		sleepms(2);
	endforeach
	WriteHTML("</TABLE>");

	return 1;
endfunction

function OnlineLister()
	LocationBar(array{"", "Index"});
	return 1;
endfunction

function StorageLister()
	LocationBar(array{"", "Index"});
	return 1;
endfunction

function SortAccounts(letter:="")
	letter := Upper(letter);
	var dict := dictionary;

	foreach account in ( ListAccounts() )
		account[1] := Upper(Account[1]);
		var first_letter := account[1];
		if ( first_letter == letter )
			if ( !dict.Exists(first_letter) )
				dict[first_letter] := array;
			endif
			dict[first_letter].Append(account);
		elseif ( letter == "#" )
			first_letter := CAsc(account[1]);
			if ( first_letter >= CAsc("0") && first_letter <= CAsc("9") )
				if ( !dict.Exists(first_letter) )
					dict["#"] := array;
				endif
				dict["#"].Append(account);
			endif
		elseif ( letter == "ALL" )
			if ( CAsc(first_letter) >= CAsc("0") && CAsc(first_letter) <= CAsc("9") )
				first_letter := "#";
			endif

			if ( !dict.Exists(first_letter) )
				dict[first_letter] := array;
			endif

			dict[first_letter].Append(account);
		endif

		SleepMS(2);
	endforeach

	return dict;
endfunction