/* $Id$
 *
 */
 
use uo;
use os;
use polsys;

include ":control:icp-util";
include ":control:cmdbar";
include ":datafile:datafile";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:gumpprompt";

const TRANSPARENT := 1;

program CmdBarMenus()
	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	DFPurgeFile(data_file);
	
	var commands := ListTextCommands();
	var data_elem, gump;
	// -----
	data_elem := DFFindElement(data_file, "CmdBarMain", DF_CREATE);
	data_elem.SetProp("Commands", commands);
	
	gump := ExpandedMenuBar();
	GFOptimizeGump(gump);
	data_elem.SetProp("Expanded", gump);
	
	gump := ExpandedMenuBar(TRANSPARENT);
	GFOptimizeGump(gump);
	data_elem.SetProp("ExpandedTrans", gump);
	
	gump := ExpandedMenuBar();
	GFOptimizeGump(gump);
	data_elem.SetProp("Collapsed", gump);
	
	gump := CollapsedMenuBar(TRANSPARENT);
	GFOptimizeGump(gump);
	data_elem.SetProp("CollapsedTrans", gump);
	
	gump := CommandLevelInfoMenu();
	GFOptimizeGump(gump);
	data_elem.SetProp("Levels", gump);
	
	gump := CommandLevelInfoMenu(TRANSPARENT);
	GFOptimizeGump(gump);
	data_elem.SetProp("LevelsTrans", gump);
	
	gump := PkgListMenu(0, commands);
	GFOptimizeGump(gump);
	data_elem.SetProp("PkgList", gump);
	
	gump := PkgListMenu(TRANSPARENT, commands);
	GFOptimizeGump(gump);
	data_elem.SetProp("PkgListTrans", gump);
	// -----
	
	foreach package in ( commands )
		data_elem := DFFindElement(data_file, _package_iter, DF_CREATE);
		foreach level in ( package )
			level := level; // Stops unused var compiler warning.
			gump := CmdLevelMenu(0, _package_iter, commands);
			GFOptimizeGump(gump);
			data_elem.SetProp("Levels", gump);
			
			gump := CmdLevelMenu(TRANSPARENT, _package_iter, commands);
			GFOptimizeGump(gump);
			data_elem.SetProp("LevelsTrans", gump);
			
			gump := CommandsListMenu(0, _package_iter, _level_iter, commands);
			GFOptimizeGump(gump);
			data_elem.SetProp(_level_iter+"-Commands", gump);
			
			gump := CommandsListMenu(TRANSPARENT, _package_iter, _level_iter, commands);
			GFOptimizeGump(gump);
			data_elem.SetProp(_level_iter+"-CommandsTrans", gump);
			
			SleepMS(2);
		endforeach
		SleepMS(2);
	endforeach
	
	return 1;
endprogram

function ExpandedMenuBar(transparency:=0)
	var gump := GFCreateGump();
	GFResizePic(gump, 0, 0, GetCfgConst("BackGrounds", "STONESLAB"), 640, 30);
	GFAddButton(gump, 5, 5, 0x15A4, 0x15A4, GF_CLOSE_BTN, COLLAPSE_BTN);
	
	GFAddButton(gump, 35, 4, 0x98D, 0x98D, GF_CLOSE_BTN, CMDLIST_BTN);
	//GFGumpPic(gump, 35, 4, 0x98D);
	GFTextLine(gump, 60, 5, 2100, "Commands");

	GFAddButton(gump, 150, 4, 0x98D, 0x98D, GF_CLOSE_BTN, CMDLVLS_BTN);
	//GFGumpPic(gump, 150, 4, 0x98D);
	GFTextLine(gump, 157, 5, 2100, "Command Levels");

	GFAddButton(gump, 500, 4, 0x98D, 0x98D, GF_CLOSE_BTN, SETTINGS_BTN);
	//GFGumpPic(gump, 500, 4, 0x98D);
	GFTextLine(gump, 530, 5, 2100, "Settings");
	
	if ( transparency )
		GFAddAlphaRegion(gump, 0, 0, 640, 30);
	endif

	return gump;
endfunction

function CollapsedMenuBar(transparency:=0)
	var gump := GFCreateGump();
	GFResizePic(gump, 0, 0, GetCfgConst("BackGrounds", "STONESLAB"), 30, 30);
	GFAddButton(gump, 5, 5, 0x15A1, 0x15A1, GF_CLOSE_BTN, EXPAND_BTN);
	
	if ( transparency )
		GFAddAlphaRegion(gump, 0, 0, 30, 30);
	endif
	
	return gump;
endfunction

function PkgListMenu(transparency:=0, byref commands)
	var gump := ExpandedMenuBar();
	GFResizePic(gump, 35, 30, GetCfgConst("BackGrounds", "STONESLAB"), 150, 430);
	
	var y_pos := 35;
	GFPage(gump, 1);
	foreach package in ( commands.Keys() )
		if ( package == "" )
			package := "Non-Packaged";
		endif
		GFTextLine(gump, 50, y_pos, 2100, package);
		GFAddButton(gump, 165, y_pos+3, 5224, 5224, GF_CLOSE_BTN, PKG_START+_package_iter);
		y_pos := y_pos+20;
		if ( _package_iter % 21 == 0 )
			GFAddButton(gump, 35, 441, 0xA92, 0xA93, GF_PAGE_BTN, gump.cur_page+1);
			GFPage(gump, gump.cur_page+1);
			GFAddButton(gump, 35, 30, 0xA90, 0xA91, GF_PAGE_BTN, gump.cur_page-1);
			y_pos := 35;
		endif
		
		SleepMS(2);
	endforeach
	
	if ( transparency )
		GFPage(gump, 0);
		GFAddAlphaRegion(gump, 35, 30, 150, 430);
	endif

	return gump;
endfunction

function CmdLevelMenu(transparency:=0, cur_pkg, byref commands)
	var cmd_lvls := commands[cur_pkg];
	
	var gump := PkgListMenu(transparency, commands);
	GFPage(gump, 0);
	cmd_lvls := cmd_lvls.Keys();
	var y_length := (cmd_lvls.Size() * 20)+25;
	GFResizePic(gump, 185, 30, GetCfgConst("BackGrounds", "STONESLAB"), 150, y_length);
	if ( cur_pkg == "" )
		cur_pkg := "Non-Packaged";
	endif
	GFTextMid(gump, 185, 35, 150, 1000, cur_pkg);
	
	var y_pos := 50;
	GFPage(gump, 1);
	foreach level_id in ( cmd_lvls )
		GFTextLine(gump, 200, y_pos, 2100, GetCmdLevelName(level_id));
		GFAddButton(gump, 315, y_pos+3, 5224, 5224, GF_CLOSE_BTN, LVL_START+_level_id_iter);
		y_pos := y_pos+20;
				
		SleepMS(2);
	endforeach

	if ( transparency )
		GFPage(gump, 0);
		GFAddAlphaRegion(gump, 185, 30, 150, y_length);
	endif
	
	return gump;
endfunction

function CommandsListMenu(transparency:=0, cur_pkg, cur_lvl, byref commands)
	var scripts := commands[cur_pkg][cur_lvl];
	
	var gump := CmdLevelMenu(transparency, cur_pkg, commands);
	GFPage(gump, 0);
	GFResizePic(gump, 335, 30, GetCfgConst("BackGrounds", "STONESLAB"), 150, 430);
	GFTextMid(gump, 335, 35, 150, 1000, GetCmdLevelName(cur_lvl));
	
	var y_pos := 50;
	GFPage(gump, 1);
	foreach script in ( scripts )
		GFAddButton(gump, 340, y_pos+3, 2117, 2118, GF_CLOSE_BTN, CMD_START+_script_iter);
		
		var name := ICP_GetScriptName(script.script);
		
		GFTextLine(gump, 360, y_pos, 2100, name);
		y_pos := y_pos+20;
				
		SleepMS(2);
	endforeach
	
	if ( transparency )
		GFPage(gump, 0);
		GFAddAlphaRegion(gump, 335, 30, 150, 430);
	endif
	
	return gump;
endfunction

function CommandLevelInfoMenu(transparency:=0)
	var cmd_cfg := ReadConfigFile("::cmds");
	var num_levels := GetConfigStringKeys(cmd_cfg).Size();

	var gump := ExpandedMenuBar(transparency);
	var y_length := (num_levels * 20)+10;
	GFResizePic(gump, 150, 30, GetCfgConst("BackGrounds", "STONESLAB"), 140, y_length);
	var i;
	var y_pos := 35;
	for ( i:=0; i<num_levels; i:=i+1 )
		GFTextLine(gump, 155, y_pos, 2100, i+" - "+GetCmdLevelName(i));
		y_pos := y_pos+20;
		SleepMS(2);
	endfor
	
	if ( transparency )
		GFAddAlphaRegion(gump, 150, 30, 140, y_length);
	endif

	return gump;
endfunction
