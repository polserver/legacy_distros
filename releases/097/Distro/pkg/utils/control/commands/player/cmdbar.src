/* $Id$
 *
 */

use uo;
use os;
use polsys;

include ":datafile:datafile";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:gumpprompt";

unload_scripts("cmdbar");

// Button IDs
CONST COLLAPSE_BTN	:= 0xA00;
CONST EXPAND_BTN	:= 0xA01;
CONST CMDLIST_BTN	:= 0xA02;
CONST REFRESH_BTN	:= 0xA03;
CONST CMDLVLS_BTN	:= 0xA04;
CONST SETTINGS_BTN	:= 0xA05;
CONST APPLY_BTN		:= 0xA06;
// Check boxes
CONST TRANSPARENT_CHK	:= 0xA07;
CONST MOVABLE_CHK	:= 0xA08;
// Button ID ranges
CONST PKG_START		:= 0xB00;
CONST LVL_START		:= 0xC00;
CONST CMD_START		:= 0xD00;

program textcmd_CommandBar(who)
	if ( GetProcess(GetObjProperty(who, "#CmdBarPid")) )
		SendSysMessage(who, "You already have a command bar open.");
		return 0;
	else
		SetObjProperty(who, "#CmdBarPid", GetPid());
	endif

	var commands := ListTextCommands();

	var cur_menu := EXPAND_BTN;
	var cur_pkg, cur_lvl;
	
	while ( who.connected )
		var gump;
		//Retrieve the gump
		if ( cur_menu == EXPAND_BTN )
			gump := ExpandedMenuBar(who);
		elseif ( cur_menu == COLLAPSE_BTN )
			gump := CollapsedMenuBar(who);
		elseif ( cur_menu == CMDLIST_BTN )
			gump := PkgListMenu(who, commands);
		elseif ( cur_menu == CMDLVLS_BTN )
			gump := CommandLevelInfoMenu(who);
		elseif ( cur_menu == SETTINGS_BTN )
			gump := SettingsMenu(who);
		elseif ( cur_menu == PKG_START )
			gump := CmdLevelMenu(who, cur_pkg, commands);
		endif
		
		if ( !LoadUserSetting(who, "Movable") )
			GFMovable(gump, 0);
		endif
		
		var input := GFSendGump(who, gump);
		// Process gump data
		if ( !input[0] )
			// Right click was made
			break;
		elseif ( input[COLLAPSE_BTN] )
			cur_menu := COLLAPSE_BTN;
		elseif ( input[EXPAND_BTN] )
			cur_menu := EXPAND_BTN;
		elseif ( input[CMDLIST_BTN] )
			if ( cur_menu == CMDLIST_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := CMDLIST_BTN;
			endif
		elseif ( input[REFRESH_BTN] )
			commands := ListTextCommands();
			GumpPrompt(who, "Command list has been updated.");
		elseif ( input[CMDLVLS_BTN] )
			if ( cur_menu == CMDLVLS_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := CMDLVLS_BTN;
			endif
		elseif ( input[SETTINGS_BTN] )
			if ( cur_menu == SETTINGS_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := SETTINGS_BTN;
			endif
		elseif ( input[APPLY_BTN] )
			SaveUserSetting(who, "Movable", input[MOVABLE_CHK]);
			SaveUserSetting(who, "Transparent", input[TRANSPARENT_CHK]);
			GumpPrompt(who, "Settings updated.");
		elseif ( input[0] >= PKG_START )
			var temp := commands.Keys();
			cur_pkg := temp[input[0]-PKG_START];
			cur_menu := PKG_START;
		else
			// This gets hit when the user right clicks the gump
			// and check boxes were present (and checked)
			break;
		endif

		SleepMS(2);
	endwhile

	return 1;
endprogram

function ExpandedMenuBar(who)
	var gump := GFCreateGump();
	GFResizePic(gump, 0, 0, GetCfgConst("BackGrounds", "STONESLAB"), 640, 30);
	GFAddButton(gump, 5, 5, 0x15A4, 0x15A4, GF_CLOSE_BTN, COLLAPSE_BTN);
	
	GFAddButton(gump, 35, 4, 0x98D, 0x98D, GF_CLOSE_BTN, CMDLIST_BTN);
	//GFGumpPic(gump, 35, 4, 0x98D);
	GFTextLine(gump, 60, 5, 2100, "Commands");

	GFAddButton(gump, 150, 4, 0x98D, 0x98D, GF_CLOSE_BTN, REFRESH_BTN);
	//GFGumpPic(gump, 150, 4, 0x98D);
	GFTextLine(gump, 165, 5, 2100, "Refresh List");

	GFAddButton(gump, 265, 4, 0x98D, 0x98D, GF_CLOSE_BTN, CMDLVLS_BTN);
	//GFGumpPic(gump, 265, 4, 0x98D);
	GFTextLine(gump, 272, 5, 2100, "Command Levels");

	GFAddButton(gump, 500, 4, 0x98D, 0x98D, GF_CLOSE_BTN, SETTINGS_BTN);
	//GFGumpPic(gump, 500, 4, 0x98D);
	GFTextLine(gump, 530, 5, 2100, "Settings");
	
	if ( LoadUserSetting(who, "Transparent") )
		GFAddAlphaRegion(gump, 0, 0, 640, 30);
	endif

	return gump;
endfunction

function CollapsedMenuBar(who)
	var gump := GFCreateGump();
	GFResizePic(gump, 0, 0, GetCfgConst("BackGrounds", "STONESLAB"), 30, 30);
	GFAddButton(gump, 5, 5, 0x15A1, 0x15A1, GF_CLOSE_BTN, EXPAND_BTN);
	
	if ( LoadUserSetting(who, "Transparent") )
		GFAddAlphaRegion(gump, 0, 0, 30, 30);
	endif

	return gump;
endfunction

function PkgListMenu(who, byref commands)
	var gump := ExpandedMenuBar(who);
	GFResizePic(gump, 35, 30, GetCfgConst("BackGrounds", "STONESLAB"), 150, 430);
	
	var y_pos := 35;
	
	GFPage(gump, 1);
	foreach package in ( commands.Keys() )
		if ( package == "" )
			package := "Non-Packaged";
		endif
		GFTextLine(gump, 50, y_pos, 2100, package);
		GFAddButton(gump, 165, y_pos+3, 5224, 5224, GF_CLOSE_BTN, PKG_START+_package_iter);
		y_pos := y_pos+20;
		if ( _package_iter % 21 == 0 )
			GFAddButton(gump, 35, 441, 0xA92, 0xA93, GF_PAGE_BTN, gump.cur_page+1);
			GFPage(gump, gump.cur_page+1);
			GFAddButton(gump, 35, 30, 0xA90, 0xA91, GF_PAGE_BTN, gump.cur_page-1);
			y_pos := 35;
		endif
		
		SleepMS(2);
	endforeach
	
	if ( LoadUserSetting(who, "Transparent") )
		GFPage(gump, 0);
		GFAddAlphaRegion(gump, 35, 30, 150, 430);
	endif

	return gump;
endfunction

function CmdLevelMenu(who, cur_pkg, byref commands)
	var cmd_lvls := commands[cur_pkg];
	var gump := PkgListMenu(who, commands);
	GFPage(gump, 0);
	cmd_lvls := cmd_lvls.Keys();
	var y_length := (cmd_lvls.Size() * 20)+10;
	GFResizePic(gump, 185, 30, GetCfgConst("BackGrounds", "STONESLAB"), 150, y_length);
	
	var y_pos := 35;
	foreach level_id in ( cmd_lvls )
		GFTextLine(gump, 200, y_pos, 2100, GetCmdLevelName(level_id));
		GFAddButton(gump, 315, y_pos+3, 5224, 5224, GF_CLOSE_BTN, LVL_START+_level_id_iter);
		y_pos := y_pos+20;
				
		SleepMS(2);
	endforeach

	if ( LoadUserSetting(who, "Transparent") )
		GFPage(gump, 0);
		GFAddAlphaRegion(gump, 185, 30, 150, 180);
	endif
	
	return gump;
endfunction

function CommandLevelInfoMenu(who)
	var cmd_cfg := ReadConfigFile("::cmds");
	var num_levels := GetConfigStringKeys(cmd_cfg).Size();

	var gump := ExpandedMenuBar(who);
	var y_length := (num_levels * 20)+10;
	GFResizePic(gump, 265, 30, GetCfgConst("BackGrounds", "STONESLAB"), 140, y_length);
	var i;
	var y_pos := 35;
	for ( i:=0; i<num_levels; i:=i+1 )
		GFTextLine(gump, 270, y_pos, 2100, i+" - "+GetCmdLevelName(i));
		y_pos := y_pos+20;
		SleepMS(2);
	endfor
	
	if ( LoadUserSetting(who, "Transparent") )
		GFAddAlphaRegion(gump, 265, 30, 140, y_length);
	endif

	return gump;
endfunction

function SettingsMenu(who)
	var gump := ExpandedMenuBar(who);
	GFResizePic(gump, 470, 30, GetCfgConst("BackGrounds", "STONESLAB"), 170, 130);

	GFCheckBox(gump, 475, 40, 210, 211, LoadUserSetting(who, "Movable"), MOVABLE_CHK);
	GFTextLine(gump, 500, 40, 2100, "Movable");

	GFCheckBox(gump, 475, 60, 210, 211, LoadUserSetting(who, "Transparent"), TRANSPARENT_CHK);
	GFTextLine(gump, 500, 60, 2100, "Transparent");

	GFAddButton(gump, 530, 120, 0x84C, 0x84B, GF_CLOSE_BTN, APPLY_BTN);
	
	if ( LoadUserSetting(who, "Transparent") )
		GFAddAlphaRegion(gump, 470, 30, 170, 130);
	endif

	return gump;
endfunction

function SaveUserSetting(who, setting, value)
	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	var data_elem := DFFindElement(data_file, Hex(who.serial), DF_CREATE);
	
	return data_elem.SetProp(setting, value);
endfunction

function LoadUserSetting(who, setting)
	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	var data_elem := DFFindElement(data_file, Hex(who.serial));
	
	return data_elem.GetProp(setting);
endfunction
