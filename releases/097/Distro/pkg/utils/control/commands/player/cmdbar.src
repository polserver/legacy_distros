/* $Id$
 *
 */

use uo;
use os;
use polsys;

include ":control:icp-util";
include ":control:cmdbar";
include ":datafile:datafile";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:gumpprompt";

unload_scripts("");

program textcmd_CommandBar(who)
	if ( GetProcess(GetObjProperty(who, "#CmdBarPid")) )
		SendSysMessage(who, "You already have a command bar open.");
		return 0;
	else
		SetObjProperty(who, "#CmdBarPid", GetPid());
	endif

	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	var main_elem := DFFindElement(data_file, "CmdBarMain", DF_CREATE);
	var commands := main_elem.GetProp("Commands");

	var cur_menu := EXPAND_BTN;
	var cur_pkg, cur_lvl, gump;
	var cur_pkg_elem;
	while ( who.connected )
		if ( cur_menu == EXPAND_BTN )
			gump := RetrieveGump(main_elem, "Expanded", who);
		elseif ( cur_menu == COLLAPSE_BTN )
			gump := RetrieveGump(main_elem, "Collapsed", who);
		elseif ( cur_menu == CMDLIST_BTN )
			gump := RetrieveGump(main_elem, "PkgList", who);
		elseif ( cur_menu == CMDLVLS_BTN )
			gump := gump := RetrieveGump(main_elem, "Levels", who);
		elseif ( cur_menu == SETTINGS_BTN )
			gump := SettingsMenu(who);
		elseif ( cur_menu == PKG_START )
			gump := RetrieveGump(cur_pkg_elem, "Levels", who);
		elseif ( cur_menu == LVL_START )
			gump := RetrieveGump(cur_pkg_elem, cur_lvl+"-Commands", who);
		endif

		if ( !LoadUserSetting(who, "Movable") )
			GFMovable(gump, 0);
		endif

		var input := GFSendGump(who, gump);
		// Process gump data
		if ( !input[0] )
			// Right click was made
			break;
		elseif ( input[COLLAPSE_BTN] )
			cur_menu := COLLAPSE_BTN;
		elseif ( input[EXPAND_BTN] )
			cur_menu := EXPAND_BTN;
		elseif ( input[CMDLIST_BTN] )
			if ( cur_menu == CMDLIST_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := CMDLIST_BTN;
			endif
		elseif ( input[REFRESH_BTN] )
			var script := Start_Script(":control:initializer/cmdbarmenus");
			while ( script.pid )
				SleepMS(100);
			endwhile
		elseif ( input[CMDLVLS_BTN] )
			if ( cur_menu == CMDLVLS_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := CMDLVLS_BTN;
			endif
		elseif ( input[SETTINGS_BTN] )
			if ( cur_menu == SETTINGS_BTN )
				cur_menu := EXPAND_BTN;
			else
				cur_menu := SETTINGS_BTN;
			endif
		elseif ( input[APPLY_BTN] )
			SaveUserSetting(who, "Movable", input[MOVABLE_CHK]);
			SaveUserSetting(who, "Transparent", input[TRANSPARENT_CHK]);
			GumpPrompt(who, "Settings updated.");
		elseif ( input[0] >= CMD_START )
			var command := commands[cur_pkg][cur_lvl][input[0]-CMD_START];
			var result := StartCommand(who, cur_pkg, cur_lvl, command);
			// Collapse the menus if the command worked
			if ( result )
				cur_menu := EXPAND_BTN;
				cur_pkg := 0;
				cur_lvl := 0;
			endif
		elseif ( input[0] >= LVL_START )
			var temp := commands[cur_pkg].Keys();
			cur_lvl := temp[input[0]-LVL_START];
			cur_menu := LVL_START;
		elseif ( input[0] >= PKG_START )
			var temp := commands.Keys();
			cur_pkg := temp[input[0]-PKG_START];
			cur_pkg_elem := DFFindElement(data_file, cur_pkg);
			cur_menu := PKG_START;
		else
			// This gets hit when the user right clicks the gump
			// and check boxes were present (and checked)
			break;
		endif

		SleepMS(2);
	endwhile

	return 1;
endprogram

function SettingsMenu(who)
	var transparency := LoadUserSetting(who, "Transparent");
	var gump := ExpandedMenuBar(transparency);
	GFResizePic(gump, 470, 30, GetCfgConst("BackGrounds", "STONESLAB"), 170, 150);
	if ( transparency )
		GFAddAlphaRegion(gump, 470, 30, 170, 150);
	endif
	
	GFCheckBox(gump, 475, 40, 210, 211, LoadUserSetting(who, "Movable"), MOVABLE_CHK);
	GFTextLine(gump, 500, 40, 2100, "Movable");

	GFCheckBox(gump, 475, 60, 210, 211, LoadUserSetting(who, "Transparent"), TRANSPARENT_CHK);
	GFTextLine(gump, 500, 60, 2100, "Transparent");

	if ( who.cmdlevel )
		GFAddButton(gump, 475, 113, 2117, 2118, GF_CLOSE_BTN, REFRESH_BTN);
		GFTextLine(gump, 495, 110, 2100, "Uncache Gumps");
	endif

	GFAddButton(gump, 530, 140, 0x84C, 0x84B, GF_CLOSE_BTN, APPLY_BTN);
	
	return gump;
endfunction

function StartCommand(who, cur_pkg, cur_lvl, command)
	if ( cur_lvl > who.cmdlevel )
		GumpPrompt(who, "Your command level is not high enough.");
		return 0;
	endif

	var path := ICP_FormatScriptPath(command, cur_pkg);
	var script := Start_Script(path, who);

	if ( script.errortext )
		GumpPrompt(who, "Failed to start "+path+" [P] "+script.errortext);
		return 0;
	else
		SendSysMessage(who, "Starting command...");
		return 1;
	endif
endfunction

function SaveUserSetting(who, setting, value)
	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	var data_elem := DFFindElement(data_file, Hex(who.serial), DF_CREATE);

	return data_elem.SetProp(setting, value);
endfunction

function LoadUserSetting(who, setting)
	var data_file := DFOpenDataFile(":control:cmdbar", DF_CREATE);
	var data_elem := DFFindElement(data_file, Hex(who.serial));

	return data_elem.GetProp(setting);
endfunction

function RetrieveGump(data_elem, gump_name, who:=0)
	var transparent :=0;
	if ( who )
		transparent := LoadUserSetting(who, "Transparent");

		if ( transparent )
			gump_name := gump_name+"Trans";
		endif
	endif

	return data_elem.GetProp(gump_name);
endfunction