/* $Id$
 *
 */

use uo;
use os;
use cfgfile;

// Stored as globals because hook scripts handle them in a special way.
var name_colors, general_elem;

program Install()
	Set_Critical(1);

	var rep_cfg := ReadConfigFile("::repsys");
	if ( !rep_cfg )
		return 0;
	endif

	name_colors := rep_cfg["NameColoring"];
	if ( !name_colors )
		return 0;
	endif

	general_elem := rep_cfg["General"];
	if ( !general_elem )
		return 0;
	endif

	Set_Critical(0);

	return 1;
endprogram

exported function NameColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return NameColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(name_colors, "Murderer");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(name_colors, "Criminal");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(name_colors, "Invulnerable");
	// Guild ally
	//	return GetConfigInt(name_colors, "GuildAlly");
	// Guid enemy
	//	GetConfigInt(name_colors, "GuildEnemy");
	else
		color := GetConfigInt(name_colors, "Innocent");
	endif

	if ( color.errortext )
		SysLog("NameColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction

exported function HighLightColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return HighLightColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(name_colors, "MurdererHighLight");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(name_colors, "CriminalHighLight");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(name_colors, "InvulnerableHighLight");
	// Guild ally
	//	return GetConfigInt(name_colors, "GuildAllyHighLight");
	// Guid enemy
	//	GetConfigInt(name_colors, "GuildEnemyHighLight");
	else
		color := GetConfigInt(name_colors, "InnocentHighLight");
	endif

	if ( color.errortext )
		SysLog("HighLightColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction

exported function OnAttack(mobile, attacked)
	// For now, tell core to process this.
	PrintTextAbove(mobile, "Repsys OnAttack ->"+attacked.name);

	/* Pseudo (mostly based on core layout)
	 * if ( attacked.master )
	 * 	return OnAttack(mobile, attacked);
	 * elseif ( attacked is innocent to mobile )
	 *	mobile.SetCriminal(1)
	 * endif
	 *
	 * if ( attacked is aggressor to mobile )
	 * 	// restart mobile's aggression timer
	 * else
	 * 	if ( !mobile is aggressor to attacked )
	 *		PrintTextAbovePrivate(attacked, mobile.name+" is attacking you!", attacked);
	 *	endif
	 *
	 *	// restart mobile's aggression timer
	 * endif
	 *
	 * return 1;
	 */
	return 0;
endfunction

exported function OnDamage(mobile, damaged)
	// For now, tell core to process this.
	PrintTextAbove(mobile, "Repsys OnDamage ->"+damaged.name);

	/* Pseudo (mostly based on core layout)
	 *
	 * if ( mobile == damaged )
	 *	// Its legal to hurt yourself.
	 * 	return 1;
	 * endif
	 *
	 * OnAttack(mobile, attacked);
	 *
	 * if ( damaged is innocent to mobile )
	 * 	// Add mobile to damaged's reportable list
	 * else
	 *	// mobile lawfully damaged attacked
	 * endif
	 *
	 * return 1;
	 */
	return 0;
endfunction

exported function OnHelp(mobile, helped)
	// For now, tell core to process this.
	PrintTextAbove(mobile, "Repsys OnHelp ->"+helped.name);

	/* Pseudo (mostly based on core layout)
	 *
	 * if ( mobile == helped )
	 * 	// Its okay to help yourself.
	 *	return 1;
	 * elseif ( helped.criminal )
	 *	mobile.SetCriminal(1);
	 * endif
	 *
	 * return 1;
	 */
	return 0;
endfunction

/*
 * IsInnocent(mobile_a, mobile_b)
 *
 * Purpose
 * Determines if mobile_a was innocent.
 *
 */
/*
function IsInnocentTo(mobile_a, mobile_b)
	// Checks to see if mobile_a is innocent.
	if ( mobile_b.murderer )
		// Mobile b is a murderer and considered guilty by default.
		return 1;
	elseif ( mobile_b.criminal )
		// Mobile b is a criminal and considered guilty by default.
		return 1;
	elseif ( mobile_b is aggressor to mobile_a )
		// Mobile b started the fight.
		return 1;
	elseif ( mobile_b is a guild ally )
		// Guild ally's are okay to mess with.
	        return 1;
	elseif ( mobile_b is a guild enemy )
		// Guild enemy's deserve whats coming to them.
		return 1;
	elseif ( mobile_b is an npc and its alignment is good )
		// Not nice to hurt 'blue' npcs
		return 0;
	else
		// Mobile_a is not innocent.
		return 0;
	endif
endfunction
*/
