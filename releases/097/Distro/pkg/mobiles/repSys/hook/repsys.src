/* $Id$
 *
 */

use uo;
use os;
use cfgfile;

include ":repsys:repsys";

// Stored as globals because hook scripts handle them in a special way.
var g_name_colors, g_general_elem;

program Install()
	Set_Critical(1);

	var rep_cfg := ReadConfigFile("::repsys");
	if ( !rep_cfg )
		return 0;
	endif

	g_name_colors := rep_cfg["NameColoring"];
	if ( !g_name_colors )
		return 0;
	endif

	g_general_elem := rep_cfg["General"];
	if ( !g_general_elem )
		return 0;
	endif

	Set_Critical(0);

	return 1;
endprogram

exported function NameColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return NameColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(g_name_colors, "Murderer");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(g_name_colors, "Criminal");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(g_name_colors, "Invulnerable");
	// Guild ally
	//	return GetConfigInt(g_name_colors, "GuildAlly");
	// Guid enemy
	//	GetConfigInt(g_name_colors, "GuildEnemy");
	else
		color := GetConfigInt(g_name_colors, "Innocent");
	endif

	if ( color.errortext )
		SysLog("NameColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction

exported function HighLightColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return HighLightColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(g_name_colors, "MurdererHighLight");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(g_name_colors, "CriminalHighLight");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(g_name_colors, "InvulnerableHighLight");
	// Guild ally
	//	return GetConfigInt(g_name_colors, "GuildAllyHighLight");
	// Guid enemy
	//	GetConfigInt(g_name_colors, "GuildEnemyHighLight");
	else
		color := GetConfigInt(g_name_colors, "InnocentHighLight");
	endif

	if ( color.errortext )
		SysLog("HighLightColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction


exported function OnAttack(attacker, defender)
	// For now, tell core to process this.
	return 0;

	if ( attacker == defender )
		// Safe to attack.. yourself?
		return 1;
	elseif ( defender.master )
		// Check for the npc's master.
		return OnAttack(attacker, defender.master);
	elseif ( IsInnocentTo(defender, attacker) )
		// Reset the criminal timer for the attacker.
		attacker.SetCriminal(1);
	endif

	if ( IsAggressorTo(attacker, defender) )
		//Reset the aggressive timer if the defender was the aggressor.
		AddAggressorTo(attacker, defender);
	else
		//Attacker is the aggressor
		if ( !IsAggressorTo(defender, attacker) )
			// New engagement, inform the defender of the attack.
			PrintTextAbovePrivate(defender, "*"+attacker.name+" is attacking you!*",
			defender, _DEFAULT_TEXT_FONT, GetConfigInt(g_name_colors, "Murderer"));
		endif
		AddAggressorTo(defender, attacker);
	endif

	return 1;
endfunction

exported function OnDamage(attacker, defender)
	// For now, tell core to process this.
	return 0;

	if ( attacker == defender )
		// It is okay to hurt yourself. Damn emos!
		return 1;
	endif

	// Initiate the damage as an attack.
	OnAttack(attacker, defender);

	if ( IsInnocentTo(defender, attacker) )
		AddToBeReportable(defender, attacker);
	else
		// Restart the lawful damage timer for the attacker.
		// Attacker is lawfully damaging the defender.
		AddLawfullyDamagedTo(defender, attacker);
	endif

	return 1;
endfunction

exported function OnHelp(mobile, helped)
	// For now, tell core to process this.
	return 0;

	if ( mobile == helped )
		// Its okay to help yourself.
		return 1;
	elseif ( helped.criminal )
		// Not okay to help criminals!
		mobile.SetCriminal(1);
	endif

	return 1;
endfunction
