/* $Id$
 *
 */

use uo;
use os;
use cfgfile;

// Stored as globals because hook scripts handle them in a special way.
var name_colors, general_elem;

program Install()
	Set_Critical(1);

	var rep_cfg := ReadConfigFile("::repsys");
	if ( !rep_cfg )
		return 0;
	endif

	name_colors := rep_cfg["NameColoring"];
	if ( !name_colors )
		return 0;
	endif

	general_elem := rep_cfg["General"];
	if ( !general_elem )
		return 0;
	endif

	Set_Critical(0);

	return 1;
endprogram

exported function NameColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return NameColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(name_colors, "Murderer");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(name_colors, "Criminal");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(name_colors, "Invulnerable");
	// Guild ally
	//	return GetConfigInt(name_colors, "GuildAlly");
	// Guid enemy
	//	GetConfigInt(name_colors, "GuildEnemy");
	else
		color := GetConfigInt(name_colors, "Innocent");
	endif

	if ( color.errortext )
		SysLog("NameColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction

exported function HighLightColor(mobile, seen_by)
	var color := 0;

	if ( mobile.master )
		return HighLightColor(mobile.master, seen_by);
	elseif ( mobile.murderer )
		color := GetConfigInt(name_colors, "MurdererHighLight");
	elseif ( mobile.criminal )
		// Murderers are always criminals
		// Criminals are not always murderers
		color := GetConfigInt(name_colors, "CriminalHighLight");
	elseif ( mobile.Enabled("invul") )
		color := GetConfigInt(name_colors, "InvulnerableHighLight");
	// Guild ally
	//	return GetConfigInt(name_colors, "GuildAllyHighLight");
	// Guid enemy
	//	GetConfigInt(name_colors, "GuildEnemyHighLight");
	else
		color := GetConfigInt(name_colors, "InnocentHighLight");
	endif

	if ( color.errortext )
		SysLog("HighLightColor() - "+color.errortext);
	endif

	return CInt(color);
endfunction


exported function OnAttack(attacker, defender)
	// For now, tell core to process this.
	return 0;

	if ( attacker == defender )
		// Safe to attack.. yourself?
		return 1;
	elseif ( defender.master )
		// Check for the npc's master.
		return OnAttack(attacker, defender.master);
	elseif ( IsInnocentTo(defender, attacker) )
		// Reset the criminal timer for the attacker.
		attacker.SetCriminal(1);
	endif

	if ( IsAggressorTo(attacker, defender) )
		//Reset the aggressive timer if the defender was the aggressor.
		AddAggressorTo(attacker, defender);
	else
		//Attacker is the aggressor
		if ( !IsAggressorTo(defender, attacker) )
			// New engagement, inform the defender of the attack.
			PrintTextAbovePrivate(defender, "*"+attacker.name+" is attacking you!*",
			defender, _DEFAULT_TEXT_FONT, GetConfigInt(name_colors, "Murderer"));
		endif
		AddAggressorTo(defender, attacker);
	endif

	return 1;
endfunction

exported function OnDamage(mobile, damaged)
	// For now, tell core to process this.
	PrintTextAbove(mobile, "Repsys OnDamage ->"+damaged.name);

	/* Pseudo (mostly based on core layout)
	 *
	 * if ( mobile == damaged )
	 *	// Its legal to hurt yourself.
	 * 	return 1;
	 * endif
	 *
	 * OnAttack(mobile, attacked);
	 *
	 * if ( damaged is innocent to mobile )
	 * 	// Add mobile to damaged's reportable list
	 * else
	 *	// mobile lawfully damaged attacked
	 * endif
	 *
	 * return 1;
	 */
	return 0;
endfunction

exported function OnHelp(mobile, helped)
	// For now, tell core to process this.
	PrintTextAbove(mobile, "Repsys OnHelp ->"+helped.name);

	/* Pseudo (mostly based on core layout)
	 *
	 * if ( mobile == helped )
	 * 	// Its okay to help yourself.
	 *	return 1;
	 * elseif ( helped.criminal )
	 *	mobile.SetCriminal(1);
	 * endif
	 *
	 * return 1;
	 */
	return 0;
endfunction

/*
 * IsInnocent(mobile_a, mobile_b)
 *
 * Purpose
 * Determines if the defender was innocent to the attacker.
 *
 */
function IsInnocentTo(defender, attacker)
	if ( defender.murderer )
		// Defender is a murderer and as such, fair game.
		return 0;
	elseif ( defender.criminal )
		// Defender is a criminal and as such, fair game.
		return 0;
	elseif ( IsAggressorTo(attacker, defender) )
		// Defender started the fight, and is fair game.
		return 0;
	// elseif ( IsGuildAlly() )
	//	return 0;
	// elseif ( IsGuildEnemy() )
	//	return 0;
	// elseif ( HasLawfullyDamaged(attacker, defender) )
	//	Havnt gotten to this yet!
	//	return 0;
	else
		return 1;
	endif
endfunction

/*
 * Purpose
 * Sets attacker as aggressive towards the defender.
 * Lasts for AggressorFlagTimeout seconds in repsys.cfg
 *
 *
 */
function AddAggressorTo(defender, attacker)
	var aggressor_list := GetObjProperty(defender, "#Aggressors");
	if ( !aggressor_list )
		aggressor_list := dictionary;
	endif

	aggressor_list[attacker.serial] := ReadGameClock() + general_elem.AggressorFlagTimeout;

	return SetObjProperty(defender, "#Aggressors", aggressor_list);
endfunction

/*
 * Purpose
 * Determines if the attacker is aggressive to the defender.
 *
 *
 */
function IsAggressorTo(attacker, defender)
	var aggressor_list := GetObjProperty(defender, "#Aggressors");

	return ( CInt(aggressor_list[attacker.serial]) < ReadGameClock() );
endfunction
