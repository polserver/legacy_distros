use uo;
use os;
use polsys;

include ":chat:chatIO";
include ":chat:packets";
include ":chat:functions";
include ":chat:settings";

exported function handleChangePassword(character, byref packet)
	if ( CH_CheckDebug() )
		Print("handleChangePassword: "+character.name+" "+packet);
	endif
	
	return 1;
endfunction

exported function handleClose(character, byref packet)
	if ( CH_CheckDebug() )
		Print("handleClose: "+character.name+" "+packet);
	endif
	
	// Leave conference ?
	
	var new_packet := CreatePacket(0xB2, 13);
	new_packet.SetInt16(1, 13); // packet size
	new_packet.SetInt16(3, 0x03EC); // close chat
	new_packet.SendPacket(character);
	
	var chat_name := GetObjProperty(character, "ChatName");
	new_packet := CreatePacket(0xB2, 9 + (Len(chat_name) * 2));
	new_packet.SetInt16(1, 9 + (Len(chat_name) * 2)); // packet size
	new_packet.SetInt16(3, 0x03EF); // remove user
	
	CH_RemoveUser(character.serial);
	
	// Maybe only send to others in conference
	SendChatPacket(new_packet);
	
	return 1;
endfunction

exported function handleMessage(character, byref packet)
	if ( CH_CheckDebug() )
		Print("handleMessage: "+character.name+" "+packet);
	endif
	
	// if user not in conference give an error
	// if user is in conference, find all valid targets
	// consider everyone's ignore list
	// consider speaking privs
	// send text to other valid targets

	return 1;
endfunction

exported function handleJoinConference(character, byref packet)
	if ( CH_CheckDebug() )
		Print("handleJoinConference: "+character.name+" "+packet);
	endif

	// Sent like this: "ConferenceName" password, split them up
	var conference_name := CChrZ(packet.GetUnicodeString(11, (packet.GetSize() / 2) - 5));
	conference_name := SplitWords(conference_name, CChr(0x22));
	Print("Joining conference: "+conference_name);

	if ( conference_name[2] )
		var conference_pass := conference_name[2];
		conference_pass := conference_pass[2, Len(conference_pass) - 2];
		conference_name := conference_name[1];
		var conference := CH_GetProp("Conferences", conference_name);
		
		if ( conference.pass != conference_pass )
			SendChatClilocMessage(character, 0x000E); // incorrect password
			return 1;
		endif
	else
		conference_name := conference_name[1];
	endif
	
	var join_packet := CreatePacket(0xB2, 13 + (Len(conference_name) * 2));
	join_packet.SetInt16(1, 13 + (Len(conference_name) * 2)); // packet size
	join_packet.SetInt16(3, 0x03F1); // you have joined message
	join_packet.SetUnicodeString(9, CAscZ(conference_name), 0);
	join_packet.SendPacket(character);

	CH_AddUserToConference(character, conference_name);
	
	return 1;
endfunction

exported function handleCreateNewConference(character, byref packet)
	if ( CH_CheckDebug() )
		Print("handleCreateNewConference: "+character.name+" "+packet);
	endif
	
	var conference_name := CChrZ(packet.GetUnicodeString(9, (packet.GetSize() / 2) - 5));
	var conference_pass := "";
	
	if ( Find(conference_name, "{", 1) )
		conference_pass := conference_name[Find(conference_name, "{", 1) + 1, Find(conference_name, "}", 1) - 2];
		conference_name := conference_name[1, Find(conference_name, "{", 1) - 1];	
	endif
	
	Print("Recieved conference: "+conference_name+" "+conference_pass);

	// TODO: DO NOT allow special characters (',','"',' ', etc...)
	//       On error, send packets not messages
	CreateNewConference(conference_name, conference_pass, character);

	return 1;
endfunction

exported function handleRenameConference(character, byref packet)
endfunction

exported function handleSendPrivateMessage(character, byref packet)
		// check ignore
		// display message
endfunction

exported function handleIgnore(character, byref packet)
	// add user to ignore list
endfunction

exported function handleStopIgnoring(character, byref packet)
	// remove user from ignore list
endfunction

exported function handleToggleIgnore(character, byref packet)
	// wrapper for other functions
endfunction

exported function handleGrantSpeakingPrivs(character, byref packet)
endfunction

exported function handleRemoveSpeakingPrivs(character, byref packet)
endfunction