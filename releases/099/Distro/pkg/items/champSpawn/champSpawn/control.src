/*
        Maintened by *Edwards

        2009-12-31

        Last Modifications 2010-10-02
*/
use uo;
use os;
use util;

//include ":champSpawn:champion";
include ":champSpawn:settings";

const INAC_WAIT := 1800;
const ACTIVE_EACH := 8640;  //24 hours
const LVLDOWNCHECK := 600;

program control_champSpawn( altar )

	if( GetProcess( CInt( GetObjProperty( altar, "#ChamSpawnPid" ))))
		return 0;
	elseif( !PentagramExist( altar ))
                //Missing piece to pentagram
                return 0;
        elseif( !GetObjProperty( altar, "Spawn" ))
                  return 0;
        endif

        SetObjProperty( altar, "#ChamSpawnPid", GetPid() );

	var creatures := array{},
            total_kills := 0,
            nextLvlUp := 20,
	    checkLevel := ReadGameClock() + LVLDOWNCHECK;

        while( altar )
                Sleep(1);

                if( !GetObjProperty( altar, "#Active" ))
                        var restart := CInt( GetObjProperty( altar, "#Restart" ));
                        if( restart < ReadGameClock() )
                                EnableAltar( altar );
                                continue;
                        else
                                Sleep( INAC_WAIT );
                                continue;
                        endif
                endif

                var champ_serials := GetObjProperty( altar, "Champ_serials" );
                if( champ_serials )
                        continue;
                endif

                if( GetObjProperty( altar, "#Completed" ))
                        CreateSpawn( altar, "Champion" );
                        continue;
                endif

                var kills := 0;

                var i;
                for( i:=creatures.size(); i>0; i-=1 )
                        if( !SystemFindObjectBySerial( creatures[i] ))
                                creatures.Erase(i);
                                kills += 1;
                        endif
                        SleepMS(5);
                endfor

		total_kills += kills;

                var kill_Percent := CInt(( total_Kills * 100 ) / ( GetMaxMonsters( altar ) * 4 ));
                if( kill_Percent > 90 )
                        if( !GetObjProperty( altar, "#Completed" ))
                                kills := 0;
                                total_kills := 0;
                                nextLvlUp := 20;
                                checkLevel := ReadGameClock() + LVLDOWNCHECK;

                                CreateNextRedSkull( altar );
                        endif
                elseif( kill_Percent > nextLvlUp )
                        nextLvlUp += 20;
                        CreateNextWhiteSkull( altar );
                elseif( ReadGameClock() > checkLevel )
                        kills := 0;
                        total_Kills := 0;
                        nextLvlUp := 20;
                        checkLevel := ReadGameClock() + LVLDOWNCHECK;

                        if( kill_Percent > 20 )
                                CreateNextRedSkull( altar );
                        endif

                        DestroyLastRedSkull( altar );
                endif

                if( !GetObjProperty( altar, "#Completed" ))
                        var num_creatures := CInt( creatures.Size() ),
                            max_creatures := GetMaxMonsters( altar );
                            
                        for( i:=num_creatures; i<max_creatures; i+=1 )
                                var creature := CreateSpawn( altar );
                                if( creature )
                                        creatures.Append( creature );
                                endif
                                Sleep(1);
                        endfor
                endif
        endwhile

        return 1;
endprogram

function PentagramExist( altar )

	var pentagram := GetObjProperty( altar, "pentagram" );
        if( !pentagram )
                //No pentagram property, abord process.
                return 0;
        endif

	foreach pent in pentagram

		var piece := SystemFindObjectBySerial( pent );
                if( piece.errortext )
                        //Couldn't find piece. Pentagram is not complete. Abord.
                	return 0;
                endif

                SleepMS(5);
	endforeach

        return 1;
endfunction

function EnableAltar( altar )

	var pentagram := GetObjProperty( altar, "pentagram" );

	foreach pent in pentagram

		var piece := SystemFindObjectBySerial( pent );
                if( piece.errortext )
                        //Couldn't find piece. Pentagram is not complete. Abord.
                	return 0;
                endif

		piece.invisible := 0;
		piece.color := 0;

                SleepMS(5);
	endforeach

	SetObjProperty( altar, "#Active", 1 );

        return 1;
endfunction

function DisableAltar( altar )

	var pentagram := GetObjProperty( altar, "pentagram" );

	foreach pent in pentagram

		var piece := SystemFindObjectBySerial( pent );
                if( piece.errortext )
                        //Couldn't find piece. Pentagram is not complete. Abord.
                	return 0;
                endif

		piece.color := 980;
		piece.invisible := 1;

                SleepMS(5);
	endforeach

	EraseObjProperty( altar, "#Active" );
	SetObjProperty( altar, "#Restart" ReadGameClock() + ACTIVE_EACH );

        EraseObjProperty( altar, "Champ_serials" );
        EraseObjProperty( altar, "#Completed" );

        return 1;
endfunction

function CreateSpawn( altar, spawn_name:="" )

         if( spawn_name != "Champion" )
                  spawn_name := "level"+GetSpawnLevel( altar );
         endif

         var poss_spawns := GetSpawn( altar, spawn_name ),
             template := poss_spawns.RandomEntry();

         if( template.errortext )
                  PrintTextAbove( altar, "Error template <"+template+"> -->"+template.errortext );
                  return 0;
         endif

         var i;
         for( i:=0; i<=10; i+=1 )

               var x := altar.x + RandomInt( 2 * 10 ) - 10,
                   y := altar.y + RandomInt( 2 * 10 ) - 10,
                   z := GetWorldHeight( x, y ),
                   realm := altar.realm,
                   list_near := ListMobilesNearLocation( x, y, z, 3, realm );

               if( list_near.Size() < 1 )
                      var npc :=  CreateNPCFromTemplate( template, x, y, z, 0, realm );
                      if( npc )
                             return npc;
                      endif
               endif

               SleepMS(10);
         endfor

         return 0;
endfunction

function GetSpawn( altar, spawn_name )

         var spawn_type := GetObjProperty( altar, "Spawn" );
         if( spawn_type.errortext )
                  PrintTextAbove( altar, "Error could not ready property <SpawnType> -->"+spawn_type.errortext );
                  return 0;
         endif

	 var spawn_elem := CS_GetSettingsCfgElem( spawn_type );
	 if( spawn_elem.errortext )
                  PrintTextAbove( altar, "Error could not ready elem <"+spawn_type+"> -->"+spawn_elem );
                  return 0;
	 endif

	 var spawns := GetConfigStringArray( spawn_elem, spawn_name );
	 if( !spawns )
                  PrintTextAbove( altar, "Error could not get spawn name <"+spawn_name+"> -->"+spawns.errortext );
                  return 0;
	 endif

	 return spawns;
endfunction

function GetSpawnLevel( altar )

	var redSkulls := CInt( GetObjProperty( altar, "lrskull" ));
	if( redSkulls < 6 )
		return 1;
	elseif( redSkulls < 10 )
		return 2;
	elseif( redSkulls < 14 )
		return 3;
	else
		return 4;
	endif
endfunction

function GetMaxMonsters( altar )

	return CInt( 30 - ( GetSpawnLevel( altar ) * 5 ));
endfunction

function GetRedSkullLocation( altar, index )

	var x_pos,
            y_pos;

	if( index < 5 )
		x_pos := index - 2;
		y_pos := -2;
	elseif( index < 9 )
		x_pos := 2;
		y_pos := index-6;
	elseif( index < 13 )
		x_pos := 10 - index;
		y_pos := 2;
	else
		x_pos := -2;
		y_pos := 14 - index;
	endif

	return {altar.x+x_pos, altar.y+y_pos, altar.z};
endfunction

function GetWhiteSkullLocation( altar, index )

	var x_pos := 0,
            y_pos := 0;

	case( index )
		default:
		0:      x_pos := -1;
                        y_pos := -1;
                        break;

		1:      x_pos :=  1;
                        y_pos := -1;
                        break;

		2:      x_pos :=  1;
                        y_pos :=  1;
                        break;

		3:      x_pos := -1;
                        y_pos :=  1;
                        break;
	endcase

	return {altar.x+x_pos, altar.y+y_pos, altar.z};
endfunction

function CreateNextWhiteSkull( altar )

	var lw_skull := CInt( GetObjProperty( altar, "lwskull" ));
	var skulls := array{};

	skulls := GetObjProperty( altar, "wskulls" );
	if( lw_skull == 4 )
		WipeItemsArray( skulls );

		SetObjProperty( altar, "wskulls", skulls );
		EraseObjProperty( altar, "lwskull" );

		CreateNextRedSkull( altar );
		return 1;
	endif

	var location := GetRedSkullLocation( altar, lw_skull + 1 );
	var skull := CreateItemAtLocation( location[1], location[2], location[3], 0x1854, 1, altar.realm );

	skull.movable := 0;
	if( !skulls )
		skulls := {skull.serial};
	else
		skulls.Append( skull.serial );
	endif

        PlaySoundEffect( skull, 0x29 );
	PlayStationaryEffect( skull.x, skull.y, skull.z, 0x3728, 7, 0x10, 0, skull.realm );

	SetObjProperty( altar, "lwskull", lw_skull + 1 );
	SetObjProperty( altar, "wskulls", skulls );

	return 1;
endfunction

function CreateNextRedSkull( altar )

	var lr_skull := CInt( GetObjProperty( altar, "lrskull" ));

	var skulls := GetObjProperty( altar, "rskulls" );
        if( !skulls )
                skulls := array{};
        endif

	var w_skulls := GetObjProperty( altar, "wskulls" );
        if( !w_skulls )
                w_skulls := array{};
        endif

	WipeItemsArray( w_skulls );

	SetObjProperty( altar, "wskulls", w_skulls );
	EraseObjProperty( altar, "lwskull" );

	if( lr_skull > 16 )
		WipeItemsArray( skulls );

		SetObjProperty( altar, "rskulls", skulls );
		EraseObjProperty( altar, "lrskull" );

		SetObjProperty( altar, "#Completed", 1 );
		return 1;
	endif

	var location := GetWhiteSkullLocation( altar, lr_skull + 1 );
	var skull := CreateItemAtLocation( location[1], location[2], location[3], 0x1854, 1, altar.realm );

	skull.color := 0x26;
	skull.movable := 0;
	if( !skulls )
		skulls := {skull.serial};
	else
		skulls.Append( skull.serial );
	endif

        PlaySoundEffect( skull, 0x29 );
	PlayStationaryEffect( skull.x, skull.y, skull.z, 0x3728, 7, 0x10, 0, skull.realm );

	SetObjProperty( altar, "lrskull", lr_skull + 1 );
	SetObjProperty( altar, "rskulls", skulls );

	return 1;
endfunction

function DestroyLastRedSkull( altar )

	var l_skull := CInt( GetObjProperty( altar, "lrskull" ));
	if( !l_skull )
		return 0;
	endif

	var skulls := GetObjProperty( altar, "rskulls" );
	if( !skulls )
		skulls := array{};
	endif

	var skull := skulls[l_skull];

	DestroyItem( SystemFindObjectBySerial( skull ));
	skulls.Erase( l_skull );

	SetObjProperty( altar, "lrskull", l_skull - 1 );
	SetObjProperty( altar, "rskulls", skulls );

	return 1;
endfunction

function WipeItemsArray( skulls )

	foreach serial in skulls
		DestroyItem( SystemFindObjectBySerial( serial ));

                SleepMS(5);
	endforeach

	return 1;
endfunction
