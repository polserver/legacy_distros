C:\ZH099\pkg\systems\brainAI\commands\gm\attack.src, Line 9
program textcmd_attack(who)
CONST REPORT_ALL	:= 0x7;
0: get arg 'who'
if( !AuthorizationCode( who ))
1: local #0
2: makelocal
3: jmp userfunc @76
4: if true goto 13
SendSysMessage( who, "Cancelled." );
5: local #0
6: "Cancelled."
7: 3L
8: 1000L
9: Func(2,3): SendSysMessage
10: #
return 0;
11: 0L
12: progend
SendSysMessage(who, "Select an npc (attacker).");
13: local #0
14: "Select an npc (attacker)."
15: 3L
16: 1000L
17: Func(2,3): SendSysMessage
18: #
var targ := target(who);
19: decl local #1
20: local #0
21: 1L
22: Func(2,7): Target
23: :=
24: #
if ( !targ.npctemplate ) 
25: local #1
26: get member id 'npctemplate' (62)
27: if true goto 36
SendSysMessage(who, "Cancelled");
28: local #0
29: "Cancelled"
30: 3L
31: 1000L
32: Func(2,3): SendSysMessage
33: #
return 0;
34: 0L
35: progend
SendSysMessage(who, "Select a mobile (defender).");
36: local #0
37: "Select a mobile (defender)."
38: 3L
39: 1000L
40: Func(2,3): SendSysMessage
41: #
var targ2 := target(who);
42: decl local #2
43: local #0
44: 1L
45: Func(2,7): Target
46: :=
47: #
if ( !targ2.IsA(POLCLASS_MOBILE) )
48: local #2
49: 3L
50: Call Method id isa (#0, 1 params)
51: if true goto 60
SendSysMessage(who, "Cancelled");
52: local #0
53: "Cancelled"
54: 3L
55: 1000L
56: Func(2,3): SendSysMessage
57: #
return 0;
58: 0L
59: progend
var event := struct{"type":=SYSEVENT_ENGAGED, "source":=targ2};
60: decl local #3
61: struct
62: 2L
63: addmember-assign(type)
64: local #2
65: addmember-assign(source)
66: :=
67: #
SendEvent(targ, event);
68: local #1
69: local #3
70: Func(2,8): SendEvent
71: #
return 1;
72: 1L
73: progend
74: leave block(4)
75: progend
c:/ZH099/scripts/include/security.inc, Line 14
function AuthorizationCode( mobile )
76: pop param 'mobile'
if( GetObjProperty( mobile, "#AuthCodeGiven" ));
77: local #0
78: "#AuthCodeGiven"
79: Func(2,1): GetObjProperty
80: if false goto 83
return 1;
81: 1L
82: return
var autocode := GetGlobalProperty( "CA" );
83: decl local #1
84: "CA"
85: Func(2,2): GetGlobalProperty
86: :=
87: #
if( !autocode )
88: local #1
89: if true goto 105
SendSysMessage( mobile, "Authorization code is not given yet.", 3, 53 );
90: local #0
91: "Authorization code is not given yet."
92: 3L
93: 53L
94: Func(2,3): SendSysMessage
95: #
SendSysMessage( mobile, "Uses .setauthcode to create a new code.", 3, 53 );
96: local #0
97: "Uses .setauthcode to create a new code."
98: 3L
99: 53L
100: Func(2,3): SendSysMessage
101: #
return 0;
102: 0L
103: return
104: goto147
var code := SendTextEntryGump( mobile, "Enter the Authorization Code.", TE_CANC
105: decl local #0
106: local #0
107: "Enter the Authorization Code."
108: 1L
109: 1L
110: 10L
111: ""
112: Func(2,4): SendTextEntryGump
113: :=
114: #
if( code == autocode )
115: local #2
116: local #1
117: ==
118: if false goto 133
SendSysMessage( mobile, "Code Accepted!", 3, 70 );
119: local #0
120: "Code Accepted!"
121: 3L
122: 70L
123: Func(2,3): SendSysMessage
124: #
SetObjProperty( mobile, "#AuthCodeGiven", 1 );
125: local #0
126: "#AuthCodeGiven"
127: 1L
128: Func(2,5): SetObjProperty
129: #
return 1;
130: 1L
131: return
132: goto146
SendSysMessage( mobile, "It is not the Authorization code.", 3, 33 );
133: local #0
134: "It is not the Authorization code."
135: 3L
136: 33L
137: Func(2,3): SendSysMessage
138: #
NotifyStaffOnline( mobile, "has provided a wrong authorization code." );
139: local #0
140: "has provided a wrong authorization code."
141: makelocal
142: jmp userfunc @149
143: #
return 0;
144: 0L
145: return
146: leave block(1)
147: 0L
148: return
c:/ZH099/scripts/include/security.inc, Line 40
function NotifyStaffOnline( object, text )
149: pop param 'text'
150: pop param 'object'
var name := object.name;
151: decl local #2
152: local #1
153: get member id 'name' (3)
154: :=
155: #
if( !name )
156: local #2
157: if true goto 165
name := object.desc;
158: local #1
159: get member id 'desc' (19)
160: local2 := 
if( !name )
161: local #2
162: if true goto 165
name := object;
163: local #1
164: local2 := 
foreach character in EnumerateOnlineCharacters()
165: Func(2,6): EnumerateOnlineCharacters
166: initforeach @201
if( GetObjProperty( character, "Notify" ))
167: local #3
168: "Notify"
169: Func(2,1): GetObjProperty
170: if false goto 198
if( object.cmdlevel <= character.cmdlevel || character.cmdlevel >= 4 )
171: local #1
172: get member id 'cmdlevel' (46)
173: local #3
174: get member id 'cmdlevel' (46)
175: <=
176: local #3
177: get member id 'cmdlevel' (46)
178: 4L
179: >=
180: ||
181: if false goto 198
SendSysMessage( character, "You receive a notification:", 3, 55 );
182: local #3
183: "You receive a notification:"
184: 3L
185: 55L
186: Func(2,3): SendSysMessage
187: #
SendSysMessage( character, name+" >>> "+text, 3, 55 );
188: local #3
189: local #2
190: " >>> "
191: +
192: local #0
193: +
194: 3L
195: 55L
196: Func(2,3): SendSysMessage
197: #
SleepMS(5);
198: 5L
199: Func(3,0): Sleepms
200: #
201: stepforeach @167
202: leave block(3)
if( object.serial )
203: local #1
204: get member id 'serial' (6)
205: if false goto 222
ReportText( name+"["+object.serial+"] >>> "+text, REPORT_SYSLOG );
206: local #2
207: "["
208: +
209: local #1
210: get member id 'serial' (6)
211: +
212: "] >>> "
213: +
214: local #0
215: +
216: 2L
217: 0L
218: makelocal
219: jmp userfunc @234
220: #
221: goto232
ReportText( name+" >>> "+text, REPORT_SYSLOG );
222: local #2
223: " >>> "
224: +
225: local #0
226: +
227: 2L
228: 0L
229: makelocal
230: jmp userfunc @234
231: #
return 1;
232: 1L
233: return
c:/ZH099/pkg/utils/security/include/report.inc, Line 22
function ReportText( report_text:="?", flags:=REPORT_DISABLE, text_color:=0 )
234: pop param 'text_color'
235: pop param 'flags'
236: pop param 'report_text'
if( !flags )
237: local #1
238: if true goto 242
return 0;
239: 0L
240: return
241: goto297
elseif( flags & REPORT_CONSOLE )
242: local #1
243: 1L
244: &
245: if false goto 252
Print( ""+report_text );
246: ""
247: local #2
248: +
249: Func(1,0): Print
250: #
251: goto297
elseif( flags & REPORT_SYSLOG )
252: local #1
253: 2L
254: &
255: if false goto 286
var script_name := CStr( GetProcess( GetPid() ).name ),
256: decl local #0
257: Func(3,2): GetPid
258: Func(3,1): GetProcess
259: get member id 'name' (3)
260: Func(0,0): CStr
261: :=
262: #
263: decl local #1
264: local #3
265: makelocal
266: jmp userfunc @299
267: :=
268: #
LogToFile( "::log/"+pkg_name+".log", "["+script_name+"]: "+report_text, LOG_DAT
269: "::log/"
270: local #4
271: +
272: ".log"
273: +
274: "["
275: local #3
276: +
277: "]: "
278: +
279: local #2
280: +
281: 1L
282: Func(4,0): LogToFile
283: #
284: leave block(2)
285: goto297
elseif( flags & REPORT_BROADCAST )
286: local #1
287: 4L
288: &
289: if false goto 297
Broadcast( ""+report_text, 3, text_color );
290: ""
291: local #2
292: +
293: 3L
294: local #0
295: Func(2,0): Broadcast
296: #
return 1;
297: 1L
298: return
c:/ZH099/pkg/utils/security/include/report.inc, Line 40
function GetPkgName( script_name )
299: pop param 'script_name'
var i;
300: decl local #1
301: #
for( i:=1; i<=len(script_name); i+=1 )
302: local #1
303: 1L
304: :=
305: #
306: local #1
307: local #0
308: Func(0,1): Len
309: <=
310: if false goto 330
if( !Check_ValidChar( script_name[i] ))
311: local #0
312: local #1
313: [] 1
314: 0L
315: makelocal
316: jmp userfunc @346
317: if true goto 322
script_name[i] := " ";
318: local #0
319: local #1
320: " "
321: [] := (1) #
SleepMS(5);
322: 5L
323: Func(3,0): Sleepms
324: #
325: local #1
326: 1L
327: +=
328: #
329: goto306
foreach poss_pkg in ( SplitWords( script_name ))
330: local #0
331: " "
332: Func(0,5): SplitWords
333: initforeach @342
if( GetPackageByName( poss_pkg ))
334: local #2
335: Func(5,0): GetPackageByName
336: if false goto 339
return poss_pkg;
337: local #2
338: return
SleepMS(5);
339: 5L
340: Func(3,0): Sleepms
341: #
342: stepforeach @334
343: leave block(3)
return 0;
344: 0L
345: return
c:/ZH099/scripts/include/string.inc, Line 147
function Check_ValidChar( text, allow_space:=0 )
346: pop param 'allow_space'
347: pop param 'text'
var valid_char := array{ "a", "b", "c", "d", "e", "f", "g",
348: decl local #2
349: array
350: "a"
351: init{}
352: "b"
353: init{}
354: "c"
355: init{}
356: "d"
357: init{}
358: "e"
359: init{}
360: "f"
361: init{}
362: "g"
363: init{}
364: "h"
365: init{}
366: "i"
367: init{}
368: "j"
369: init{}
370: "k"
371: init{}
372: "l"
373: init{}
374: "m"
375: init{}
376: "n"
377: init{}
378: "o"
379: init{}
380: "p"
381: init{}
382: "q"
383: init{}
384: "r"
385: init{}
386: "s"
387: init{}
388: "t"
389: init{}
390: "u"
391: init{}
392: "v"
393: init{}
394: "w"
395: init{}
396: "x"
397: init{}
398: "y"
399: init{}
400: "z"
401: init{}
402: "A"
403: init{}
404: "B"
405: init{}
406: "C"
407: init{}
408: "D"
409: init{}
410: "E"
411: init{}
412: "F"
413: init{}
414: "G"
415: init{}
416: "H"
417: init{}
418: "I"
419: init{}
420: "P"
421: init{}
422: "O"
423: init{}
424: "N"
425: init{}
426: "M"
427: init{}
428: "L"
429: init{}
430: "K"
431: init{}
432: "J"
433: init{}
434: "Q"
435: init{}
436: "R"
437: init{}
438: "S"
439: init{}
440: "T"
441: init{}
442: "U"
443: init{}
444: "V"
445: init{}
446: "W"
447: init{}
448: "X"
449: init{}
450: "Y"
451: init{}
452: "Z"
453: init{}
454: "1"
455: init{}
456: "2"
457: init{}
458: "3"
459: init{}
460: "4"
461: init{}
462: "5"
463: init{}
464: "6"
465: init{}
466: "7"
467: init{}
468: "8"
469: init{}
470: "9"
471: init{}
472: "0"
473: init{}
474: :=
475: #
var len_text := Len( text );
476: decl local #3
477: local #1
478: Func(0,1): Len
479: :=
480: #
var i;
481: decl local #4
482: #
for( i:=1; i<=len_text; i+=1 )
483: local #4
484: 1L
485: :=
486: #
487: local #4
488: local #3
489: <=
490: if false goto 533
SleepMS(5);
491: 5L
492: Func(3,0): Sleepms
493: #
var letter := CStr( text[i] );
494: decl local #0
495: local #1
496: local #4
497: [] 1
498: Func(0,0): CStr
499: :=
500: #
if( letter in valid_char )
501: local #5
502: local #2
503: in
504: if false goto 508
continue;
505: leave block(1)
506: goto528
507: goto525
elseif( allow_space && ( text[i] == " " || CAsc( text[i] ) == 0 ))
508: local #0
509: local #1
510: local #4
511: [] 1
512: " "
513: ==
514: local #1
515: local #4
516: [] 1
517: Func(0,4): CAsc
518: 0L
519: ==
520: ||
521: &&
522: if false goto 525
continue;
523: leave block(1)
524: goto528
return 0;
525: 0L
526: return
527: leave block(1)
528: local #4
529: 1L
530: +=
531: #
532: goto487
return 1;
533: 1L
534: return
