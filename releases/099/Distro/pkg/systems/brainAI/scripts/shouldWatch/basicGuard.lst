C:\ZH099\pkg\systems\brainAI\scripts\shouldWatch\basicGuard.src, Line 19
program BrainCriticalScript( params )
const AREAS_NO_STEALING   := "No-Stealing";
0: get arg 'params'
var npc := params[1];
1: decl local #1
2: local #0
3: 1L
4: [] 1
5: :=
6: #
var mobile := params[2];
7: decl local #2
8: local #0
9: 2L
10: [] 1
11: :=
12: #
params := 0; // Not needed anymore
13: 0L
14: local0 := 
if( mobile.cmdlevel )
15: local #2
16: get member id 'cmdlevel' (46)
17: if false goto 21
return 0;
18: 0L
19: progend
20: goto53
elseif( mobile.criminal )
21: local #2
22: get member id 'criminal' (48)
23: if false goto 27
return 1;
24: 1L
25: progend
26: goto53
elseif( mobile.murderer )
27: local #2
28: get member id 'murderer' (57)
29: if false goto 33
return 1;
30: 1L
31: progend
32: goto53
elseif( mobile.IsA( POLCLASS_NPC ))
33: local #2
34: 4L
35: Call Method id isa (#0, 1 params)
36: if false goto 53
var cfg_info := NPC_GetNPCConfig( mobile.npctemplate );
37: decl local #0
38: local #2
39: get member id 'npctemplate' (62)
40: makelocal
41: jmp userfunc @57
42: :=
43: #
if( cfg_info.GuardIgnore )
44: local #3
45: get member 'GuardIgnore'
46: if false goto 50
return 0;
47: 0L
48: progend
49: goto52
return 1;
50: 1L
51: progend
52: leave block(1)
return 0;
53: 0L
54: progend
55: leave block(3)
56: progend
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
57: pop param 'template'
if( !template.package )
58: local #0
59: get member 'package'
60: if true goto 65
template := NPC_ParseTemplateName( template );
61: local #0
62: makelocal
63: jmp userfunc @114
64: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
65: decl local #1
66: ":"
67: local #0
68: get member 'package'
69: +
70: ":npcdesc"
71: +
72: Func(6,0): ReadConfigFile
73: :=
74: #
if( npc_cfg.errortext )
75: local #1
76: get member 'errortext'
77: if false goto 90
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
78: error
79: "Error::NPC_GetNPCConfig() - Could not open :"
80: local #0
81: get member 'package'
82: +
83: ":npcdesc ->"
84: +
85: local #1
86: get member 'errortext'
87: +
88: addmember-assign(errortext)
89: return
var cfg_elem := npc_cfg[template.template];
90: decl local #2
91: local #1
92: local #0
93: get member 'template'
94: [] 1
95: :=
96: #
if( cfg_elem.errortext )
97: local #2
98: get member 'errortext'
99: if false goto 112
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
100: error
101: "Error::NPC_GetNPCConfig() - Could not find elem ["
102: local #0
103: get member 'template'
104: +
105: "] ->"
106: +
107: local #2
108: get member 'errortext'
109: +
110: addmember-assign(errortext)
111: return
return cfg_elem;
112: local #2
113: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
114: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
115: local #0
116: 4L
117: Call Method id isa (#0, 1 params)
118: if false goto 122
template_name := template_name.npctemplate;
119: local #0
120: get member id 'npctemplate' (62)
121: local0 := 
var colon_a := Find( template_name, ":", 1 );
122: decl local #1
123: local #0
124: ":"
125: 1L
126: Func(0,3): Find
127: :=
128: #
var colon_b := Find( template_name, ":", 2 );
129: decl local #2
130: local #0
131: ":"
132: 2L
133: Func(0,3): Find
134: :=
135: #
var parsed := struct{"package", "template"};
136: decl local #3
137: struct
138: addmember(package)
139: addmember(template)
140: :=
141: #
if( !colon_a || !colon_b )
142: local #1
143: !
144: local #2
145: !
146: ||
147: if false goto 155
parsed.package := "";
148: local #3
149: ""
150: set member 'package' #
parsed.template := template_name;
151: local #3
152: local #0
153: set member 'template' #
154: goto174
parsed.package := template_name[colon_a+1, colon_b-2];
155: local #3
156: local #0
157: local #1
158: 1L
159: +
160: local #2
161: 2L
162: -
163: [,]
164: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
165: local #3
166: local #0
167: local #2
168: 1L
169: +
170: local #0
171: Func(0,4): Len
172: [,]
173: set member 'template' #
return parsed;
174: local #3
175: return
