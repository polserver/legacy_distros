c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @100
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 17
program BrainNerve( params )
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var event	:= params[3];
64: decl local #2
65: local #0
66: 3L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
while( npc )
72: local #1
73: if false goto 96
if( event )
74: local #2
75: if false goto 89
case( event.type )
76: local #2
77: get member 'type'
78: casejmp
	1024: @79
	default: @86
ItemGivenEvent( npc, event );
79: local #1
80: local #2
81: makelocal
82: jmp userfunc @144
83: #
break;
84: goto85
85: goto87
break;
86: goto87
event := 0;
87: 0L
88: local2 := 
SleepMS(5);
89: 5L
90: Func(3,2): Sleepms
91: #
event := Wait_For_Event(1);
92: 1L
93: Func(3,6): Wait_For_Event
94: local2 := 
95: goto72
return 1;
96: 1L
97: progend
98: leave block(3)
99: progend
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
100: pop param byref 'cfg_file'
101: pop param 'elem_name'
if( !cfg_file )
102: local #0
103: if true goto 107
cfg_file := Classes_GetSettingsCfgFile();
104: makelocal
105: jmp userfunc @128
106: local0 := 
var elem := cfg_file[elem_name];
107: decl local #2
108: local #0
109: local #1
110: [] 1
111: :=
112: #
if( elem.errortext )
113: local #2
114: get member 'errortext'
115: if false goto 126
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
116: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
117: local #1
118: +
119: "] ->"
120: +
121: local #2
122: get member 'errortext'
123: +
124: Func(3,0): SysLog
125: #
return elem;
126: local #2
127: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
128: decl local #0
129: ":classes:settings"
130: Func(4,0): ReadConfigFile
131: :=
132: #
if( cfg.errortext )
133: local #0
134: get member 'errortext'
135: if false goto 142
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
136: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
137: local #0
138: get member 'errortext'
139: +
140: Func(3,0): SysLog
141: #
return cfg;
142: local #0
143: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 43
function ItemGivenEvent( npc, byref event )
144: pop param byref 'event'
145: pop param 'npc'
var item := event.item;
146: decl local #2
147: local #0
148: get member 'item'
149: :=
150: #
var source := event.source;
151: decl local #3
152: local #0
153: get member 'source'
154: :=
155: #
ReleaseItem( item );
156: local #2
157: Func(2,10): ReleaseItem
158: #
if( source.hidden || source.IsA( POLCLASS_NPC ))
159: local #3
160: get member id 'hidden' (32)
161: local #3
162: 4L
163: Call Method id isa (#0, 1 params)
164: ||
165: if false goto 168
return 1;
166: 1L
167: return
AI_Turn( npc, event.source, NETURN_TOWARD );
168: local #1
169: local #0
170: get member 'source'
171: 1L
172: 0L
173: makelocal
174: jmp userfunc @606
175: #
if( item.objtype == 0xeed )
176: local #2
177: get member id 'objtype' (4)
178: 3821L
179: ==
180: if false goto 188
SendCommands( npc, source, item );
181: local #1
182: local #3
183: local #2
184: makelocal
185: jmp userfunc @227
186: #
187: goto225
AI_Speak( npc, "Thou art most kind of wanting to give away such a thing." );
188: local #1
189: "Thou art most kind of wanting to give away such a thing."
190: "default"
191: 0L
192: 0L
193: makelocal
194: jmp userfunc @562
195: #
MoveItemToContainer( item, source.backpack );
196: local #2
197: local #3
198: get member id 'backpack' (41)
199: -1L
200: -1L
201: Func(2,11): MoveItemToContainer
202: #
Sleep( 4 );
203: 4L
204: Func(3,7): Sleep
205: #
AI_Speak( npc, "But giving a money donation instead would be more appreciated."
206: local #1
207: "But giving a money donation instead would be more appreciated."
208: "default"
209: 0L
210: 0L
211: makelocal
212: jmp userfunc @562
213: #
Sleep( 3 );
214: 3L
215: Func(3,7): Sleep
216: #
AI_Speak( npc, "*smile*" );
217: local #1
218: "*smile*"
219: "default"
220: 0L
221: 0L
222: makelocal
223: jmp userfunc @562
224: #
return 1;
225: 1L
226: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 70
function SendCommands( npc, byref source, item )
227: pop param 'item'
228: pop param byref 'source'
229: pop param 'npc'
var demand := GetObjProperty( source, "#PriestDemand" );
230: decl local #3
231: local #1
232: "#PriestDemand"
233: Func(2,2): GetObjProperty
234: :=
235: #
if( !demand )
236: local #3
237: if true goto 287
if( GetObjProperty( source, "PriestUpset" ))
238: local #1
239: "PriestUpset"
240: Func(2,2): GetObjProperty
241: if false goto 274
if( item.amount >= AP_GetTrueStat( source, STRENGTH ) * 2 )
242: local #0
243: get member id 'amount' (13)
244: local #1
245: "Strength"
246: makelocal
247: jmp userfunc @644
248: 2L
249: *
250: >=
251: if false goto 265
AI_Speak( npc, "Thee be blessed for this generous donation." );
252: local #2
253: "Thee be blessed for this generous donation."
254: "default"
255: 0L
256: 0L
257: makelocal
258: jmp userfunc @562
259: #
EraseObjProperty( source, "PriestUpset" );
260: local #1
261: "PriestUpset"
262: Func(2,8): EraseObjProperty
263: #
264: goto273
AI_Speak( npc, "Dost thou think that he can be forgiven for such a pitiful amou
265: local #2
266: "Dost thou think that he can be forgiven for such a pitiful amount of gold?"
267: "default"
268: 0L
269: 0L
270: makelocal
271: jmp userfunc @562
272: #
273: goto282
AI_Speak( npc, "Thee be blessed for this generous donation." );
274: local #2
275: "Thee be blessed for this generous donation."
276: "default"
277: 0L
278: 0L
279: makelocal
280: jmp userfunc @562
281: #
DestroyItem( item );
282: local #0
283: Func(2,12): DestroyItem
284: #
return 1;
285: 1L
286: return
var item_effect := SystemFindObjectBySerial( CInt( demand[3] ));
287: decl local #4
288: local #3
289: 3L
290: [] 1
291: Func(0,2): CInt
292: 0L
293: Func(2,13): SystemFindObjectBySerial
294: :=
295: #
if( !item_effect )
296: local #4
297: if true goto 308
AI_Speak( npc, "I could not find what you are asking for help." );
298: local #2
299: "I could not find what you are asking for help."
300: "default"
301: 0L
302: 0L
303: makelocal
304: jmp userfunc @562
305: #
return 0;
306: 0L
307: return
EraseObjProperty( source, "#PriestDemand" );
308: local #1
309: "#PriestDemand"
310: Func(2,8): EraseObjProperty
311: #
var price := demand[2];
312: decl local #5
313: local #3
314: 2L
315: [] 1
316: :=
317: #
if( CInt( price ))
318: local #5
319: Func(0,2): CInt
320: if false goto 363
if( item.amount < price )
321: local #0
322: get member id 'amount' (13)
323: local #5
324: <
325: if false goto 363
AI_Speak( npc, "I was very generous by asking thee such a low price as "+price+
326: local #2
327: "I was very generous by asking thee such a low price as "
328: local #5
329: +
330: " gold pieces for that service."
331: +
332: "default"
333: 0L
334: 0L
335: makelocal
336: jmp userfunc @562
337: #
MoveItemToContainer( item, source.backpack );
338: local #0
339: local #1
340: get member id 'backpack' (41)
341: -1L
342: -1L
343: Func(2,11): MoveItemToContainer
344: #
Sleep( 3 );
345: 3L
346: Func(3,7): Sleep
347: #
AI_Speak( npc, "So I had expected thee to have the politeness to give me what I
348: local #2
349: "So I had expected thee to have the politeness to give me what I asked for!"
350: "default"
351: 0L
352: 0L
353: makelocal
354: jmp userfunc @562
355: #
SetObjProperty( source, "PriestUpset", 1 );
356: local #1
357: "PriestUpset"
358: 1L
359: Func(2,1): SetObjProperty
360: #
return 0;
361: 0L
362: return
case( demand[1] )
363: local #3
364: 1L
365: [] 1
366: casejmp
	"RemoveCurse": @367
	"DetectCurse": @377
	"Purify": @386
	"bless": @395
	"cure": @406
	"heal": @417
	"protection": @428
	"dispel": @439
	default: @449
RemoveCurse( npc, source, item_effect, item, price );
367: local #2
368: local #1
369: local #4
370: local #0
371: local #5
372: makelocal
373: jmp userfunc @947
374: #
break;
375: goto376
376: goto449
DetectCurse( npc, item_effect, item, price );
377: local #2
378: local #4
379: local #0
380: local #5
381: makelocal
382: jmp userfunc @653
383: #
break;
384: goto385
385: goto449
Purify( npc, item_effect, item, price );
386: local #2
387: local #4
388: local #0
389: local #5
390: makelocal
391: jmp userfunc @784
392: #
break;
393: goto394
394: goto449
DestroyItem( item );
395: local #0
396: Func(2,12): DestroyItem
397: #
SendSpell( npc, source, "bless" );
398: local #2
399: local #1
400: "bless"
401: makelocal
402: jmp userfunc @455
403: #
break;
404: goto405
405: goto449
DestroyItem( item );
406: local #0
407: Func(2,12): DestroyItem
408: #
SendSpell( npc, source, "cure" );
409: local #2
410: local #1
411: "cure"
412: makelocal
413: jmp userfunc @455
414: #
break;
415: goto416
416: goto449
DestroyItem( item );
417: local #0
418: Func(2,12): DestroyItem
419: #
SendSpell( npc, source, "heal" );
420: local #2
421: local #1
422: "heal"
423: makelocal
424: jmp userfunc @455
425: #
break;
426: goto427
427: goto449
DestroyItem( item );
428: local #0
429: Func(2,12): DestroyItem
430: #
SendSpell( npc, source, "protection" );
431: local #2
432: local #1
433: "protection"
434: makelocal
435: jmp userfunc @455
436: #
break;
437: goto438
438: goto449
DestroyItem( item );
439: local #0
440: Func(2,12): DestroyItem
441: #
SendSpell( npc, source, "dispel" );
442: local #2
443: local #1
444: "dispel"
445: makelocal
446: jmp userfunc @455
447: #
break;
448: goto449
EraseObjProperty( source, "#PriestDemand" );
449: local #1
450: "#PriestDemand"
451: Func(2,8): EraseObjProperty
452: #
return 1;
453: 1L
454: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 269
function SendSpell( npc, byref source, spell )
455: pop param 'spell'
456: pop param byref 'source'
457: pop param 'npc'
var spell_id;
458: decl local #3
459: #
case( spell )
460: local #0
461: casejmp
	"bless": @462
	"cure": @474
	"heal": @486
	"protection": @498
	"dispel": @510
	default: @521
spell_id := 17;
462: 17L
463: local3 := 
AI_Speak( npc, "I humbly call upon the Virtues to lay down thine blessing on th
464: local #2
465: "I humbly call upon the Virtues to lay down thine blessing on this person!"
466: "default"
467: 0L
468: 0L
469: makelocal
470: jmp userfunc @562
471: #
break;
472: goto473
473: goto521
spell_id := 11;
474: 11L
475: local3 := 
AI_Speak( npc, "Essence of Virtues, cure this corpse from all poison!" );
476: local #2
477: "Essence of Virtues, cure this corpse from all poison!"
478: "default"
479: 0L
480: 0L
481: makelocal
482: jmp userfunc @562
483: #
break;
484: goto485
485: goto521
spell_id := 29;
486: 29L
487: local3 := 
AI_Speak( npc, "Great Virtue of Compassion, bring down thine kindness upon that
488: local #2
489: "Great Virtue of Compassion, bring down thine kindness upon that soul by healing him!"
490: "default"
491: 0L
492: 0L
493: makelocal
494: jmp userfunc @562
495: #
break;
496: goto497
497: goto521
spell_id := 15;
498: 15L
499: local3 := 
AI_Speak( npc, "Valor and Courage, I'm calling upon you to harden this folk's s
500: local #2
501: "Valor and Courage, I'm calling upon you to harden this folk's skin!"
502: "default"
503: 0L
504: 0L
505: makelocal
506: jmp userfunc @562
507: #
break;
508: goto509
509: goto521
spell_id := 41;
510: 41L
511: local3 := 
AI_Speak( npc, "Virtue of Darkness, dispel this folk's skin!" );
512: local #2
513: "Virtue of Darkness, dispel this folk's skin!"
514: "default"
515: 0L
516: 0L
517: makelocal
518: jmp userfunc @562
519: #
break;
520: goto521
PerformAction( npc, 0x11 );
521: local #2
522: 17L
523: 5L
524: 1L
525: 0L
526: 0L
527: 1L
528: Func(2,14): PerformAction
529: #
Sleep( 2 );
530: 2L
531: Func(3,7): Sleep
532: #
var script := Start_Script( ":magery:spellStarter", array{npc, spell_id, 0, sou
533: decl local #4
534: ":magery:spellStarter"
535: array
536: local #2
537: init{}
538: local #3
539: init{}
540: 0L
541: init{}
542: local #1
543: init{}
544: Func(3,3): Start_Script
545: :=
546: #
if( script.errortext )
547: local #4
548: get member 'errortext'
549: if false goto 560
PrintTextAbove( npc, script.errortext );
550: local #2
551: local #4
552: get member 'errortext'
553: 3L
554: 1000L
555: 0L
556: Func(2,0): PrintTextAbove
557: #
return 0;
558: 0L
559: return
return 1;
560: 1L
561: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
562: pop param 'no_wake'
563: pop param 'do_event'
564: pop param 'text_type'
565: pop param 'text'
566: pop param 'npc'
var ev		:= struct;
567: decl local #5
568: struct
569: :=
570: #
ev.+type	:= NPCEVENT_SPEAK;
571: local #5
572: "type"
573: .+
574: 10485765L
575: := #
ev.+text	:= text;
576: local #5
577: "text"
578: .+
579: local #3
580: := #
ev.+texttype	:= text_type;
581: local #5
582: "texttype"
583: .+
584: local #2
585: := #
ev.+doevent	:= do_event;
586: local #5
587: "doevent"
588: .+
589: local #1
590: := #
ev.+WakeUp	:= no_wake;
591: local #5
592: "WakeUp"
593: .+
594: local #0
595: := #
ev.+process	:= GetProcess( GetPid() );
596: local #5
597: "process"
598: .+
599: Func(3,4): GetPid
600: Func(3,1): GetProcess
601: := #
return SendEvent( npc, ev );
602: local #4
603: local #5
604: Func(2,3): SendEvent
605: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
606: pop param 'no_wake'
607: pop param 'direction'
608: pop param 'object'
609: pop param 'npc'
var ev		:= struct;
610: decl local #4
611: struct
612: :=
613: #
ev.+type	:= NPCEVENT_TURN;
614: local #4
615: "type"
616: .+
617: 10485766L
618: := #
ev.+source	:= object;
619: local #4
620: "source"
621: .+
622: local #2
623: := #
ev.+direction	:= direction;
624: local #4
625: "direction"
626: .+
627: local #1
628: := #
ev.+WakeUp	:= no_wake;
629: local #4
630: "WakeUp"
631: .+
632: local #0
633: := #
ev.+process	:= GetProcess( GetPid() );
634: local #4
635: "process"
636: .+
637: Func(3,4): GetPid
638: Func(3,1): GetProcess
639: := #
return SendEvent( npc, ev );
640: local #3
641: local #4
642: Func(2,3): SendEvent
643: return
c:/ZH099/pkg/systems/attributes/include/stats.inc, Line 13
function AP_GetTrueStat( who, stat_name )
644: pop param 'stat_name'
645: pop param 'who'
return CDbl( GetAttributeBaseValue( who, stat_name )) / 10.0;
646: local #1
647: local #0
648: Func(6,0): GetAttributeBaseValue
649: Func(0,3): CDbl
650: 10LF
651: /
652: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 182
function DetectCurse( npc, byref item_effect, byref item, price )
653: pop param 'price'
654: pop param byref 'item'
655: pop param byref 'item_effect'
656: pop param 'npc'
var chance := 90,
657: decl local #4
658: 90L
659: :=
660: #
661: decl local #5
662: #
if( item.amount > price )
663: local #1
664: get member id 'amount' (13)
665: local #0
666: >
667: if false goto 680
chance_mod := CInt(( item.amount - price ) / 2 );
668: local #1
669: get member id 'amount' (13)
670: local #0
671: -
672: 2L
673: /
674: Func(0,2): CInt
675: local5 := 
chance += chance_mod;
676: local #4
677: local #5
678: +=
679: #
DestroyItem( item );
680: local #1
681: Func(2,12): DestroyItem
682: #
item.movable := 0;
683: local #1
684: 0L
685: set member id 'movable' (20) #
AI_Speak( npc, "Powers of the Virtues, I'm calling upon you to show us if that 
686: local #3
687: "Powers of the Virtues, I'm calling upon you to show us if that item is under malefic influences!"
688: "default"
689: 0L
690: 0L
691: makelocal
692: jmp userfunc @562
693: #
PerformAction( npc, 0x11 );
694: local #3
695: 17L
696: 5L
697: 1L
698: 0L
699: 0L
700: 1L
701: Func(2,14): PerformAction
702: #
Sleep( 6 );
703: 6L
704: Func(3,7): Sleep
705: #
item.movable := 1;
706: local #1
707: 1L
708: set member id 'movable' (20) #
if( RandomInt( 100 ) <= chance )
709: 100L
710: Func(7,2): RandomInt
711: local #4
712: <=
713: if false goto 753
if( GetObjProperty( item_effect, "Cursed" ) == 1 )
714: local #2
715: "Cursed"
716: Func(2,2): GetObjProperty
717: 1L
718: ==
719: if false goto 744
PlaySoundEffect( npc, 0x01eb );
720: local #3
721: 491L
722: Func(2,15): PlaySoundEffect
723: #
PlayObjectCenteredEffect( npc, 0x373a, 10,10 );
724: local #3
725: 14138L
726: 10L
727: 10L
728: Func(2,16): PlayObjectCenteredEffect
729: #
AI_Speak( npc, "Ah ah! That item is cursed and it revealed itself to be a "+ite
730: local #3
731: "Ah ah! That item is cursed and it revealed itself to be a "
732: local #2
733: get member id 'desc' (19)
734: +
735: "."
736: +
737: "default"
738: 0L
739: 0L
740: makelocal
741: jmp userfunc @562
742: #
743: goto752
AI_Speak( npc, "I don't sense presence of any curses in that item." );
744: local #3
745: "I don't sense presence of any curses in that item."
746: "default"
747: 0L
748: 0L
749: makelocal
750: jmp userfunc @562
751: #
752: goto782
PlaySoundEffect( npc, 0x005b );
753: local #3
754: 91L
755: Func(2,15): PlaySoundEffect
756: #
PlayObjectCenteredEffect( npc, 0x3735, 7, 7 );
757: local #3
758: 14133L
759: 7L
760: 7L
761: Func(2,16): PlayObjectCenteredEffect
762: #
AI_Speak( npc, "I failed to see if that item is cursed!" );
763: local #3
764: "I failed to see if that item is cursed!"
765: "default"
766: 0L
767: 0L
768: makelocal
769: jmp userfunc @562
770: #
Sleep( 2 );
771: 2L
772: Func(3,7): Sleep
773: #
AI_Speak( npc, "Maybe a greater donation will be worth!" );
774: local #3
775: "Maybe a greater donation will be worth!"
776: "default"
777: 0L
778: 0L
779: makelocal
780: jmp userfunc @562
781: #
return 1;
782: 1L
783: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 224
function Purify( npc, byref item_effect, byref item, price )
784: pop param 'price'
785: pop param byref 'item'
786: pop param byref 'item_effect'
787: pop param 'npc'
var chance := 50,
788: decl local #4
789: 50L
790: :=
791: #
792: decl local #5
793: #
if( item.amount > price )
794: local #1
795: get member id 'amount' (13)
796: local #0
797: >
798: if false goto 811
chance_mod := CInt(( item.amount - price ) / 100 );
799: local #1
800: get member id 'amount' (13)
801: local #0
802: -
803: 100L
804: /
805: Func(0,2): CInt
806: local5 := 
chance += chance_mod;
807: local #4
808: local #5
809: +=
810: #
DestroyItem( item );
811: local #1
812: Func(2,12): DestroyItem
813: #
item.movable := 0;
814: local #1
815: 0L
816: set member id 'movable' (20) #
AI_Speak( npc, "Great Essence of the Virtues, I'm calling upon you to purify th
817: local #3
818: "Great Essence of the Virtues, I'm calling upon you to purify this item from all curses!"
819: "default"
820: 0L
821: 0L
822: makelocal
823: jmp userfunc @562
824: #
PerformAction( npc, 0x11 );
825: local #3
826: 17L
827: 5L
828: 1L
829: 0L
830: 0L
831: 1L
832: Func(2,14): PerformAction
833: #
Sleep( 2 );
834: 2L
835: Func(3,7): Sleep
836: #
PerformAction( npc, 0x11 );
837: local #3
838: 17L
839: 5L
840: 1L
841: 0L
842: 0L
843: 1L
844: Func(2,14): PerformAction
845: #
Sleep( 2 );
846: 2L
847: Func(3,7): Sleep
848: #
PerformAction( npc, 0x11 );
849: local #3
850: 17L
851: 5L
852: 1L
853: 0L
854: 0L
855: 1L
856: Func(2,14): PerformAction
857: #
Sleep( 2 );
858: 2L
859: Func(3,7): Sleep
860: #
PerformAction( npc, 0x11 );
861: local #3
862: 17L
863: 5L
864: 1L
865: 0L
866: 0L
867: 1L
868: Func(2,14): PerformAction
869: #
Sleep( 2 );
870: 2L
871: Func(3,7): Sleep
872: #
PerformAction( npc, 0x11 );
873: local #3
874: 17L
875: 5L
876: 1L
877: 0L
878: 0L
879: 1L
880: Func(2,14): PerformAction
881: #
Sleep( 10 );
882: 10L
883: Func(3,7): Sleep
884: #
item.movable := 1;
885: local #1
886: 1L
887: set member id 'movable' (20) #
if( RandomInt( 100 ) <= chance )
888: 100L
889: Func(7,2): RandomInt
890: local #4
891: <=
892: if false goto 916
PlaySoundEffect( npc, 0x01eb );
893: local #3
894: 491L
895: Func(2,15): PlaySoundEffect
896: #
PlayObjectCenteredEffect( npc, 0x373a, 10,10 );
897: local #3
898: 14138L
899: 10L
900: 10L
901: Func(2,16): PlayObjectCenteredEffect
902: #
BanishCurse( item_effect );
903: local #2
904: makelocal
905: jmp userfunc @1069
906: #
AI_Speak( npc, "I made it!!! That item is now completely free from all curses!"
907: local #3
908: "I made it!!! That item is now completely free from all curses!"
909: "default"
910: 0L
911: 0L
912: makelocal
913: jmp userfunc @562
914: #
915: goto945
PlaySoundEffect( npc, 0x005b );
916: local #3
917: 91L
918: Func(2,15): PlaySoundEffect
919: #
PlayObjectCenteredEffect( npc, 0x3735, 7, 7 );
920: local #3
921: 14133L
922: 7L
923: 7L
924: Func(2,16): PlayObjectCenteredEffect
925: #
AI_Speak( npc, "That curse is too strong, I failed to obliterate it!" );
926: local #3
927: "That curse is too strong, I failed to obliterate it!"
928: "default"
929: 0L
930: 0L
931: makelocal
932: jmp userfunc @562
933: #
Sleep( 2 );
934: 2L
935: Func(3,7): Sleep
936: #
AI_Speak( npc, "Maybe a greater donation will be worth!" );
937: local #3
938: "Maybe a greater donation will be worth!"
939: "default"
940: 0L
941: 0L
942: makelocal
943: jmp userfunc @562
944: #
return 1;
945: 1L
946: return
C:\ZH099\pkg\systems\brainAI\scripts\itemGiven\highPriest.src, Line 145
function RemoveCurse( npc, byref source, byref item_effect, byref item, price )
947: pop param 'price'
948: pop param byref 'item'
949: pop param byref 'item_effect'
950: pop param byref 'source'
951: pop param 'npc'
var chance := 75,
952: decl local #5
953: 75L
954: :=
955: #
956: decl local #6
957: #
if( item.amount > price )
958: local #1
959: get member id 'amount' (13)
960: local #0
961: >
962: if false goto 975
chance_mod := CInt(( item.amount - price ) / 10 );
963: local #1
964: get member id 'amount' (13)
965: local #0
966: -
967: 10L
968: /
969: Func(0,2): CInt
970: local6 := 
chance += chance_mod;
971: local #5
972: local #6
973: +=
974: #
DestroyItem( item );
975: local #1
976: Func(2,12): DestroyItem
977: #
item.movable := 0;
978: local #1
979: 0L
980: set member id 'movable' (20) #
AI_Speak( npc, "Powers of the Virtues, I'm calling upon you to remove the curse
981: local #4
982: "Powers of the Virtues, I'm calling upon you to remove the curse from that item!"
983: "default"
984: 0L
985: 0L
986: makelocal
987: jmp userfunc @562
988: #
PerformAction( npc, 0x11 );
989: local #4
990: 17L
991: 5L
992: 1L
993: 0L
994: 0L
995: 1L
996: Func(2,14): PerformAction
997: #
Sleep( 6 );
998: 6L
999: Func(3,7): Sleep
1000: #
item.movable := 1;
1001: local #1
1002: 1L
1003: set member id 'movable' (20) #
if( RandomInt( 100 ) <= chance )
1004: 100L
1005: Func(7,2): RandomInt
1006: local #5
1007: <=
1008: if false goto 1038
PlaySoundEffect( source, 0x01eb );
1009: local #3
1010: 491L
1011: Func(2,15): PlaySoundEffect
1012: #
PlayObjectCenteredEffect( source, 0x373a, 10,10 );
1013: local #3
1014: 14138L
1015: 10L
1016: 10L
1017: Func(2,16): PlayObjectCenteredEffect
1018: #
SetObjProperty( item_effect, "Cursed", 3 );
1019: local #2
1020: "Cursed"
1021: 3L
1022: Func(2,1): SetObjProperty
1023: #
AI_Speak( npc, "From now on thee can unequip this "+item_effect.desc+" as any n
1024: local #4
1025: "From now on thee can unequip this "
1026: local #2
1027: get member id 'desc' (19)
1028: +
1029: " as any normal item."
1030: +
1031: "default"
1032: 0L
1033: 0L
1034: makelocal
1035: jmp userfunc @562
1036: #
1037: goto1067
PlaySoundEffect( npc, 0x005b );
1038: local #4
1039: 91L
1040: Func(2,15): PlaySoundEffect
1041: #
PlayObjectCenteredEffect( npc, 0x3735, 7, 7 );
1042: local #4
1043: 14133L
1044: 7L
1045: 7L
1046: Func(2,16): PlayObjectCenteredEffect
1047: #
AI_Speak( npc, "I failed in removing that curse!" );
1048: local #4
1049: "I failed in removing that curse!"
1050: "default"
1051: 0L
1052: 0L
1053: makelocal
1054: jmp userfunc @562
1055: #
Sleep( 2 );
1056: 2L
1057: Func(3,7): Sleep
1058: #
AI_Speak( npc, "Maybe a greater donation will be worth!" );
1059: local #4
1060: "Maybe a greater donation will be worth!"
1061: "default"
1062: 0L
1063: 0L
1064: makelocal
1065: jmp userfunc @562
1066: #
return 1;
1067: 1L
1068: return
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 30
function BanishCurse( item )
1069: pop param 'item'
EraseObjProperty( item, "Cursed" );
1070: local #0
1071: "Cursed"
1072: Func(2,8): EraseObjProperty
1073: #
NameByEnchant( item );
1074: local #0
1075: makelocal
1076: jmp userfunc @1080
1077: #
return 1;
1078: 1L
1079: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 21
function NameByEnchant( item )
1080: pop param 'item'
EraseObjProperty( item, "UnIDedMagicalItem" );
1081: local #0
1082: "UnIDedMagicalItem"
1083: Func(2,8): EraseObjProperty
1084: #
var base_name := GetObjProperty( item, "BaseName" );
1085: decl local #1
1086: local #0
1087: "BaseName"
1088: Func(2,2): GetObjProperty
1089: :=
1090: #
if( !base_name )
1091: local #1
1092: if true goto 1112
var item_cfg := ReadConfigFile( ":*:itemdesc" ),
1093: decl local #0
1094: ":*:itemdesc"
1095: Func(4,0): ReadConfigFile
1096: :=
1097: #
1098: decl local #1
1099: local #2
1100: local #0
1101: get member id 'objtype' (4)
1102: [] 1
1103: get member id 'desc' (19)
1104: :=
1105: #
SetName( item, item_name );
1106: local #0
1107: local #3
1108: Func(2,9): SetName
1109: #
1110: leave block(2)
1111: goto1116
SetName( item, base_name );
1112: local #0
1113: local #1
1114: Func(2,9): SetName
1115: #
var enchanted_name := GetObjProperty( item, "Enchanted" );;
1116: decl local #2
1117: local #0
1118: "Enchanted"
1119: Func(2,2): GetObjProperty
1120: :=
1121: #
if( enchanted_name )
1122: local #2
1123: if false goto 1133
SetName( item, enchanted_name+" "+item.desc );
1124: local #0
1125: local #2
1126: " "
1127: +
1128: local #0
1129: get member id 'desc' (19)
1130: +
1131: Func(2,9): SetName
1132: #
var enchanted_color := GetObjProperty( item, "EnchantColor" );
1133: decl local #3
1134: local #0
1135: "EnchantColor"
1136: Func(2,2): GetObjProperty
1137: :=
1138: #
if( enchanted_color )
1139: local #3
1140: if false goto 1148
item.color := enchanted_color;
1141: local #0
1142: local #3
1143: set member id 'color' (7) #
EraseObjProperty( item, "EnchantColor" );
1144: local #0
1145: "EnchantColor"
1146: Func(2,8): EraseObjProperty
1147: #
var isGMItem := GetObjProperty( item, "IsGMItem" );
1148: decl local #4
1149: local #0
1150: "IsGMItem"
1151: Func(2,2): GetObjProperty
1152: :=
1153: #
if( isGMItem )
1154: local #4
1155: if false goto 1162
SetName( item, isGMItem );
1156: local #0
1157: local #4
1158: Func(2,9): SetName
1159: #
return 1;
1160: 1L
1161: return
var hitScript := GetObjProperty( item, "HitScriptNumber" );
1162: decl local #5
1163: local #0
1164: "HitScriptNumber"
1165: Func(2,2): GetObjProperty
1166: :=
1167: #
if( hitScript )
1168: local #5
1169: if false goto 1175
RenameByHitscript( item, hitScript );
1170: local #0
1171: local #5
1172: makelocal
1173: jmp userfunc @1385
1174: #
var onHitScript := GetObjProperty( item, "OnHitScriptNumber" );
1175: decl local #6
1176: local #0
1177: "OnHitScriptNumber"
1178: Func(2,2): GetObjProperty
1179: :=
1180: #
if( onHitScript )
1181: local #6
1182: if false goto 1188
RenameByOnHitscript( item, onHitScript );
1183: local #0
1184: local #6
1185: makelocal
1186: jmp userfunc @1510
1187: #
var dmg_mode := item.dmg_mod;
1188: decl local #7
1189: local #0
1190: get member id 'dmg_mod' (91)
1191: :=
1192: #
if( dmg_mode )
1193: local #7
1194: if false goto 1201
RenameByMod( item, "Damage", dmg_mode );
1195: local #0
1196: "Damage"
1197: local #7
1198: makelocal
1199: jmp userfunc @1471
1200: #
var ar_mode := item.ar_mod;
1201: decl local #8
1202: local #0
1203: get member id 'ar_mod' (31)
1204: :=
1205: #
if( ar_mode )
1206: local #8
1207: if false goto 1214
RenameByMod( item, "Ar", ar_mode );
1208: local #0
1209: "Ar"
1210: local #8
1211: makelocal
1212: jmp userfunc @1471
1213: #
var ar_bonus := GetObjProperty( item, "ArBonus" );
1214: decl local #9
1215: local #0
1216: "ArBonus"
1217: Func(2,2): GetObjProperty
1218: :=
1219: #
if( ar_bonus )
1220: local #9
1221: if false goto 1231
RenameByMod( item, "ArBonus", CInt( ar_bonus * 5 ));
1222: local #0
1223: "ArBonus"
1224: local #9
1225: 5L
1226: *
1227: Func(0,2): CInt
1228: makelocal
1229: jmp userfunc @1471
1230: #
var hp_mode := item.maxhp_mod;
1231: decl local #10
1232: local #0
1233: get member id 'maxhp_mod' (89)
1234: :=
1235: #
if( hp_mode )
1236: local #10
1237: if false goto 1247
RenameByMod( item, "MaxHP", CInt( hp_mode / 2 ));
1238: local #0
1239: "MaxHP"
1240: local #10
1241: 2L
1242: /
1243: Func(0,2): CInt
1244: makelocal
1245: jmp userfunc @1471
1246: #
var skill_mod := GetEquipmentModifiers( item );
1247: decl local #11
1248: local #0
1249: 4L
1250: makelocal
1251: jmp userfunc @1852
1252: :=
1253: #
if( skill_mod.Size() )
1254: local #11
1255: Call Method id size (#48, 0 params)
1256: if false goto 1278
var skill_keys := skill_mod.Keys();
1257: decl local #0
1258: local #11
1259: Call Method id keys (#56, 0 params)
1260: :=
1261: #
foreach modifier in skill_keys
1262: local #12
1263: initforeach @1275
RenameByAttriMod( item, modifier, skill_mod[modifier] );
1264: local #0
1265: local #13
1266: local #11
1267: local #13
1268: [] 1
1269: makelocal
1270: jmp userfunc @1345
1271: #
SleepMS(5);
1272: 5L
1273: Func(3,2): Sleepms
1274: #
1275: stepforeach @1264
1276: leave block(3)
1277: leave block(1)
foreach protection in immunities
1278: global #2
1279: initforeach @1298
var mobile_prot := GetObjProperty( item, protection );
1280: decl local #0
1281: local #0
1282: local #12
1283: Func(2,2): GetObjProperty
1284: :=
1285: #
if( mobile_prot )
1286: local #15
1287: if false goto 1294
RenameByImmunity( item, protection, mobile_prot );
1288: local #0
1289: local #12
1290: local #15
1291: makelocal
1292: jmp userfunc @1446
1293: #
SleepMS(5);
1294: 5L
1295: Func(3,2): Sleepms
1296: #
1297: leave block(1)
1298: stepforeach @1280
1299: leave block(3)
foreach prot in wardings
1300: global #3
1301: initforeach @1319
var charges := GetObjProperty( item, prot );
1302: decl local #0
1303: local #0
1304: local #12
1305: Func(2,2): GetObjProperty
1306: :=
1307: #
if( charges )
1308: local #15
1309: if false goto 1315
RenameByWardings( item, prot );
1310: local #0
1311: local #12
1312: makelocal
1313: jmp userfunc @1571
1314: #
SleepMS(5);
1315: 5L
1316: Func(3,2): Sleepms
1317: #
1318: leave block(1)
1319: stepforeach @1302
1320: leave block(3)
foreach mod in regenerations
1321: global #4
1322: initforeach @1341
var mobile_mod := GetObjProperty( item, mod );
1323: decl local #0
1324: local #0
1325: local #12
1326: Func(2,2): GetObjProperty
1327: :=
1328: #
if( mobile_mod )
1329: local #15
1330: if false goto 1337
RenameByImmunity( item, mod, mobile_mod );
1331: local #0
1332: local #12
1333: local #15
1334: makelocal
1335: jmp userfunc @1446
1336: #
SleepMS(5);
1337: 5L
1338: Func(3,2): Sleepms
1339: #
1340: leave block(1)
1341: stepforeach @1323
1342: leave block(3)
return 1;
1343: 1L
1344: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 175
function RenameByAttriMod( item, attribute, value )
1345: pop param 'value'
1346: pop param 'attribute'
1347: pop param 'item'
if( !value )
1348: local #0
1349: if true goto 1352
return 0;
1350: 0L
1351: return
if( attribute in AP_ListAttributesByType( "Stat" ))
1352: local #1
1353: "Stat"
1354: makelocal
1355: jmp userfunc @1778
1356: in
1357: if false goto 1363
value := CInt( value / 5 );
1358: local #0
1359: 5L
1360: /
1361: Func(0,2): CInt
1362: local0 := 
var mod_elem := GetEnchantmentElem( item, attribute );
1363: decl local #3
1364: local #2
1365: local #1
1366: makelocal
1367: jmp userfunc @1803
1368: :=
1369: #
var name := CStr ( "Name"+value );
1370: decl local #4
1371: "Name"
1372: local #0
1373: +
1374: Func(0,5): CStr
1375: :=
1376: #
SetAdjective( item, mod_elem, name );
1377: local #2
1378: local #3
1379: local #4
1380: makelocal
1381: jmp userfunc @1588
1382: #
return 1;
1383: 1L
1384: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 118
function RenameByHitscript( item, hitScript )
1385: pop param 'hitScript'
1386: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_hit" );
1387: decl local #2
1388: ":loot:effects_hit"
1389: Func(4,0): ReadConfigFile
1390: :=
1391: #
if( enchantment_cfg.errortext )
1392: local #2
1393: get member 'errortext'
1394: if false goto 1407
PrintTextAbove( item, "Error reading config <:loot:effects_hit> -->"+enchantmen
1395: local #1
1396: "Error reading config <:loot:effects_hit> -->"
1397: local #2
1398: get member 'errortext'
1399: +
1400: 3L
1401: 1000L
1402: 0L
1403: Func(2,0): PrintTextAbove
1404: #
return 0;
1405: 0L
1406: return
var chant_elem := FindConfigElem( enchantment_cfg, hitScript );
1407: decl local #3
1408: local #2
1409: local #0
1410: Func(4,5): FindConfigElem
1411: :=
1412: #
if( chant_elem.errortext )
1413: local #3
1414: get member 'errortext'
1415: if false goto 1432
PrintTextAbove( item, "Error reading chant_elem <"+hitScript+"> -->"+chant_elem
1416: local #1
1417: "Error reading chant_elem <"
1418: local #0
1419: +
1420: "> -->"
1421: +
1422: local #3
1423: get member 'errortext'
1424: +
1425: 3L
1426: 1000L
1427: 0L
1428: Func(2,0): PrintTextAbove
1429: #
return 0;
1430: 0L
1431: return
SetAdjective( item, chant_elem, "Name" );
1432: local #1
1433: local #3
1434: "Name"
1435: makelocal
1436: jmp userfunc @1588
1437: #
SetObjProperty( item, "HitScript", chant_elem.HitScript );
1438: local #1
1439: "HitScript"
1440: local #3
1441: get member id 'hitscript' (94)
1442: Func(2,1): SetObjProperty
1443: #
return 1;
1444: 1L
1445: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 210
function RenameByImmunity( item, immunity, power )
1446: pop param 'power'
1447: pop param 'immunity'
1448: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1449: decl local #3
1450: local #2
1451: local #1
1452: makelocal
1453: jmp userfunc @1803
1454: :=
1455: #
var name := CStr( "Name"+power );
1456: decl local #4
1457: "Name"
1458: local #0
1459: +
1460: Func(0,5): CStr
1461: :=
1462: #
SetAdjective( item, immunity_elem, name );
1463: local #2
1464: local #3
1465: local #4
1466: makelocal
1467: jmp userfunc @1588
1468: #
return 1;
1469: 1L
1470: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 193
function RenameByMod( item, mod, value )
1471: pop param 'value'
1472: pop param 'mod'
1473: pop param 'item'
if( !value )
1474: local #0
1475: if true goto 1478
return 0;
1476: 0L
1477: return
var mod_elem := GetEnchantmentElem( item, mod );
1478: decl local #3
1479: local #2
1480: local #1
1481: makelocal
1482: jmp userfunc @1803
1483: :=
1484: #
var temp := CInt( value / 5 );
1485: decl local #4
1486: local #0
1487: 5L
1488: /
1489: Func(0,2): CInt
1490: :=
1491: #
if( temp )
1492: local #4
1493: if false goto 1508
var name := CStr( "Name"+temp );
1494: decl local #0
1495: "Name"
1496: local #4
1497: +
1498: Func(0,5): CStr
1499: :=
1500: #
SetAdjective( item, mod_elem, name );
1501: local #2
1502: local #3
1503: local #5
1504: makelocal
1505: jmp userfunc @1588
1506: #
1507: leave block(1)
return 1;
1508: 1L
1509: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 138
function RenameByOnHitscript( item, onHitScript )
1510: pop param 'onHitScript'
1511: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_onhit" );
1512: decl local #2
1513: ":loot:effects_onhit"
1514: Func(4,0): ReadConfigFile
1515: :=
1516: #
if( enchantment_cfg.errortext )
1517: local #2
1518: get member 'errortext'
1519: if false goto 1532
PrintTextAbove( item, "Error reading config <:loot:effects_onhit> -->"+enchantm
1520: local #1
1521: "Error reading config <:loot:effects_onhit> -->"
1522: local #2
1523: get member 'errortext'
1524: +
1525: 3L
1526: 1000L
1527: 0L
1528: Func(2,0): PrintTextAbove
1529: #
return 0;
1530: 0L
1531: return
var chant_elem := FindConfigElem( enchantment_cfg, onHitScript );
1532: decl local #3
1533: local #2
1534: local #0
1535: Func(4,5): FindConfigElem
1536: :=
1537: #
if( chant_elem.errortext )
1538: local #3
1539: get member 'errortext'
1540: if false goto 1557
PrintTextAbove( item, "Error reading chant_elem <"+onHitScript+"> -->"+chant_el
1541: local #1
1542: "Error reading chant_elem <"
1543: local #0
1544: +
1545: "> -->"
1546: +
1547: local #3
1548: get member 'errortext'
1549: +
1550: 3L
1551: 1000L
1552: 0L
1553: Func(2,0): PrintTextAbove
1554: #
return 0;
1555: 0L
1556: return
SetAdjective( item, chant_elem, "Name" );
1557: local #1
1558: local #3
1559: "Name"
1560: makelocal
1561: jmp userfunc @1588
1562: #
SetObjProperty( item, "OnHitScript", chant_elem.OnHitScript );
1563: local #1
1564: "OnHitScript"
1565: local #3
1566: get member id 'onhitscript' (96)
1567: Func(2,1): SetObjProperty
1568: #
return 1;
1569: 1L
1570: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 220
function RenameByWardings( item, immunity )
1571: pop param 'immunity'
1572: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1573: decl local #2
1574: local #1
1575: local #0
1576: makelocal
1577: jmp userfunc @1803
1578: :=
1579: #
SetAdjective( item, immunity_elem, "Name" );
1580: local #1
1581: local #2
1582: "Name"
1583: makelocal
1584: jmp userfunc @1588
1585: #
return 1;
1586: 1L
1587: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 229
function SetAdjective( item, elem, value )
1588: pop param 'value'
1589: pop param 'elem'
1590: pop param 'item'
var colorkey := "Color";
1591: decl local #3
1592: "Color"
1593: :=
1594: #
if( GetObjProperty( item, "Cursed" ))
1595: local #2
1596: "Cursed"
1597: Func(2,2): GetObjProperty
1598: if false goto 1607
value := "C"+value;
1599: "C"
1600: local #0
1601: +
1602: local0 := 
colorkey := "C"+colorkey;
1603: "C"
1604: local #3
1605: +
1606: local3 := 
var position := GetConfigString( elem, "Place" );
1607: decl local #4
1608: local #1
1609: "Place"
1610: Func(4,6): GetConfigString
1611: :=
1612: #
if( position.errortext )
1613: local #4
1614: get member 'errortext'
1615: if false goto 1628
PrintTextAbove( item, "Error reading position <Place> -->"+position.errortext )
1616: local #2
1617: "Error reading position <Place> -->"
1618: local #4
1619: get member 'errortext'
1620: +
1621: 3L
1622: 1000L
1623: 0L
1624: Func(2,0): PrintTextAbove
1625: #
return 0;
1626: 0L
1627: return
var adjective := GetConfigString( elem, value );
1628: decl local #5
1629: local #1
1630: local #0
1631: Func(4,6): GetConfigString
1632: :=
1633: #
if( adjective.errortext )
1634: local #5
1635: get member 'errortext'
1636: if false goto 1653
PrintTextAbove( item, "Error reading adjective <"+value+"> -->"+adjective.error
1637: local #2
1638: "Error reading adjective <"
1639: local #0
1640: +
1641: "> -->"
1642: +
1643: local #5
1644: get member 'errortext'
1645: +
1646: 3L
1647: 1000L
1648: 0L
1649: Func(2,0): PrintTextAbove
1650: #
return 0;
1651: 0L
1652: return
if( position == "Prefix" )
1653: local #4
1654: "Prefix"
1655: ==
1656: if false goto 1670
SetName( item, Lower( adjective+" "+TruncateArticle( item.desc )));
1657: local #2
1658: local #5
1659: " "
1660: +
1661: local #2
1662: get member id 'desc' (19)
1663: makelocal
1664: jmp userfunc @1707
1665: +
1666: Func(0,0): Lower
1667: Func(2,9): SetName
1668: #
1669: goto1682
SetName( item, Lower( TruncateArticle( item.desc )+" "+adjective ));
1670: local #2
1671: local #2
1672: get member id 'desc' (19)
1673: makelocal
1674: jmp userfunc @1707
1675: " "
1676: +
1677: local #5
1678: +
1679: Func(0,0): Lower
1680: Func(2,9): SetName
1681: #
SetName( item, AddArticle( item.desc ));
1682: local #2
1683: local #2
1684: get member id 'desc' (19)
1685: makelocal
1686: jmp userfunc @1745
1687: Func(2,9): SetName
1688: #
var color_elem := GetConfigString( elem, colorkey );
1689: decl local #6
1690: local #1
1691: local #3
1692: Func(4,6): GetConfigString
1693: :=
1694: #
var color_item := CInt( color_elem );
1695: decl local #7
1696: local #6
1697: Func(0,2): CInt
1698: :=
1699: #
if( color_item )
1700: local #7
1701: if false goto 1705
item.color := color_item;
1702: local #2
1703: local #7
1704: set member id 'color' (7) #
return 1;
1705: 1L
1706: return
c:/ZH099/scripts/include/string.inc, Line 22
function TruncateArticle( text )
1707: pop param 'text'
text := CStr(text);
1708: local #0
1709: Func(0,5): CStr
1710: local0 := 
var i := Len(text);
1711: decl local #1
1712: local #0
1713: Func(0,4): Len
1714: :=
1715: #
if ( Lower(text[1, 2]) == "a " )
1716: local #0
1717: 1L
1718: 2L
1719: [,]
1720: Func(0,0): Lower
1721: "a "
1722: ==
1723: if false goto 1730
text := text[3, i];
1724: local #0
1725: 3L
1726: local #1
1727: [,]
1728: local0 := 
1729: goto1743
elseif ( Lower(text[1, 3]) == "an " )
1730: local #0
1731: 1L
1732: 3L
1733: [,]
1734: Func(0,0): Lower
1735: "an "
1736: ==
1737: if false goto 1743
text := text[4, i];
1738: local #0
1739: 4L
1740: local #1
1741: [,]
1742: local0 := 
return text;
1743: local #0
1744: return
c:/ZH099/scripts/include/string.inc, Line 35
function AddArticle( text )
1745: pop param 'text'
var vowels := array{"a", "e", "i", "o", "u"};
1746: decl local #1
1747: array
1748: "a"
1749: init{}
1750: "e"
1751: init{}
1752: "i"
1753: init{}
1754: "o"
1755: init{}
1756: "u"
1757: init{}
1758: :=
1759: #
if ( Lower(text[1]) in vowels )
1760: local #0
1761: 1L
1762: [] 1
1763: Func(0,0): Lower
1764: local #1
1765: in
1766: if false goto 1772
text := "an "+text;
1767: "an "
1768: local #0
1769: +
1770: local0 := 
1771: goto1776
text := "a "+text;
1772: "a "
1773: local #0
1774: +
1775: local0 := 
return text;
1776: local #0
1777: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 69
function AP_ListAttributesByType( type:="" )
1778: pop param 'type'
if( !type )
1779: local #0
1780: if true goto 1790
var cfg_file := ReadConfigFile( ":attributes:attributes" );
1781: decl local #0
1782: ":attributes:attributes"
1783: Func(4,0): ReadConfigFile
1784: :=
1785: #
return GetConfigStringKeys( cfg_file );
1786: local #1
1787: Func(4,4): GetConfigStringKeys
1788: return
1789: leave block(1)
type := Lower( type );
1790: local #0
1791: Func(0,0): Lower
1792: local0 := 
var data_elem := AP_GetAttributeDataElem( "Categories" );
1793: decl local #1
1794: "Categories"
1795: makelocal
1796: jmp userfunc @1957
1797: :=
1798: #
return data_elem.GetProp( type );
1799: local #1
1800: local #0
1801: Call Method id getprop (#35, 1 params)
1802: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 158
function GetEnchantmentElem( item, elem )
1803: pop param 'elem'
1804: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:enchant_desc" );
1805: decl local #2
1806: ":loot:enchant_desc"
1807: Func(4,0): ReadConfigFile
1808: :=
1809: #
if( enchantment_cfg.errortext )
1810: local #2
1811: get member 'errortext'
1812: if false goto 1825
PrintTextAbove( item, "Error reading config <:loot:enchant_desc> -->"+enchantme
1813: local #1
1814: "Error reading config <:loot:enchant_desc> -->"
1815: local #2
1816: get member 'errortext'
1817: +
1818: 3L
1819: 1000L
1820: 0L
1821: Func(2,0): PrintTextAbove
1822: #
return 0;
1823: 0L
1824: return
var chant_elem := FindConfigElem( enchantment_cfg, elem );
1825: decl local #3
1826: local #2
1827: local #0
1828: Func(4,5): FindConfigElem
1829: :=
1830: #
if( chant_elem.errortext )
1831: local #3
1832: get member 'errortext'
1833: if false goto 1850
PrintTextAbove( item, "Error reading chant_elem <"+elem+"> -->"+chant_elem.erro
1834: local #1
1835: "Error reading chant_elem <"
1836: local #0
1837: +
1838: "> -->"
1839: +
1840: local #3
1841: get member 'errortext'
1842: +
1843: 3L
1844: 1000L
1845: 0L
1846: Func(2,0): PrintTextAbove
1847: #
return 0;
1848: 0L
1849: return
return chant_elem;
1850: local #3
1851: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 81
function GetEquipmentModifiers( item, flags:=EQUIP_CSTM_OR_ITEMDESC )
1852: pop param 'flags'
1853: pop param 'item'
var cstm_mods;
1854: decl local #2
1855: #
if( flags & EQUIP_CUSTOM_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
1856: local #0
1857: 2L
1858: &
1859: local #0
1860: 4L
1861: &
1862: ||
1863: if false goto 1882
cstm_mods := GetObjProperty( item, "AttribMods" );
1864: local #1
1865: "AttribMods"
1866: Func(2,2): GetObjProperty
1867: local2 := 
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
1868: local #2
1869: Func(0,1): TypeOf
1870: Func(0,0): Lower
1871: "dictionary"
1872: <>
1873: if false goto 1876
cstm_mods := dictionary;
1874: dictionary
1875: local2 := 
if( flags & EQUIP_CSTM_OR_ITEMDESC )
1876: local #0
1877: 4L
1878: &
1879: if false goto 1882
return cstm_mods;
1880: local #2
1881: return
var itemdesc_mods := dictionary;
1882: decl local #3
1883: dictionary
1884: :=
1885: #
if( flags & EQUIP_ITEMDESC_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
1886: local #0
1887: 1L
1888: &
1889: local #0
1890: 4L
1891: &
1892: ||
1893: if false goto 1929
var item_cfg := ReadConfigFile( ":*:itemdesc" );
1894: decl local #0
1895: ":*:itemdesc"
1896: Func(4,0): ReadConfigFile
1897: :=
1898: #
item_cfg := item_cfg[item.objtype];
1899: local #4
1900: local #1
1901: get member id 'objtype' (4)
1902: [] 1
1903: local4 := 
var modifier := Abs( item_cfg.DefaultDex ),
1904: decl local #1
1905: local #4
1906: get member 'DefaultDex'
1907: Func(8,0): Abs
1908: :=
1909: #
1910: decl local #2
1911: local #1
1912: "DefaultDex"
1913: Func(2,2): GetObjProperty
1914: Func(0,2): CInt
1915: :=
1916: #
if( cust_modifier )
1917: local #6
1918: if false goto 1923
modifier := modifier - cust_modifier;
1919: local #5
1920: local #6
1921: -
1922: local5 := 
itemdesc_mods["dexterity"] := -modifier;
1923: local #3
1924: "dexterity"
1925: local #5
1926: unary -
1927: [] := (1) #
1928: leave block(3)
if( flags & EQUIP_BOTH_MODS )
1929: local #0
1930: 3L
1931: &
1932: if false goto 1945
foreach modifier in ( cstm_mods )
1933: local #2
1934: initforeach @1943
itemdesc_mods.Insert( _modifier_iter, modifier );
1935: local #3
1936: local #6
1937: local #4
1938: Call Method id insert (#50, 2 params)
1939: #
SleepMS(2);
1940: 2L
1941: Func(3,2): Sleepms
1942: #
1943: stepforeach @1935
1944: leave block(3)
if( itemdesc_mods.Size() > 0 )
1945: local #3
1946: Call Method id size (#48, 0 params)
1947: 0L
1948: >
1949: if false goto 1953
return itemdesc_mods;
1950: local #3
1951: return
1952: goto1955
return cstm_mods;
1953: local #2
1954: return
1955: 0L
1956: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 57
function AP_GetAttributeDataElem( elem_name )
1957: pop param 'elem_name'
var data_file := AP_GetAttributesDataFile();
1958: decl local #1
1959: makelocal
1960: jmp userfunc @1986
1961: :=
1962: #
var data_elem := DFFindElement( data_file, elem_name, DF_CREATE );
1963: decl local #2
1964: local #1
1965: local #0
1966: 1L
1967: makelocal
1968: jmp userfunc @2005
1969: :=
1970: #
if( data_elem.errortext )
1971: local #2
1972: get member 'errortext'
1973: if false goto 1984
SysLog( "Error::AP_GetAttributeDataElem() - unable to find elem ["+elem_name+"]
1974: "Error::AP_GetAttributeDataElem() - unable to find elem ["
1975: local #0
1976: +
1977: "] ->"
1978: +
1979: local #2
1980: get member 'errortext'
1981: +
1982: Func(3,0): SysLog
1983: #
return data_elem;
1984: local #2
1985: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 49
function AP_GetAttributesDataFile()
var data_file := DFOpenDataFile( ":attributes:attributes", DF_CREATE );
1986: decl local #0
1987: ":attributes:attributes"
1988: 1L
1989: 0L
1990: makelocal
1991: jmp userfunc @2067
1992: :=
1993: #
if( data_file.errortext )
1994: local #0
1995: get member 'errortext'
1996: if false goto 2003
SysLog( "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"+
1997: "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"
1998: local #0
1999: get member 'errortext'
2000: +
2001: Func(3,0): SysLog
2002: #
return data_file;
2003: local #0
2004: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
2005: pop param 'create'
2006: pop param 'elem_name'
2007: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
2008: decl local #3
2009: local #2
2010: local #1
2011: Func(0,5): CStr
2012: Call Method id findelement (#72, 1 params)
2013: :=
2014: #
if ( !temp && create )
2015: local #3
2016: !
2017: local #0
2018: &&
2019: if false goto 2037
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
2020: "Debug::DFFindElement() - Creating elem: "
2021: local #1
2022: Func(0,5): CStr
2023: +
2024: makelocal
2025: jmp userfunc @2123
2026: #
file_ref.CreateElement(CStr(elem_name));
2027: local #2
2028: local #1
2029: Func(0,5): CStr
2030: Call Method id createelement (#71, 1 params)
2031: #
temp := file_ref.FindElement(CStr(elem_name));
2032: local #2
2033: local #1
2034: Func(0,5): CStr
2035: Call Method id findelement (#72, 1 params)
2036: local3 := 
if ( temp )
2037: local #3
2038: if false goto 2042
return temp;
2039: local #3
2040: return
2041: goto2065
elseif (create)
2042: local #0
2043: if false goto 2065
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
2044: decl local #0
2045: error
2046: "Error::DFFindElement() - Could not open data elem ["
2047: local #1
2048: +
2049: "] - "
2050: +
2051: local #3
2052: get member 'errortext'
2053: +
2054: addmember-assign(errortext)
2055: :=
2056: #
DF_OutPut(errmsg.errortext);
2057: local #4
2058: get member 'errortext'
2059: makelocal
2060: jmp userfunc @2123
2061: #
return errmsg;
2062: local #4
2063: return
2064: leave block(1)
2065: 0L
2066: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
2067: pop param 'flags'
2068: pop param 'create'
2069: pop param 'file_name'
var data_file := OpenDataFile(file_name);
2070: decl local #3
2071: local #2
2072: Func(10,0): OpenDataFile
2073: :=
2074: #
if ( (!data_file) && (create) )
2075: local #3
2076: !
2077: local #1
2078: &&
2079: if false goto 2093
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
2080: "Debug::DFOpenDataFile() - Creating data file: "
2081: local #2
2082: +
2083: makelocal
2084: jmp userfunc @2123
2085: #
CreateDataFile(file_name, flags);
2086: local #2
2087: local #0
2088: Func(10,1): CreateDataFile
2089: #
data_file := OpenDataFile(file_name);
2090: local #2
2091: Func(10,0): OpenDataFile
2092: local3 := 
if ( data_file )
2093: local #3
2094: if false goto 2098
return data_file;
2095: local #3
2096: return
2097: goto2121
elseif ( create )
2098: local #1
2099: if false goto 2121
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
2100: decl local #0
2101: error
2102: "Error::DFOpenDataFile() - Could not open "
2103: local #2
2104: +
2105: " : "
2106: +
2107: local #3
2108: get member 'errortext'
2109: +
2110: addmember-assign(errortext)
2111: :=
2112: #
DF_OutPut(errmsg.errortext);
2113: local #4
2114: get member 'errortext'
2115: makelocal
2116: jmp userfunc @2123
2117: #
return errmsg;
2118: local #4
2119: return
2120: leave block(1)
2121: 0L
2122: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
2123: pop param 'text'
if ( DF_DEBUG_MODE )
2124: global #1
2125: if false goto 2144
var script_name := GetProcess(GetPid()).name;
2126: decl local #0
2127: Func(3,4): GetPid
2128: Func(3,1): GetProcess
2129: get member id 'name' (3)
2130: :=
2131: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
2132: "::log/dataFile.log"
2133: "["
2134: local #1
2135: +
2136: "]: "
2137: +
2138: local #0
2139: +
2140: 1L
2141: Func(9,0): LogToFile
2142: #
2143: leave block(1)
return 1;
2144: 1L
2145: return
