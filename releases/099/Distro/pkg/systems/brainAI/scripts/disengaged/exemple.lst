C:\ZH099\pkg\systems\brainAI\scripts\disengaged\exemple.src, Line 12
program BrainNerve( params )
CONST SPEAK_DOEVENT_ENABLE			:= 0x1;
0: get arg 'params'
var npc		:= params[1];
1: decl local #1
2: local #0
3: 1L
4: [] 1
5: :=
6: #
var event	:= params[3];
7: decl local #2
8: local #0
9: 3L
10: [] 1
11: :=
12: #
params := 0; // Not needed anymore.
13: 0L
14: local0 := 
while( npc )
15: local #1
16: if false goto 45
if( event )
17: local #2
18: if false goto 38
var source := event.source;
19: decl local #0
20: local #2
21: get member 'source'
22: :=
23: #
case( event.type )
24: local #2
25: get member 'type'
26: casejmp
	4: @27
	default: @34
Disengaged( npc, source );
27: local #1
28: local #3
29: makelocal
30: jmp userfunc @49
31: #
break;
32: goto33
33: goto35
break;
34: goto35
event := 0;
35: 0L
36: local2 := 
37: leave block(1)
SleepMS(5);
38: 5L
39: Func(3,2): Sleepms
40: #
event := Wait_For_Event(1);
41: 1L
42: Func(3,6): Wait_For_Event
43: local2 := 
44: goto15
return 1;
45: 1L
46: progend
47: leave block(3)
48: progend
C:\ZH099\pkg\systems\brainAI\scripts\disengaged\exemple.src, Line 42
function Disengaged( npc, source )
49: pop param 'source'
50: pop param 'npc'
if( npc.opponent == source )
51: local #1
52: get member id 'opponent' (120)
53: local #0
54: ==
55: if false goto 64
AI_Speak( npc, "Wuss! Get back here and finish fighting me!" );
56: local #1
57: "Wuss! Get back here and finish fighting me!"
58: "default"
59: 0L
60: 0L
61: makelocal
62: jmp userfunc @66
63: #
return 1;
64: 1L
65: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
66: pop param 'no_wake'
67: pop param 'do_event'
68: pop param 'text_type'
69: pop param 'text'
70: pop param 'npc'
var ev		:= struct;
71: decl local #5
72: struct
73: :=
74: #
ev.+type	:= NPCEVENT_SPEAK;
75: local #5
76: "type"
77: .+
78: 10485765L
79: := #
ev.+text	:= text;
80: local #5
81: "text"
82: .+
83: local #3
84: := #
ev.+texttype	:= text_type;
85: local #5
86: "texttype"
87: .+
88: local #2
89: := #
ev.+doevent	:= do_event;
90: local #5
91: "doevent"
92: .+
93: local #1
94: := #
ev.+WakeUp	:= no_wake;
95: local #5
96: "WakeUp"
97: .+
98: local #0
99: := #
ev.+process	:= GetProcess( GetPid() );
100: local #5
101: "process"
102: .+
103: Func(3,4): GetPid
104: Func(3,1): GetProcess
105: := #
return SendEvent( npc, ev );
106: local #4
107: local #5
108: Func(2,3): SendEvent
109: return
