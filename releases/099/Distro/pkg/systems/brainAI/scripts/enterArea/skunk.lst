C:\ZH099\pkg\systems\brainAI\scripts\enterArea\skunk.src, Line 13
program BrainNerve( params )
include ":brainAI:npcError";
0: get arg 'params'
var npc		:= params[1];
1: decl local #1
2: local #0
3: 1L
4: [] 1
5: :=
6: #
var event	:= params[3];
7: decl local #2
8: local #0
9: 3L
10: [] 1
11: :=
12: #
var settings	:= params[4];
13: decl local #3
14: local #0
15: 4L
16: [] 1
17: :=
18: #
var scripts	:= params[5];
19: decl local #4
20: local #0
21: 5L
22: [] 1
23: :=
24: #
params := 0; // Not needed anymore.
25: 0L
26: local0 := 
while( npc )
27: local #1
28: if false goto 53
if( event )
29: local #2
30: if false goto 46
case( event.type )
31: local #2
32: get member 'type'
33: casejmp
	16: @34
	default: @43
EnteredArea( npc, event, settings, scripts );
34: local #1
35: local #2
36: local #3
37: local #4
38: makelocal
39: jmp userfunc @57
40: #
break;
41: goto42
42: goto44
break;
43: goto44
event := 0;
44: 0L
45: local2 := 
SleepMS(5);
46: 5L
47: Func(3,2): Sleepms
48: #
event := Wait_For_Event(1);
49: 1L
50: Func(3,7): Wait_For_Event
51: local2 := 
52: goto27
return 1;
53: 1L
54: progend
55: leave block(5)
56: progend
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\skunk.src, Line 42
function EnteredArea( npc, byref event, byref settings, byref scripts )
57: pop param byref 'scripts'
58: pop param byref 'settings'
59: pop param byref 'event'
60: pop param 'npc'
var source := event.source;
61: decl local #4
62: local #2
63: get member 'source'
64: :=
65: #
if( NPC_ShouldWatch( npc, source, settings, scripts ))
66: local #3
67: local #4
68: local #1
69: local #0
70: makelocal
71: jmp userfunc @164
72: if false goto 104
if( NPC_AddToWatchList( npc, source ))
73: local #3
74: local #4
75: makelocal
76: jmp userfunc @106
77: if false goto 104
if( NPC_LoadWatchList( npc ).Size() == 1 )
78: local #3
79: makelocal
80: jmp userfunc @140
81: Call Method id size (#48, 0 params)
82: 1L
83: ==
84: if false goto 100
AI_Turn( npc, source, NETURN_AWAY );
85: local #3
86: local #4
87: 2L
88: 0L
89: makelocal
90: jmp userfunc @246
91: #
AI_Speak( npc, "*stands up on its front legs in a defensive manner*" );
92: local #3
93: "*stands up on its front legs in a defensive manner*"
94: "default"
95: 0L
96: 0L
97: makelocal
98: jmp userfunc @202
99: #
AI_WakeUp( npc );
100: local #3
101: makelocal
102: jmp userfunc @284
103: #
return 1;
104: 1L
105: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 38
function NPC_AddToWatchList( npc, mobile )
106: pop param 'mobile'
107: pop param 'npc'
if( mobile.IsA( POLCLASS_MOBILE ))
108: local #0
109: 3L
110: Call Method id isa (#0, 1 params)
111: if false goto 115
mobile := mobile.serial;
112: local #0
113: get member id 'serial' (6)
114: local0 := 
var watch_dict := NPC_LoadWatchList( npc );
115: decl local #2
116: local #1
117: makelocal
118: jmp userfunc @140
119: :=
120: #
if( !watch_dict.Exists( mobile ))
121: local #2
122: local #0
123: Call Method id exists (#55, 1 params)
124: if true goto 138
watch_dict.Insert( mobile, POLCore().systime );
125: local #2
126: local #0
127: Func(2,5): POLCore
128: get member 'systime'
129: Call Method id insert (#50, 2 params)
130: #
NPC_SaveWatchList( npc, watch_dict );
131: local #1
132: local #2
133: makelocal
134: jmp userfunc @157
135: #
return 1;
136: 1L
137: return
return 0;
138: 0L
139: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 23
function NPC_LoadWatchList( npc )
140: pop param 'npc'
var watch_dict := GetObjProperty( npc, "#WatchList" );
141: decl local #1
142: local #0
143: "#WatchList"
144: Func(2,2): GetObjProperty
145: :=
146: #
if( Lower( TypeOf( watch_dict )) != "dictionary" )
147: local #1
148: Func(0,1): TypeOf
149: Func(0,0): Lower
150: "dictionary"
151: <>
152: if false goto 155
watch_dict := dictionary;
153: dictionary
154: local1 := 
return watch_dict;
155: local #1
156: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 33
function NPC_SaveWatchList( npc, dict_list )
157: pop param 'dict_list'
158: pop param 'npc'
return SetObjProperty( npc, "#WatchList", dict_list );
159: local #1
160: "#WatchList"
161: local #0
162: Func(2,1): SetObjProperty
163: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 81
function NPC_ShouldWatch( npc, mobile, byref settings, byref scripts )
164: pop param byref 'scripts'
165: pop param byref 'settings'
166: pop param 'mobile'
167: pop param 'npc'
if( !scripts["ShouldWatch"] )
168: local #0
169: "ShouldWatch"
170: [] 1
171: if true goto 174
return 1;
172: 1L
173: return
var result := Run_Script_To_Completion( scripts["ShouldWatch"].script, {npc, mo
174: decl local #4
175: local #0
176: "ShouldWatch"
177: [] 1
178: get member id 'script' (61)
179: array
180: local #3
181: init{}
182: local #2
183: init{}
184: local #1
185: init{}
186: Func(3,6): Run_Script_To_Completion
187: :=
188: #
if( result.errortext )
189: local #4
190: get member 'errortext'
191: if false goto 200
NPC_ErrorSysLog( npc, "Error::NPC_ShouldWatch() - "+result.errortext );
192: local #3
193: "Error::NPC_ShouldWatch() - "
194: local #4
195: get member 'errortext'
196: +
197: makelocal
198: jmp userfunc @309
199: #
return result;
200: local #4
201: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
202: pop param 'no_wake'
203: pop param 'do_event'
204: pop param 'text_type'
205: pop param 'text'
206: pop param 'npc'
var ev		:= struct;
207: decl local #5
208: struct
209: :=
210: #
ev.+type	:= NPCEVENT_SPEAK;
211: local #5
212: "type"
213: .+
214: 10485765L
215: := #
ev.+text	:= text;
216: local #5
217: "text"
218: .+
219: local #3
220: := #
ev.+texttype	:= text_type;
221: local #5
222: "texttype"
223: .+
224: local #2
225: := #
ev.+doevent	:= do_event;
226: local #5
227: "doevent"
228: .+
229: local #1
230: := #
ev.+WakeUp	:= no_wake;
231: local #5
232: "WakeUp"
233: .+
234: local #0
235: := #
ev.+process	:= GetProcess( GetPid() );
236: local #5
237: "process"
238: .+
239: Func(3,4): GetPid
240: Func(3,1): GetProcess
241: := #
return SendEvent( npc, ev );
242: local #4
243: local #5
244: Func(2,3): SendEvent
245: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
246: pop param 'no_wake'
247: pop param 'direction'
248: pop param 'object'
249: pop param 'npc'
var ev		:= struct;
250: decl local #4
251: struct
252: :=
253: #
ev.+type	:= NPCEVENT_TURN;
254: local #4
255: "type"
256: .+
257: 10485766L
258: := #
ev.+source	:= object;
259: local #4
260: "source"
261: .+
262: local #2
263: := #
ev.+direction	:= direction;
264: local #4
265: "direction"
266: .+
267: local #1
268: := #
ev.+WakeUp	:= no_wake;
269: local #4
270: "WakeUp"
271: .+
272: local #0
273: := #
ev.+process	:= GetProcess( GetPid() );
274: local #4
275: "process"
276: .+
277: Func(3,4): GetPid
278: Func(3,1): GetProcess
279: := #
return SendEvent( npc, ev );
280: local #3
281: local #4
282: Func(2,3): SendEvent
283: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 190
function AI_WakeUp( npc )
284: pop param 'npc'
var ev		:= struct;
285: decl local #1
286: struct
287: :=
288: #
ev.+type	:= NPCEVENT_WAKEUP;
289: local #1
290: "type"
291: .+
292: 10485779L
293: := #
ev.+WakeUp	:= WAKEUP;
294: local #1
295: "WakeUp"
296: .+
297: 1L
298: := #
ev.+process	:= GetProcess( GetPid() );
299: local #1
300: "process"
301: .+
302: Func(3,4): GetPid
303: Func(3,1): GetProcess
304: := #
return SendEvent( npc, ev );
305: local #0
306: local #1
307: Func(2,3): SendEvent
308: return
c:/ZH099/pkg/systems/brainAI/include/npcError.inc, Line 9
function NPC_ErrorSysLog( npc, errmsg )
309: pop param 'errmsg'
310: pop param 'npc'
PrintTextAbove( npc, errmsg, 3, 33 );
311: local #1
312: local #0
313: 3L
314: 33L
315: 0L
316: Func(2,0): PrintTextAbove
317: #
SysLog( "------------" );
318: "------------"
319: Func(3,0): SysLog
320: #
SysLog( "NPC Template: "+npc.npctemplate );
321: "NPC Template: "
322: local #1
323: get member id 'npctemplate' (62)
324: +
325: Func(3,0): SysLog
326: #
SysLog( "NPC Name    : "+npc.name );
327: "NPC Name    : "
328: local #1
329: get member id 'name' (3)
330: +
331: Func(3,0): SysLog
332: #
SysLog( errmsg );
333: local #0
334: Func(3,0): SysLog
335: #
SysLog( "------------" );
336: "------------"
337: Func(3,0): SysLog
338: #
npc.Disable( "invul" );
339: local #1
340: "invul"
341: Call Method id disable (#9, 1 params)
342: #
SetObjProperty( npc, "GuardKill", 1 );
343: local #1
344: "GuardKill"
345: 1L
346: Func(2,1): SetObjProperty
347: #
npc.Kill();
348: local #1
349: Call Method id kill (#75, 0 params)
350: #
return 1;
351: 1L
352: return
