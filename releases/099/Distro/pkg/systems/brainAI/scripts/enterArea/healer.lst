c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @52
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\healer.src, Line 20
program BrainNerve( params )
enum DOOR_SOUNDS
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var event	:= params[3];
18: decl local #2
19: local #0
20: 3L
21: [] 1
22: :=
23: #
params := 0; // Not needed anymore.
24: 0L
25: local0 := 
while( npc )
26: local #1
27: if false goto 50
if( event )
28: local #2
29: if false goto 43
case( event.type )
30: local #2
31: get member 'type'
32: casejmp
	16: @33
	default: @40
EnteredArea( npc, event );
33: local #1
34: local #2
35: makelocal
36: jmp userfunc @96
37: #
break;
38: goto39
39: goto41
break;
40: goto41
event := 0;
41: 0L
42: local2 := 
SleepMS(5);
43: 5L
44: Func(3,0): Sleepms
45: #
event := Wait_For_Event(1);
46: 1L
47: Func(3,7): Wait_For_Event
48: local2 := 
49: goto26
50: leave block(3)
51: progend
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
52: pop param byref 'cfg_file'
53: pop param 'elem_name'
if( !cfg_file )
54: local #0
55: if true goto 59
cfg_file := Classes_GetSettingsCfgFile();
56: makelocal
57: jmp userfunc @80
58: local0 := 
var elem := cfg_file[elem_name];
59: decl local #2
60: local #0
61: local #1
62: [] 1
63: :=
64: #
if( elem.errortext )
65: local #2
66: get member 'errortext'
67: if false goto 78
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
68: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
69: local #1
70: +
71: "] ->"
72: +
73: local #2
74: get member 'errortext'
75: +
76: Func(3,1): SysLog
77: #
return elem;
78: local #2
79: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
80: decl local #0
81: ":classes:settings"
82: Func(6,0): ReadConfigFile
83: :=
84: #
if( cfg.errortext )
85: local #0
86: get member 'errortext'
87: if false goto 94
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
88: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
89: local #0
90: get member 'errortext'
91: +
92: Func(3,1): SysLog
93: #
return cfg;
94: local #0
95: return
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\healer.src, Line 45
function EnteredArea( npc, byref event )
96: pop param byref 'event'
97: pop param 'npc'
var source := event.source;
98: decl local #2
99: local #0
100: get member 'source'
101: :=
102: #
if( !CheckLineOfSight( npc, source ))
103: local #1
104: local #2
105: Func(2,15): CheckLineOfSight
106: if true goto 110
return 1;
107: 1L
108: return
109: goto149
elseif( source.dead )
110: local #2
111: get member id 'dead' (39)
112: if false goto 121
Healer_Resurrect( npc, source );
113: local #1
114: local #2
115: makelocal
116: jmp userfunc @319
117: #
return 1;
118: 1L
119: return
120: goto149
elseif( source.poisoned )
121: local #2
122: get member id 'poisoned' (36)
123: if false goto 132
Healer_Cure( npc, source );
124: local #1
125: local #2
126: makelocal
127: jmp userfunc @151
128: #
return 1;
129: 1L
130: return
131: goto149
elseif( AP_GetVital( source, "Hits" ) < AP_GetVitalMaximumValue( source, "Hits"
132: local #2
133: "Hits"
134: makelocal
135: jmp userfunc @433
136: local #2
137: "Hits"
138: makelocal
139: jmp userfunc @442
140: <
141: if false goto 149
Healer_Heal( npc, source );
142: local #1
143: local #2
144: makelocal
145: jmp userfunc @235
146: #
return 1;
147: 1L
148: return
149: 0L
150: return
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\healer.src, Line 80
function Healer_Cure( npc, source )
151: pop param 'source'
152: pop param 'npc'
if( ListHostiles( source, 20, LH_FLAG_LOS ) > 0 );
153: local #0
154: 20L
155: 1L
156: Func(2,16): ListHostiles
157: 0L
158: >
159: if false goto 163
return 0;
160: 0L
161: return
162: goto190
elseif( source.criminal )
163: local #0
164: get member id 'criminal' (48)
165: if false goto 177
AI_Speak( npc, "I will not aid a criminal." );
166: local #1
167: "I will not aid a criminal."
168: "default"
169: 0L
170: 0L
171: makelocal
172: jmp userfunc @389
173: #
return 0;
174: 0L
175: return
176: goto190
elseif( source.murderer )
177: local #0
178: get member id 'murderer' (57)
179: if false goto 190
AI_Speak( npc, "I will not aid a murderer." );
180: local #1
181: "I will not aid a murderer."
182: "default"
183: 0L
184: 0L
185: makelocal
186: jmp userfunc @389
187: #
return 0;
188: 0L
189: return
TurnObjectToward( npc, source.x, source.y );
190: local #1
191: local #0
192: get member id 'x' (0)
193: local #0
194: get member id 'y' (1)
195: makelocal
196: jmp userfunc @370
197: #
AI_Speak( npc, "Sacrifice Purifies the Body and Soul!" );
198: local #1
199: "Sacrifice Purifies the Body and Soul!"
200: "default"
201: 0L
202: 0L
203: makelocal
204: jmp userfunc @389
205: #
var script := Start_Script( ":magery:spellStarter", array{npc, 11, 0, source} )
206: decl local #2
207: ":magery:spellStarter"
208: array
209: local #1
210: init{}
211: 11L
212: init{}
213: 0L
214: init{}
215: local #0
216: init{}
217: Func(3,4): Start_Script
218: :=
219: #
if( script.errortext )
220: local #2
221: get member 'errortext'
222: if false goto 233
PrintTextAbove( npc, script.errortext );
223: local #1
224: local #2
225: get member 'errortext'
226: 3L
227: 1000L
228: 0L
229: Func(2,6): PrintTextAbove
230: #
return 0;
231: 0L
232: return
return 1;
233: 1L
234: return
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\healer.src, Line 104
function Healer_Heal( npc, source )
235: pop param 'source'
236: pop param 'npc'
if( ListHostiles( source, 20, LH_FLAG_LOS ) > 0 );
237: local #0
238: 20L
239: 1L
240: Func(2,16): ListHostiles
241: 0L
242: >
243: if false goto 247
return 0;
244: 0L
245: return
246: goto274
elseif( source.criminal )
247: local #0
248: get member id 'criminal' (48)
249: if false goto 261
AI_Speak( npc, "I will not aid a criminal." );
250: local #1
251: "I will not aid a criminal."
252: "default"
253: 0L
254: 0L
255: makelocal
256: jmp userfunc @389
257: #
return 0;
258: 0L
259: return
260: goto274
elseif( source.murderer )
261: local #0
262: get member id 'murderer' (57)
263: if false goto 274
AI_Speak( npc, "I will not aid a murderer." );
264: local #1
265: "I will not aid a murderer."
266: "default"
267: 0L
268: 0L
269: makelocal
270: jmp userfunc @389
271: #
return 0;
272: 0L
273: return
TurnObjectToward( npc, source.x, source.y );
274: local #1
275: local #0
276: get member id 'x' (0)
277: local #0
278: get member id 'y' (1)
279: makelocal
280: jmp userfunc @370
281: #
AI_Speak( npc, "Compassion heals all!" );
282: local #1
283: "Compassion heals all!"
284: "default"
285: 0L
286: 0L
287: makelocal
288: jmp userfunc @389
289: #
var script := Start_Script( ":magery:spellStarter", array{npc, 29, 0, source} )
290: decl local #2
291: ":magery:spellStarter"
292: array
293: local #1
294: init{}
295: 29L
296: init{}
297: 0L
298: init{}
299: local #0
300: init{}
301: Func(3,4): Start_Script
302: :=
303: #
if( script.errortext )
304: local #2
305: get member 'errortext'
306: if false goto 317
PrintTextAbove( npc, script.errortext );
307: local #1
308: local #2
309: get member 'errortext'
310: 3L
311: 1000L
312: 0L
313: Func(2,6): PrintTextAbove
314: #
return 0;
315: 0L
316: return
return 1;
317: 1L
318: return
C:\ZH099\pkg\systems\brainAI\scripts\enterArea\healer.src, Line 63
function Healer_Resurrect( npc, source )
319: pop param 'source'
320: pop param 'npc'
if( source.criminal )
321: local #0
322: get member id 'criminal' (48)
323: if false goto 335
AI_Speak( npc, "I will not aid a criminal." );
324: local #1
325: "I will not aid a criminal."
326: "default"
327: 0L
328: 0L
329: makelocal
330: jmp userfunc @389
331: #
return 1;
332: 1L
333: return
334: goto348
elseif( source.murderer )
335: local #0
336: get member id 'murderer' (57)
337: if false goto 348
AI_Speak( npc, "I will not aid a murderer." );
338: local #1
339: "I will not aid a murderer."
340: "default"
341: 0L
342: 0L
343: makelocal
344: jmp userfunc @389
345: #
return 1;
346: 1L
347: return
if( !ResurrectionGump( source ))
348: local #0
349: makelocal
350: jmp userfunc @356
351: if true goto 354
return 1;
352: 1L
353: return
return 1;
354: 1L
355: return
c:/ZH099/pkg/systems/death/include/resurrection.inc, Line 23
function ResurrectionGump( mobile )
356: pop param 'mobile'
var result := Resurrection( mobile );
357: decl local #1
358: local #0
359: makelocal
360: jmp userfunc @451
361: :=
362: #
if( result.errortext )
363: local #1
364: get member 'errortext'
365: if false goto 368
return 0;
366: 0L
367: return
return 1;
368: 1L
369: return
c:/ZH099/scripts/include/facings.inc, Line 10
function TurnObjectToward( object, x_pos, y_pos )
370: pop param 'y_pos'
371: pop param 'x_pos'
372: pop param 'object'
var orig := object.facing;
373: decl local #3
374: local #2
375: get member id 'facing' (9)
376: :=
377: #
object.facing := GetFacing( object.x, object.y, x_pos, y_pos );
378: local #2
379: local #2
380: get member id 'x' (0)
381: local #2
382: get member id 'y' (1)
383: local #1
384: local #0
385: Func(2,0): GetFacing
386: set member id 'facing' (9) #
return orig;
387: local #3
388: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
389: pop param 'no_wake'
390: pop param 'do_event'
391: pop param 'text_type'
392: pop param 'text'
393: pop param 'npc'
var ev		:= struct;
394: decl local #5
395: struct
396: :=
397: #
ev.+type	:= NPCEVENT_SPEAK;
398: local #5
399: "type"
400: .+
401: 10485765L
402: := #
ev.+text	:= text;
403: local #5
404: "text"
405: .+
406: local #3
407: := #
ev.+texttype	:= text_type;
408: local #5
409: "texttype"
410: .+
411: local #2
412: := #
ev.+doevent	:= do_event;
413: local #5
414: "doevent"
415: .+
416: local #1
417: := #
ev.+WakeUp	:= no_wake;
418: local #5
419: "WakeUp"
420: .+
421: local #0
422: := #
ev.+process	:= GetProcess( GetPid() );
423: local #5
424: "process"
425: .+
426: Func(3,3): GetPid
427: Func(3,2): GetProcess
428: := #
return SendEvent( npc, ev );
429: local #4
430: local #5
431: Func(2,7): SendEvent
432: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
433: pop param 'vital_name'
434: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
435: local #1
436: local #0
437: Func(7,1): GetVital
438: Func(0,2): CDbl
439: 100LF
440: /
441: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
442: pop param 'vital_name'
443: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
444: local #1
445: local #0
446: Func(7,2): GetVitalMaximumValue
447: Func(0,2): CDbl
448: 100LF
449: /
450: return
c:/ZH099/pkg/systems/death/include/resurrection.inc, Line 33
function Resurrection( mobile )
451: pop param 'mobile'
if( !mobile.IsA( POLCLASS_MOBILE ))
452: local #0
453: 3L
454: Call Method id isa (#0, 1 params)
455: if true goto 461
return error{ "errortext":="object is not a mobile." };
456: error
457: "object is not a mobile."
458: addmember-assign(errortext)
459: return
460: goto468
elseif( !mobile.dead )
461: local #0
462: get member id 'dead' (39)
463: if true goto 468
return error{ "errortext":="mobile is not dead." };
464: error
465: "mobile is not dead."
466: addmember-assign(errortext)
467: return
var result := Resurrect( mobile );
468: decl local #1
469: local #0
470: 0L
471: Func(2,13): Resurrect
472: :=
473: #
if( result.errortext )
474: local #1
475: get member 'errortext'
476: if false goto 488
SendSysMessage( mobile, "Error couldn't ressurect -->"+result.errortext );
477: local #0
478: "Error couldn't ressurect -->"
479: local #1
480: get member 'errortext'
481: +
482: 3L
483: 1000L
484: Func(2,5): SendSysMessage
485: #
return 0;
486: 0L
487: return
mobile.graphic := mobile.trueobjtype;
488: local #0
489: local #0
490: get member id 'trueobjtype' (29)
491: set member id 'graphic' (5) #
PlaySoundEffect( mobile, SFX_RESURRECT );
492: local #0
493: 533L
494: Func(2,14): PlaySoundEffect
495: #
SetObjProperty( mobile, "#JustRess", ReadGameClock() + 20 );
496: local #0
497: "#JustRess"
498: Func(2,10): ReadGameClock
499: 20L
500: +
501: Func(2,3): SetObjProperty
502: #
if( mobile.cmdlevel )
503: local #0
504: get member id 'cmdlevel' (46)
505: if false goto 523
if( !ICP_LoadUserSetting(mobile, "NoCmdBarLogin") && !mobile.dead && mobile.cmd
506: local #0
507: "NoCmdBarLogin"
508: makelocal
509: jmp userfunc @525
510: !
511: local #0
512: get member id 'dead' (39)
513: !
514: &&
515: local #0
516: get member id 'cmdlevel' (46)
517: &&
518: if false goto 523
Start_Script(":control:commands/coun/cmdbar", mobile);
519: ":control:commands/coun/cmdbar"
520: local #0
521: Func(3,4): Start_Script
522: #
return 1;
523: 1L
524: return
c:/ZH099/pkg/systems/control/include/internal/icp-util.inc, Line 54
function ICP_LoadUserSetting( who, setting )
525: pop param 'setting'
526: pop param 'who'
var data_file := DFOpenDataFile( ":control:usrsettings", DF_CREATE );
527: decl local #2
528: ":control:usrsettings"
529: 1L
530: 0L
531: makelocal
532: jmp userfunc @611
533: :=
534: #
var data_elem := DFFindElement( data_file, Hex( who.serial ));
535: decl local #3
536: local #2
537: local #1
538: get member id 'serial' (6)
539: Func(0,5): Hex
540: 0L
541: makelocal
542: jmp userfunc @549
543: :=
544: #
return data_elem.GetProp( setting );
545: local #3
546: local #0
547: Call Method id getprop (#35, 1 params)
548: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
549: pop param 'create'
550: pop param 'elem_name'
551: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
552: decl local #3
553: local #2
554: local #1
555: Func(0,4): CStr
556: Call Method id findelement (#72, 1 params)
557: :=
558: #
if ( !temp && create )
559: local #3
560: !
561: local #0
562: &&
563: if false goto 581
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
564: "Debug::DFFindElement() - Creating elem: "
565: local #1
566: Func(0,4): CStr
567: +
568: makelocal
569: jmp userfunc @667
570: #
file_ref.CreateElement(CStr(elem_name));
571: local #2
572: local #1
573: Func(0,4): CStr
574: Call Method id createelement (#71, 1 params)
575: #
temp := file_ref.FindElement(CStr(elem_name));
576: local #2
577: local #1
578: Func(0,4): CStr
579: Call Method id findelement (#72, 1 params)
580: local3 := 
if ( temp )
581: local #3
582: if false goto 586
return temp;
583: local #3
584: return
585: goto609
elseif (create)
586: local #0
587: if false goto 609
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
588: decl local #0
589: error
590: "Error::DFFindElement() - Could not open data elem ["
591: local #1
592: +
593: "] - "
594: +
595: local #3
596: get member 'errortext'
597: +
598: addmember-assign(errortext)
599: :=
600: #
DF_OutPut(errmsg.errortext);
601: local #4
602: get member 'errortext'
603: makelocal
604: jmp userfunc @667
605: #
return errmsg;
606: local #4
607: return
608: leave block(1)
609: 0L
610: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
611: pop param 'flags'
612: pop param 'create'
613: pop param 'file_name'
var data_file := OpenDataFile(file_name);
614: decl local #3
615: local #2
616: Func(10,0): OpenDataFile
617: :=
618: #
if ( (!data_file) && (create) )
619: local #3
620: !
621: local #1
622: &&
623: if false goto 637
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
624: "Debug::DFOpenDataFile() - Creating data file: "
625: local #2
626: +
627: makelocal
628: jmp userfunc @667
629: #
CreateDataFile(file_name, flags);
630: local #2
631: local #0
632: Func(10,1): CreateDataFile
633: #
data_file := OpenDataFile(file_name);
634: local #2
635: Func(10,0): OpenDataFile
636: local3 := 
if ( data_file )
637: local #3
638: if false goto 642
return data_file;
639: local #3
640: return
641: goto665
elseif ( create )
642: local #1
643: if false goto 665
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
644: decl local #0
645: error
646: "Error::DFOpenDataFile() - Could not open "
647: local #2
648: +
649: " : "
650: +
651: local #3
652: get member 'errortext'
653: +
654: addmember-assign(errortext)
655: :=
656: #
DF_OutPut(errmsg.errortext);
657: local #4
658: get member 'errortext'
659: makelocal
660: jmp userfunc @667
661: #
return errmsg;
662: local #4
663: return
664: leave block(1)
665: 0L
666: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
667: pop param 'text'
if ( DF_DEBUG_MODE )
668: global #1
669: if false goto 688
var script_name := GetProcess(GetPid()).name;
670: decl local #0
671: Func(3,3): GetPid
672: Func(3,2): GetProcess
673: get member id 'name' (3)
674: :=
675: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
676: "::log/dataFile.log"
677: "["
678: local #1
679: +
680: "]: "
681: +
682: local #0
683: +
684: 1L
685: Func(9,0): LogToFile
686: #
687: leave block(1)
return 1;
688: 1L
689: return
