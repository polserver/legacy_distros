c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @89
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\restart\merchant.src, Line 13
program BrainCriticalScript( params )
include ":brainAI:npcCommands";
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var g_settings	:= params[2];
64: decl local #2
65: local #0
66: 2L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
NPC_SetAnchorInfos( npc, g_settings );
72: local #1
73: local #2
74: makelocal
75: jmp userfunc @133
76: #
StartNerve( npc, "Virtual", ":brainAI:scripts/virtual/wander" );
77: local #1
78: "Virtual"
79: ":brainAI:scripts/virtual/wander"
80: array
81: 0L
82: makelocal
83: jmp userfunc @183
84: #
return 1;
85: 1L
86: progend
87: leave block(3)
88: progend
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
89: pop param byref 'cfg_file'
90: pop param 'elem_name'
if( !cfg_file )
91: local #0
92: if true goto 96
cfg_file := Classes_GetSettingsCfgFile();
93: makelocal
94: jmp userfunc @117
95: local0 := 
var elem := cfg_file[elem_name];
96: decl local #2
97: local #0
98: local #1
99: [] 1
100: :=
101: #
if( elem.errortext )
102: local #2
103: get member 'errortext'
104: if false goto 115
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
105: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
106: local #1
107: +
108: "] ->"
109: +
110: local #2
111: get member 'errortext'
112: +
113: Func(3,0): SysLog
114: #
return elem;
115: local #2
116: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
117: decl local #0
118: ":classes:settings"
119: Func(5,0): ReadConfigFile
120: :=
121: #
if( cfg.errortext )
122: local #0
123: get member 'errortext'
124: if false goto 131
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
125: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
126: local #0
127: get member 'errortext'
128: +
129: Func(3,0): SysLog
130: #
return cfg;
131: local #0
132: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
133: pop param 'gsettings'
134: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
135: decl local #2
136: local #1
137: "StartingPoint"
138: Func(2,1): GetObjProperty
139: :=
140: #
if( !starting_point )
141: local #2
142: if true goto 167
var location := struct;
143: decl local #0
144: struct
145: :=
146: #
location.+x := npc.x;
147: local #3
148: "x"
149: .+
150: local #1
151: get member id 'x' (0)
152: := #
location.+y := npc.y;
153: local #3
154: "y"
155: .+
156: local #1
157: get member id 'y' (1)
158: := #
starting_point := location;
159: local #3
160: local2 := 
SetObjProperty( npc, "StartingPoint", location );
161: local #1
162: "StartingPoint"
163: local #3
164: Func(2,2): SetObjProperty
165: #
166: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
167: local #1
168: local #2
169: get member id 'x' (0)
170: local #2
171: get member id 'y' (1)
172: local #0
173: "AreaSize"
174: [] 1
175: Func(0,1): CInt
176: 80L
177: 0L
178: makelocal
179: jmp userfunc @339
180: #
return 1;
181: 1L
182: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 81
function StartNerve( mobile, nerve_name, nerve_script, data:=array, flags:=NF_N
183: pop param 'flags'
184: pop param 'data'
185: pop param 'nerve_script'
186: pop param 'nerve_name'
187: pop param 'mobile'
if( GetNerveProcess( mobile, nerve_name ))
188: local #4
189: local #3
190: makelocal
191: jmp userfunc @389
192: if false goto 195
return 0;
193: 0L
194: return
if( Lower( TypeOf( data )) != "array")
195: local #1
196: Func(0,6): TypeOf
197: Func(0,0): Lower
198: "array"
199: <>
200: if false goto 205
data := array{data};
201: array
202: local #1
203: init{}
204: local1 := 
data.Insert( 1, mobile );
205: local #1
206: 1L
207: local #4
208: Call Method id insert (#50, 2 params)
209: #
data.Insert( 2, nerve_name );
210: local #1
211: 2L
212: local #3
213: Call Method id insert (#50, 2 params)
214: #
var process := Start_Script( nerve_script, data );
215: decl local #5
216: local #2
217: local #1
218: Func(3,4): Start_Script
219: :=
220: #
if( process.errortext )
221: local #5
222: get member 'errortext'
223: if false goto 250
var errmsg := "Error::StartNerve() - ["+nerve_name+"] ["+nerve_script+"] failed
224: decl local #0
225: "Error::StartNerve() - ["
226: local #3
227: +
228: "] ["
229: +
230: local #2
231: +
232: "] failed to start! ->"
233: +
234: local #5
235: get member 'errortext'
236: +
237: :=
238: #
NPC_ErrorSysLog( mobile, errmsg );
239: local #4
240: local #6
241: makelocal
242: jmp userfunc @436
243: #
return error{"errortext":=errmsg};
244: error
245: local #6
246: addmember-assign(errortext)
247: return
248: leave block(1)
249: goto292
var nerve_dict := LoadNerves( mobile );
250: decl local #0
251: local #4
252: makelocal
253: jmp userfunc @419
254: :=
255: #
if( nerve_dict.Exists( nerve_name ))
256: local #6
257: local #3
258: Call Method id exists (#55, 1 params)
259: if false goto 265
StopNerve( mobile, nerve_name );
260: local #4
261: local #3
262: makelocal
263: jmp userfunc @294
264: #
var nerve_info := struct;
265: decl local #1
266: struct
267: :=
268: #
nerve_info.+pid := process.pid;
269: local #7
270: "pid"
271: .+
272: local #5
273: get member id 'pid' (103)
274: := #
nerve_info.+flags := flags;
275: local #7
276: "flags"
277: .+
278: local #0
279: := #
nerve_dict[nerve_name] := nerve_info;
280: local #6
281: local #3
282: local #7
283: [] := (1) #
SaveNerves( mobile, nerve_dict );
284: local #4
285: local #6
286: makelocal
287: jmp userfunc @480
288: #
return process;
289: local #5
290: return
291: leave block(2)
292: 0L
293: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 119
function StopNerve( mobile, nerve_name )
294: pop param 'nerve_name'
295: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
296: decl local #2
297: local #1
298: makelocal
299: jmp userfunc @419
300: :=
301: #
if( nerve_dict.Exists( nerve_name ))
302: local #2
303: local #0
304: Call Method id exists (#55, 1 params)
305: if false goto 329
var process := GetNerveProcess( mobile, nerve_name );
306: decl local #0
307: local #1
308: local #0
309: makelocal
310: jmp userfunc @389
311: :=
312: #
if( process )
313: local #3
314: if false goto 318
process.Kill();
315: local #3
316: Call Method id kill (#75, 0 params)
317: #
nerve_dict.Erase( nerve_name );
318: local #2
319: local #0
320: Call Method id erase (#49, 1 params)
321: #
return SaveNerves( mobile, nerve_dict );
322: local #1
323: local #2
324: makelocal
325: jmp userfunc @480
326: return
327: leave block(1)
328: goto337
return error{"errortext" := "Error::StopNerve() - Invalid nerve name  ["+nerve_
329: error
330: "Error::StopNerve() - Invalid nerve name  ["
331: local #0
332: +
333: "]"
334: +
335: addmember-assign(errortext)
336: return
337: 0L
338: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
339: pop param 'no_wake'
340: pop param 'percent_subtract'
341: pop param 'distance_start'
342: pop param 'y'
343: pop param 'x'
344: pop param 'npc'
var ev		:= struct;
345: decl local #6
346: struct
347: :=
348: #
ev.+type	:= NPCEVENT_ANCHOR;
349: local #6
350: "type"
351: .+
352: 10485781L
353: := #
ev.+x		:= x;
354: local #6
355: "x"
356: .+
357: local #4
358: := #
ev.+y		:= y;
359: local #6
360: "y"
361: .+
362: local #3
363: := #
ev.+distance	:= distance_start;
364: local #6
365: "distance"
366: .+
367: local #2
368: := #
ev.+percent	:= percent_subtract;
369: local #6
370: "percent"
371: .+
372: local #1
373: := #
ev.+WakeUp	:= no_wake;
374: local #6
375: "WakeUp"
376: .+
377: local #0
378: := #
ev.+process	:= GetProcess( GetPid() );
379: local #6
380: "process"
381: .+
382: Func(3,2): GetPid
383: Func(3,1): GetProcess
384: := #
return SendEvent( npc, ev );
385: local #5
386: local #6
387: Func(2,17): SendEvent
388: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
389: pop param 'nerve_name'
390: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
391: decl local #2
392: local #1
393: makelocal
394: jmp userfunc @419
395: :=
396: #
if( nerve_dict.Exists( nerve_name ))
397: local #2
398: local #0
399: Call Method id exists (#55, 1 params)
400: if false goto 409
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
401: local #2
402: local #0
403: [] 1
404: get member id 'pid' (103)
405: Func(0,1): CInt
406: Func(3,1): GetProcess
407: return
408: goto417
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
409: error
410: "Error::GetNerveProcess() - Invalid nerve name  ["
411: local #0
412: +
413: "]"
414: +
415: addmember-assign(errortext)
416: return
417: 0L
418: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
419: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
420: decl local #1
421: local #0
422: "#NerveInfo"
423: Func(2,1): GetObjProperty
424: :=
425: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
426: local #1
427: Func(0,6): TypeOf
428: Func(0,0): Lower
429: "dictionary"
430: <>
431: if false goto 434
nerve_dict := dictionary;
432: dictionary
433: local1 := 
return nerve_dict;
434: local #1
435: return
c:/ZH099/pkg/systems/brainAI/include/npcError.inc, Line 9
function NPC_ErrorSysLog( npc, errmsg )
436: pop param 'errmsg'
437: pop param 'npc'
PrintTextAbove( npc, errmsg, 3, 33 );
438: local #1
439: local #0
440: 3L
441: 33L
442: 0L
443: Func(2,5): PrintTextAbove
444: #
SysLog( "------------" );
445: "------------"
446: Func(3,0): SysLog
447: #
SysLog( "NPC Template: "+npc.npctemplate );
448: "NPC Template: "
449: local #1
450: get member id 'npctemplate' (62)
451: +
452: Func(3,0): SysLog
453: #
SysLog( "NPC Name    : "+npc.name );
454: "NPC Name    : "
455: local #1
456: get member id 'name' (3)
457: +
458: Func(3,0): SysLog
459: #
SysLog( errmsg );
460: local #0
461: Func(3,0): SysLog
462: #
SysLog( "------------" );
463: "------------"
464: Func(3,0): SysLog
465: #
npc.Disable( "invul" );
466: local #1
467: "invul"
468: Call Method id disable (#9, 1 params)
469: #
SetObjProperty( npc, "GuardKill", 1 );
470: local #1
471: "GuardKill"
472: 1L
473: Func(2,2): SetObjProperty
474: #
npc.Kill();
475: local #1
476: Call Method id kill (#75, 0 params)
477: #
return 1;
478: 1L
479: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 44
function SaveNerves( mobile, nerve_dict )
480: pop param 'nerve_dict'
481: pop param 'mobile'
return SetObjProperty( mobile, "#NerveInfo", nerve_dict );
482: local #1
483: "#NerveInfo"
484: local #0
485: Func(2,2): SetObjProperty
486: return
