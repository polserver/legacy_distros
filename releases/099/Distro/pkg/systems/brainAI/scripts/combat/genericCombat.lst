c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @513
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\genericCombat.src, Line 29
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\genericCombat.src, Line 31
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @645
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @405
106: #
var min_range, max_range;
107: decl local #7
108: #
109: decl local #8
110: #
NPC_WeaponRanges( npc, min_range, max_range );
111: local #1
112: local #7
113: local #8
114: makelocal
115: jmp userfunc @678
116: #
while( npc )
117: local #1
118: if false goto 265
var dist := Distance( npc, opponent );
119: decl local #0
120: local #1
121: local #6
122: Func(2,4): Distance
123: :=
124: #
if( DoneFighting( npc, opponent, dist, bsettings ))
125: local #1
126: local #6
127: local #9
128: local #4
129: makelocal
130: jmp userfunc @557
131: if false goto 163
if( scripts.Exists( "EndFight" ))
132: local #5
133: "EndFight"
134: Call Method id exists (#55, 1 params)
135: if false goto 148
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
136: local #1
137: "EndFight"
138: local #5
139: "EndFight"
140: [] 1
141: get member id 'script' (61)
142: local #0
143: 0L
144: makelocal
145: jmp userfunc @437
146: #
147: goto154
AI_WarMode( npc, 0 );
148: local #1
149: 0L
150: 0L
151: makelocal
152: jmp userfunc @481
153: #
AI_EndNerve( npc, nerve_name );
154: local #1
155: local #2
156: 0L
157: makelocal
158: jmp userfunc @311
159: #
break;
160: leave block(1)
161: goto265
162: goto255
elseif( ShouldFlee( npc, opponent, bsettings ))
163: local #1
164: local #6
165: local #4
166: makelocal
167: jmp userfunc @701
168: if false goto 190
AI_WarMode( npc, 0 );
169: local #1
170: 0L
171: 0L
172: makelocal
173: jmp userfunc @481
174: #
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, 20 )
175: local #1
176: local #6
177: get member id 'x' (0)
178: local #6
179: get member id 'y' (1)
180: local #6
181: get member id 'z' (2)
182: 2L
183: 2L
184: 20L
185: 0L
186: makelocal
187: jmp userfunc @343
188: #
189: goto255
elseif( dist < min_range )
190: local #9
191: local #7
192: <
193: if false goto 213
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, ( bs
194: local #1
195: local #6
196: get member id 'x' (0)
197: local #6
198: get member id 'y' (1)
199: local #6
200: get member id 'z' (2)
201: 2L
202: 2L
203: local #4
204: "MinRange"
205: [] 1
206: local #9
207: -
208: 0L
209: makelocal
210: jmp userfunc @343
211: #
212: goto255
elseif( dist > max_range )
213: local #9
214: local #8
215: >
216: if false goto 236
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_TOWARD, NEMOVE_RUN, ( 
217: local #1
218: local #6
219: get member id 'x' (0)
220: local #6
221: get member id 'y' (1)
222: local #6
223: get member id 'z' (2)
224: 1L
225: 2L
226: local #9
227: local #4
228: "MaxRange"
229: [] 1
230: -
231: 0L
232: makelocal
233: jmp userfunc @343
234: #
235: goto255
elseif( !IsFacing( npc, opponent.x, opponent.y ))
236: local #1
237: local #6
238: get member id 'x' (0)
239: local #6
240: get member id 'y' (1)
241: makelocal
242: jmp userfunc @631
243: if true goto 255
npc.facing := GetFacing(npc.x, npc.y, opponent.x, opponent.y);
244: local #1
245: local #1
246: get member id 'x' (0)
247: local #1
248: get member id 'y' (1)
249: local #6
250: get member id 'x' (0)
251: local #6
252: get member id 'y' (1)
253: Func(2,34): GetFacing
254: set member id 'facing' (9) #
SleepMS(50);
255: 50L
256: Func(3,2): Sleepms
257: #
AI_ClearThoughts( npc, CLR_NERVE );
258: local #1
259: 2L
260: makelocal
261: jmp userfunc @269
262: #
263: leave block(1)
264: goto117
return 1;
265: 1L
266: progend
267: leave block(9)
268: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
269: pop param 'flags'
270: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
271: decl local #2
272: local #0
273: 1L
274: &
275: :=
276: #
var nerve	:= flags & CLR_NERVE;
277: decl local #3
278: local #0
279: 2L
280: &
281: :=
282: #
var both	:= flags & CLR_BOTH;
283: decl local #4
284: local #0
285: 3L
286: &
287: :=
288: #
if( both || brain )
289: local #4
290: local #2
291: ||
292: if false goto 299
brain := NPC.process;
293: local #1
294: get member id 'process' (64)
295: local2 := 
brain.clear_event_queue();
296: local #2
297: Call Method id clear_event_queue (#78, 0 params)
298: #
if( both || nerve )
299: local #4
300: local #3
301: ||
302: if false goto 309
nerve := GetProcess( GetPid() );
303: Func(3,4): GetPid
304: Func(3,1): GetProcess
305: local3 := 
nerve.clear_event_queue();
306: local #3
307: Call Method id clear_event_queue (#78, 0 params)
308: #
return 1;
309: 1L
310: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
311: pop param 'no_wake'
312: pop param 'nerve_name'
313: pop param 'npc'
var ev		:= struct;
314: decl local #3
315: struct
316: :=
317: #
ev.+type	:= NPCEVENT_ENDNERVE;
318: local #3
319: "type"
320: .+
321: 10485775L
322: := #
ev.+name	:= nerve_name;
323: local #3
324: "name"
325: .+
326: local #1
327: := #
ev.+WakeUp	:= no_wake;
328: local #3
329: "WakeUp"
330: .+
331: local #0
332: := #
ev.+process	:= GetProcess( GetPid() );
333: local #3
334: "process"
335: .+
336: Func(3,4): GetPid
337: Func(3,1): GetProcess
338: := #
return SendEvent( npc, ev );
339: local #2
340: local #3
341: Func(2,3): SendEvent
342: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
343: pop param 'no_wake'
344: pop param 'loop'
345: pop param 'speed'
346: pop param 'to_from'
347: pop param 'z'
348: pop param 'y'
349: pop param 'x'
350: pop param 'npc'
var ev		:= struct;
351: decl local #8
352: struct
353: :=
354: #
ev.+type	:= NPCEVENT_MOVE;
355: local #8
356: "type"
357: .+
358: 10485763L
359: := #
ev.+x		:= x;
360: local #8
361: "x"
362: .+
363: local #6
364: := #
ev.+y		:= y;
365: local #8
366: "y"
367: .+
368: local #5
369: := #
ev.+z		:= z;
370: local #8
371: "z"
372: .+
373: local #4
374: := #
ev.+direction	:= to_from;
375: local #8
376: "direction"
377: .+
378: local #3
379: := #
ev.+speed	:= speed;
380: local #8
381: "speed"
382: .+
383: local #2
384: := #
ev.+WakeUp	:= no_wake;
385: local #8
386: "WakeUp"
387: .+
388: local #0
389: := #
ev.+loop	:= loop;
390: local #8
391: "loop"
392: .+
393: local #1
394: := #
ev.+process	:= GetProcess( GetPid() );
395: local #8
396: "process"
397: .+
398: Func(3,4): GetPid
399: Func(3,1): GetProcess
400: := #
return SendEvent( npc, ev );
401: local #7
402: local #8
403: Func(2,3): SendEvent
404: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
405: pop param 'no_wake'
406: pop param 'opponent'
407: pop param 'npc'
var ev		:= struct;
408: decl local #3
409: struct
410: :=
411: #
ev.+type	:= NPCEVENT_OPPONENT;
412: local #3
413: "type"
414: .+
415: 10485764L
416: := #
ev.+source	:= opponent;
417: local #3
418: "source"
419: .+
420: local #1
421: := #
ev.+WakeUp	:= no_wake;
422: local #3
423: "WakeUp"
424: .+
425: local #0
426: := #
ev.+process	:= GetProcess( GetPid() );
427: local #3
428: "process"
429: .+
430: Func(3,4): GetPid
431: Func(3,1): GetProcess
432: := #
return SendEvent( npc, ev );
433: local #2
434: local #3
435: Func(2,3): SendEvent
436: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
437: pop param 'no_wake'
438: pop param 'data'
439: pop param 'script_name'
440: pop param 'nerve_name'
441: pop param 'npc'
var ev		:= struct;
442: decl local #5
443: struct
444: :=
445: #
ev.+type	:= NPCEVENT_STARTNERVE;
446: local #5
447: "type"
448: .+
449: 10485776L
450: := #
ev.+name	:= nerve_name;
451: local #5
452: "name"
453: .+
454: local #3
455: := #
ev.+script	:= script_name;
456: local #5
457: "script"
458: .+
459: local #2
460: := #
ev.+data	:= data;
461: local #5
462: "data"
463: .+
464: local #1
465: := #
ev.+WakeUp	:= no_wake;
466: local #5
467: "WakeUp"
468: .+
469: local #0
470: := #
ev.+process	:= GetProcess( GetPid() );
471: local #5
472: "process"
473: .+
474: Func(3,4): GetPid
475: Func(3,1): GetProcess
476: := #
return SendEvent( npc, ev );
477: local #4
478: local #5
479: Func(2,3): SendEvent
480: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
481: pop param 'no_wake'
482: pop param 'mode'
483: pop param 'npc'
var ev		:= struct;
484: decl local #3
485: struct
486: :=
487: #
ev.+type	:= NPCEVENT_WARMODE;
488: local #3
489: "type"
490: .+
491: 10485767L
492: := #
ev.+value	:= mode;
493: local #3
494: "value"
495: .+
496: local #1
497: := #
ev.+WakeUp	:= no_wake;
498: local #3
499: "WakeUp"
500: .+
501: local #0
502: := #
ev.+process	:= GetProcess( GetPid() );
503: local #3
504: "process"
505: .+
506: Func(3,4): GetPid
507: Func(3,1): GetProcess
508: := #
return SendEvent( npc, ev );
509: local #2
510: local #3
511: Func(2,3): SendEvent
512: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
513: pop param byref 'cfg_file'
514: pop param 'elem_name'
if( !cfg_file )
515: local #0
516: if true goto 520
cfg_file := Classes_GetSettingsCfgFile();
517: makelocal
518: jmp userfunc @541
519: local0 := 
var elem := cfg_file[elem_name];
520: decl local #2
521: local #0
522: local #1
523: [] 1
524: :=
525: #
if( elem.errortext )
526: local #2
527: get member 'errortext'
528: if false goto 539
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
529: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
530: local #1
531: +
532: "] ->"
533: +
534: local #2
535: get member 'errortext'
536: +
537: Func(3,0): SysLog
538: #
return elem;
539: local #2
540: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
541: decl local #0
542: ":classes:settings"
543: Func(5,0): ReadConfigFile
544: :=
545: #
if( cfg.errortext )
546: local #0
547: get member 'errortext'
548: if false goto 555
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
549: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
550: local #0
551: get member 'errortext'
552: +
553: Func(3,0): SysLog
554: #
return cfg;
555: local #0
556: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
557: pop param byref 'settings'
558: pop param byref 'dist'
559: pop param 'opponent'
560: pop param 'npc'
if( !opponent )
561: local #2
562: if true goto 566
return 1;
563: 1L
564: return
565: goto623
elseif( opponent.dead )
566: local #2
567: get member id 'dead' (39)
568: if false goto 572
return 1;
569: 1L
570: return
571: goto623
elseif( opponent.concealed )
572: local #2
573: get member id 'concealed' (33)
574: if false goto 578
return 1;
575: 1L
576: return
577: goto623
elseif( dist > 30 )
578: local #1
579: 30L
580: >
581: if false goto 585
return 1;
582: 1L
583: return
584: goto623
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
585: local #3
586: "#Peacemaking"
587: Func(2,2): GetObjProperty
588: Func(2,18): ReadGameClock
589: >
590: if false goto 594
return 1;
591: 1L
592: return
593: goto623
elseif( opponent.hidden )
594: local #2
595: get member id 'hidden' (32)
596: if false goto 610
if( !DetectHidden( npc, opponent ))
597: local #3
598: local #2
599: makelocal
600: jmp userfunc @857
601: if true goto 607
pathfind_ticker += 1;
602: global #5
603: 1L
604: +=
605: #
606: goto609
pathfind_ticker := 0;
607: 0L
608: global5 := 
609: goto623
elseif( !CheckForPathLOS( npc, opponent, settings ))
610: local #3
611: local #2
612: local #0
613: makelocal
614: jmp userfunc @785
615: if true goto 621
pathfind_ticker += 1;
616: global #5
617: 1L
618: +=
619: #
620: goto623
pathfind_ticker := 0;
621: 0L
622: global5 := 
if( pathfind_ticker >= 60 )
623: global #5
624: 60L
625: >=
626: if false goto 629
return 1;
627: 1L
628: return
return 0;
629: 0L
630: return
c:/ZH099/scripts/include/facings.inc, Line 18
function IsFacing( mobile, x, y )
631: pop param 'y'
632: pop param 'x'
633: pop param 'mobile'
return( mobile.facing == GetFacing( mobile.x, mobile.y, x, y ));
634: local #2
635: get member id 'facing' (9)
636: local #2
637: get member id 'x' (0)
638: local #2
639: get member id 'y' (1)
640: local #1
641: local #0
642: Func(2,34): GetFacing
643: ==
644: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
645: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
646: decl local #1
647: local #0
648: "BattleCryWord"
649: Func(2,2): GetObjProperty
650: :=
651: #
if( battle_cry )
652: local #1
653: if false goto 663
AI_Speak( npc, battle_cry.RandomEntry() );
654: local #0
655: local #1
656: Call Method id randomentry (#101, 0 params)
657: "default"
658: 0L
659: 0L
660: makelocal
661: jmp userfunc @732
662: #
if( npc.hidden )
663: local #0
664: get member id 'hidden' (32)
665: if false goto 676
npc.hidden := 0;
666: local #0
667: 0L
668: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
669: local #0
670: "*Springs from hiding!*"
671: 3L
672: 55L
673: 0L
674: Func(2,0): PrintTextAbove
675: #
return 1;
676: 1L
677: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 20
function NPC_WeaponRanges( npc, byref min_range, byref max_range )
678: pop param byref 'max_range'
679: pop param byref 'min_range'
680: pop param 'npc'
min_range := CInt( CS_GetWeaponInfo( npc.weapon, "MinRange" ));
681: local #2
682: get member id 'weapon' (42)
683: "MinRange"
684: makelocal
685: jmp userfunc @839
686: Func(0,2): CInt
687: local1 := 
max_range := CInt( CS_GetWeaponInfo( npc.weapon, "MaxRange" ));
688: local #2
689: get member id 'weapon' (42)
690: "MaxRange"
691: makelocal
692: jmp userfunc @839
693: Func(0,2): CInt
694: local0 := 
if( !max_range )
695: local #0
696: if true goto 699
max_range := 1;
697: 1L
698: local0 := 
return 1;
699: 1L
700: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
701: pop param byref 'settings'
702: pop param 'opponent'
703: pop param 'npc'
return 0;
704: 0L
705: return
if( opponent.IsA( POLCLASS_NPC ))
706: local #1
707: 4L
708: Call Method id isa (#0, 1 params)
709: if false goto 712
return 0;
710: 0L
711: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
712: decl local #3
713: local #2
714: local #0
715: "FleeLevel"
716: [] 1
717: makelocal
718: jmp userfunc @1136
719: :=
720: #
if( flee_level > AP_GetVital( npc, "Hits" ))
721: local #3
722: local #2
723: "Hits"
724: makelocal
725: jmp userfunc @776
726: >
727: if false goto 730
return 1;
728: 1L
729: return
return 0;
730: 0L
731: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
732: pop param 'no_wake'
733: pop param 'do_event'
734: pop param 'text_type'
735: pop param 'text'
736: pop param 'npc'
var ev		:= struct;
737: decl local #5
738: struct
739: :=
740: #
ev.+type	:= NPCEVENT_SPEAK;
741: local #5
742: "type"
743: .+
744: 10485765L
745: := #
ev.+text	:= text;
746: local #5
747: "text"
748: .+
749: local #3
750: := #
ev.+texttype	:= text_type;
751: local #5
752: "texttype"
753: .+
754: local #2
755: := #
ev.+doevent	:= do_event;
756: local #5
757: "doevent"
758: .+
759: local #1
760: := #
ev.+WakeUp	:= no_wake;
761: local #5
762: "WakeUp"
763: .+
764: local #0
765: := #
ev.+process	:= GetProcess( GetPid() );
766: local #5
767: "process"
768: .+
769: Func(3,4): GetPid
770: Func(3,1): GetProcess
771: := #
return SendEvent( npc, ev );
772: local #4
773: local #5
774: Func(2,3): SendEvent
775: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
776: pop param 'vital_name'
777: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
778: local #1
779: local #0
780: Func(6,1): GetVital
781: Func(0,3): CDbl
782: 100LF
783: /
784: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
785: pop param 'settings'
786: pop param 'destination'
787: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
788: local #2
789: local #1
790: get member id 'x' (0)
791: local #1
792: get member id 'y' (1)
793: local #1
794: get member id 'z' (2)
795: Func(2,10): CheckLosAt
796: if true goto 837
var pathfind_range := CInt( settings["AreaSize"] );
797: decl local #0
798: local #0
799: "AreaSize"
800: [] 1
801: Func(0,2): CInt
802: :=
803: #
if( pathfind_range < 5 )
804: local #3
805: 5L
806: <
807: if false goto 810
pathfind_range := 5;
808: 5L
809: local3 := 
var flags := FP_IGNORE_MOBILES;
810: decl local #1
811: 1L
812: :=
813: #
if( settings["OpenDoors"] )
814: local #0
815: "OpenDoors"
816: [] 1
817: if false goto 822
flags += FP_IGNORE_DOORS;
818: local #4
819: 2L
820: +=
821: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
822: local #2
823: local #1
824: get member id 'x' (0)
825: local #1
826: get member id 'y' (1)
827: local #1
828: get member id 'z' (2)
829: local #3
830: local #4
831: makelocal
832: jmp userfunc @941
833: if true goto 836
return 0;
834: 0L
835: return
836: leave block(2)
return 1;
837: 1L
838: return
c:/ZH099/pkg/items/weapons/include/weaponInfo.inc, Line 8
function CS_GetWeaponInfo( weapon, prop_name )
839: pop param 'prop_name'
840: pop param 'weapon'
var config := ReadConfigFile( ":*:itemdesc" );
841: decl local #2
842: ":*:itemdesc"
843: Func(5,0): ReadConfigFile
844: :=
845: #
var info := config[weapon.objtype];
846: decl local #3
847: local #2
848: local #1
849: get member id 'objtype' (4)
850: [] 1
851: :=
852: #
return GetConfigString( info, prop_name );
853: local #3
854: local #0
855: Func(5,6): GetConfigString
856: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
857: pop param 'hider'
858: pop param 'mobile'
if( !hider.hidden )
859: local #0
860: get member id 'hidden' (32)
861: if true goto 864
return 1; //Already revealed.
862: 1L
863: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
864: decl local #2
865: local #1
866: "DetectingHidden"
867: makelocal
868: jmp userfunc @1188
869: :=
870: #
871: decl local #3
872: local #0
873: "Hiding"
874: makelocal
875: jmp userfunc @1188
876: :=
877: #
mobile_skill *= ClasseBonus( mobile, THIEF );
878: local #2
879: local #1
880: "IsThief"
881: makelocal
882: jmp userfunc @1227
883: *=
884: #
hider_skill *= ClasseBonus( hider, THIEF );
885: local #3
886: local #0
887: "IsThief"
888: makelocal
889: jmp userfunc @1227
890: *=
891: #
if( mobile.IsA( POLCLASS_NPC ))
892: local #1
893: 4L
894: Call Method id isa (#0, 1 params)
895: if false goto 904
if( !mobile_skill )
896: local #2
897: if true goto 900
return 0;
898: 0L
899: return
mobile_skill *= 2;
900: local #2
901: 2L
902: *=
903: #
var chance := CInt( mobile_skill - hider_skill );
904: decl local #4
905: local #2
906: local #3
907: -
908: Func(0,2): CInt
909: :=
910: #
if( chance < 0 )
911: local #4
912: 0L
913: <
914: if false goto 917
chance := 5;
915: 5L
916: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
917: 100L
918: Func(8,2): RandomInt
919: local #4
920: >
921: local #1
922: get member id 'multi' (12)
923: !
924: &&
925: if false goto 928
return 0;
926: 0L
927: return
hider.hidden := 0;
928: local #0
929: 0L
930: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
931: local #0
932: "You have been discovered!"
933: local #0
934: 3L
935: 1000L
936: 0L
937: Func(2,28): PrintTextAbovePrivate
938: #
return 1;
939: 1L
940: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
941: pop param 'flags'
942: pop param 'pathfind_range'
943: pop param 'z'
944: pop param 'y'
945: pop param 'x'
946: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
947: decl local #6
948: local #5
949: get member id 'x' (0)
950: local #5
951: get member id 'y' (1)
952: local #5
953: get member id 'z' (2)
954: 2L
955: local #5
956: get member id 'realm' (112)
957: Func(2,30): ListItemsNearLocation
958: :=
959: #
foreach item in search_field
960: local #6
961: initforeach @1044
SleepMS(5);
962: 5L
963: Func(3,2): Sleepms
964: #
if( item.movable ) //Automatic Anti-Blocking with items.
965: local #7
966: get member id 'movable' (20)
967: if false goto 1007
var npc_backpack := NPC_SetupBackPack( npc );
968: decl local #0
969: local #5
970: makelocal
971: jmp userfunc @1150
972: :=
973: #
var move_item := MoveItemToContainer( item, npc_backpack );
974: decl local #1
975: local #7
976: local #10
977: -1L
978: -1L
979: Func(2,29): MoveItemToContainer
980: :=
981: #
if( move_item.errortext )
982: local #11
983: get member 'errortext'
984: if false goto 997
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
985: local #5
986: "Error looting items -->"
987: local #11
988: get member 'errortext'
989: +
990: 3L
991: 1000L
992: 0L
993: Func(2,0): PrintTextAbove
994: #
continue;
995: leave block(2)
996: goto1044
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
997: local #5
998: "*Yoink*"
999: "yell"
1000: 1L
1001: 0L
1002: makelocal
1003: jmp userfunc @732
1004: #
1005: leave block(2)
1006: goto1044
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
1007: local #5
1008: "Magery"
1009: makelocal
1010: jmp userfunc @1188
1011: local #7
1012: "SummonedField"
1013: Func(2,2): GetObjProperty
1014: &&
1015: if false goto 1044
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
1016: decl local #0
1017: ":magery:spellStarter"
1018: array
1019: local #5
1020: init{}
1021: 34L
1022: init{}
1023: 0L
1024: init{}
1025: local #7
1026: init{}
1027: Func(3,3): Start_Script
1028: :=
1029: #
if( script.errortext )
1030: local #10
1031: get member 'errortext'
1032: if false goto 1041
PrintTextAbove( npc, script.errortext );
1033: local #5
1034: local #10
1035: get member 'errortext'
1036: 3L
1037: 1000L
1038: 0L
1039: Func(2,0): PrintTextAbove
1040: #
break;
1041: leave block(1)
1042: goto1045
1043: leave block(1)
1044: stepforeach @962
1045: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1046: decl local #7
1047: local #5
1048: get member id 'x' (0)
1049: local #5
1050: get member id 'y' (1)
1051: local #5
1052: get member id 'z' (2)
1053: local #4
1054: local #3
1055: local #2
1056: local #5
1057: get member id 'realm' (112)
1058: local #0
1059: local #1
1060: Func(2,31): FindPath
1061: :=
1062: #
if( !path )
1063: local #7
1064: if true goto 1067
return 0;
1065: 0L
1066: return
var move_x := CInt( path[1].x ),
1067: decl local #8
1068: local #7
1069: 1L
1070: [] 1
1071: get member id 'x' (0)
1072: Func(0,2): CInt
1073: :=
1074: #
1075: decl local #9
1076: local #7
1077: 1L
1078: [] 1
1079: get member id 'y' (1)
1080: Func(0,2): CInt
1081: :=
1082: #
1083: decl local #10
1084: local #7
1085: 1L
1086: [] 1
1087: get member id 'z' (2)
1088: Func(0,2): CInt
1089: :=
1090: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1091: decl local #11
1092: local #8
1093: local #9
1094: local #10
1095: local #5
1096: get member id 'realm' (112)
1097: Func(2,32): ListItemsAtLocation
1098: :=
1099: #
if( search_doors.Size() )
1100: local #11
1101: Call Method id size (#48, 0 params)
1102: if false goto 1130
foreach item in search_doors
1103: local #11
1104: initforeach @1128
if( item.IsDoor() )
1105: local #12
1106: Call Method isdoor (0 params)
1107: if false goto 1124
if( item.locked )
1108: local #12
1109: get member id 'locked' (70)
1110: if false goto 1114
return 0;
1111: 0L
1112: return
1113: goto1118
elseif( item.IsOpen() )
1114: local #12
1115: Call Method isopen (0 params)
1116: if false goto 1118
break;
1117: goto1129
UseItem( item, npc );
1118: local #12
1119: local #5
1120: Func(2,33): UseItem
1121: #
break;
1122: goto1129
1123: goto1125
continue;
1124: goto1128
SleepMS(5);
1125: 5L
1126: Func(3,2): Sleepms
1127: #
1128: stepforeach @1105
1129: leave block(3)
return array{move_x, mobe_y};
1130: array
1131: local #8
1132: init{}
1133: local #9
1134: init{}
1135: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1136: pop param 'flee_percent'
1137: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1138: local #1
1139: "Hits"
1140: makelocal
1141: jmp userfunc @1218
1142: Func(0,3): CDbl
1143: local #0
1144: Func(0,3): CDbl
1145: 100LF
1146: /
1147: *
1148: Func(0,2): CInt
1149: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1150: pop param 'mobile'
if( !mobile.backpack )
1151: local #0
1152: get member id 'backpack' (41)
1153: if true goto 1185
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1154: decl local #0
1155: local #0
1156: get member id 'x' (0)
1157: local #0
1158: get member id 'y' (1)
1159: local #0
1160: get member id 'z' (2)
1161: "BackPack"
1162: 1L
1163: local #0
1164: get member id 'realm' (112)
1165: Func(2,20): CreateItemAtLocation
1166: :=
1167: #
var result := EquipItem( mobile, backpack );
1168: decl local #1
1169: local #0
1170: local #1
1171: Func(2,21): EquipItem
1172: :=
1173: #
if( !result )
1174: local #2
1175: if true goto 1182
DestroyItem( backpack );
1176: local #1
1177: Func(2,22): DestroyItem
1178: #
return result;
1179: local #2
1180: return
1181: goto1184
return backpack;
1182: local #1
1183: return
1184: leave block(2)
return mobile.backpack;
1185: local #0
1186: get member id 'backpack' (41)
1187: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1188: pop param 'skill_name'
1189: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1190: local #1
1191: local #0
1192: makelocal
1193: jmp userfunc @1209
1194: local #1
1195: local #0
1196: makelocal
1197: jmp userfunc @1200
1198: +
1199: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1200: pop param 'skill_name'
1201: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1202: local #1
1203: local #0
1204: Func(7,1): GetAttributeTemporaryMod
1205: Func(0,3): CDbl
1206: 10LF
1207: /
1208: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1209: pop param 'skill_name'
1210: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1211: local #1
1212: local #0
1213: Func(7,0): GetAttributeBaseValue
1214: Func(0,3): CDbl
1215: 10LF
1216: /
1217: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1218: pop param 'vital_name'
1219: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1220: local #1
1221: local #0
1222: Func(6,2): GetVitalMaximumValue
1223: Func(0,3): CDbl
1224: 100LF
1225: /
1226: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1227: pop param 'classe'
1228: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1229: decl local #2
1230: local #1
1231: local #0
1232: Func(2,2): GetObjProperty
1233: Func(0,2): CInt
1234: :=
1235: #
if( level )
1236: local #2
1237: if false goto 1247
return CDbl( settings.BonusLevel * level ) + 1;
1238: global #0
1239: get member 'BonusLevel'
1240: local #2
1241: *
1242: Func(0,3): CDbl
1243: 1L
1244: +
1245: return
1246: goto1249
return 1;
1247: 1L
1248: return
1249: 0L
1250: return
