c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @511
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\skunk.src, Line 27
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\skunk.src, Line 29
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @629
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @359
106: #
while( npc )
107: local #1
108: if false goto 219
var dist := Distance( npc, opponent );
109: decl local #0
110: local #1
111: local #6
112: Func(2,4): Distance
113: :=
114: #
if( DoneFighting( npc, opponent, dist, bsettings ))
115: local #1
116: local #6
117: local #7
118: local #4
119: makelocal
120: jmp userfunc @555
121: if false goto 153
if( scripts.Exists( "EndFight" ))
122: local #5
123: "EndFight"
124: Call Method id exists (#55, 1 params)
125: if false goto 138
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
126: local #1
127: "EndFight"
128: local #5
129: "EndFight"
130: [] 1
131: get member id 'script' (61)
132: local #0
133: 0L
134: makelocal
135: jmp userfunc @435
136: #
137: goto144
AI_WarMode( npc, 0 );
138: local #1
139: 0L
140: 0L
141: makelocal
142: jmp userfunc @479
143: #
AI_EndNerve( npc, nerve_name );
144: local #1
145: local #2
146: 0L
147: makelocal
148: jmp userfunc @265
149: #
break;
150: leave block(1)
151: goto219
152: goto209
elseif( ShouldFlee( npc, opponent, bsettings ))
153: local #1
154: local #6
155: local #4
156: makelocal
157: jmp userfunc @662
158: if false goto 180
AI_WarMode( npc, 0 );
159: local #1
160: 0L
161: 0L
162: makelocal
163: jmp userfunc @479
164: #
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, 20 )
165: local #1
166: local #6
167: get member id 'x' (0)
168: local #6
169: get member id 'y' (1)
170: local #6
171: get member id 'z' (2)
172: 2L
173: 2L
174: 20L
175: 0L
176: makelocal
177: jmp userfunc @297
178: #
179: goto209
elseif( dist <= 4 && CheckLineOfSight( npc, opponent ))
180: local #7
181: 4L
182: <=
183: local #1
184: local #6
185: Func(2,34): CheckLineOfSight
186: &&
187: if false goto 209
AI_Speak( npc, "*sprays at "+opponent.name+"*" );
188: local #1
189: "*sprays at "
190: local #6
191: get member id 'name' (3)
192: +
193: "*"
194: +
195: "default"
196: 0L
197: 0L
198: makelocal
199: jmp userfunc @391
200: #
TS_StartTimer( opponent, "skunk", 180 );
201: local #6
202: "skunk"
203: 180L
204: 0L
205: 0L
206: makelocal
207: jmp userfunc @693
208: #
SleepMS(50);
209: 50L
210: Func(3,2): Sleepms
211: #
AI_ClearThoughts( npc, CLR_NERVE );
212: local #1
213: 2L
214: makelocal
215: jmp userfunc @223
216: #
217: leave block(1)
218: goto107
return 1;
219: 1L
220: progend
221: leave block(7)
222: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
223: pop param 'flags'
224: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
225: decl local #2
226: local #0
227: 1L
228: &
229: :=
230: #
var nerve	:= flags & CLR_NERVE;
231: decl local #3
232: local #0
233: 2L
234: &
235: :=
236: #
var both	:= flags & CLR_BOTH;
237: decl local #4
238: local #0
239: 3L
240: &
241: :=
242: #
if( both || brain )
243: local #4
244: local #2
245: ||
246: if false goto 253
brain := NPC.process;
247: local #1
248: get member id 'process' (64)
249: local2 := 
brain.clear_event_queue();
250: local #2
251: Call Method id clear_event_queue (#78, 0 params)
252: #
if( both || nerve )
253: local #4
254: local #3
255: ||
256: if false goto 263
nerve := GetProcess( GetPid() );
257: Func(3,4): GetPid
258: Func(3,1): GetProcess
259: local3 := 
nerve.clear_event_queue();
260: local #3
261: Call Method id clear_event_queue (#78, 0 params)
262: #
return 1;
263: 1L
264: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
265: pop param 'no_wake'
266: pop param 'nerve_name'
267: pop param 'npc'
var ev		:= struct;
268: decl local #3
269: struct
270: :=
271: #
ev.+type	:= NPCEVENT_ENDNERVE;
272: local #3
273: "type"
274: .+
275: 10485775L
276: := #
ev.+name	:= nerve_name;
277: local #3
278: "name"
279: .+
280: local #1
281: := #
ev.+WakeUp	:= no_wake;
282: local #3
283: "WakeUp"
284: .+
285: local #0
286: := #
ev.+process	:= GetProcess( GetPid() );
287: local #3
288: "process"
289: .+
290: Func(3,4): GetPid
291: Func(3,1): GetProcess
292: := #
return SendEvent( npc, ev );
293: local #2
294: local #3
295: Func(2,3): SendEvent
296: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
297: pop param 'no_wake'
298: pop param 'loop'
299: pop param 'speed'
300: pop param 'to_from'
301: pop param 'z'
302: pop param 'y'
303: pop param 'x'
304: pop param 'npc'
var ev		:= struct;
305: decl local #8
306: struct
307: :=
308: #
ev.+type	:= NPCEVENT_MOVE;
309: local #8
310: "type"
311: .+
312: 10485763L
313: := #
ev.+x		:= x;
314: local #8
315: "x"
316: .+
317: local #6
318: := #
ev.+y		:= y;
319: local #8
320: "y"
321: .+
322: local #5
323: := #
ev.+z		:= z;
324: local #8
325: "z"
326: .+
327: local #4
328: := #
ev.+direction	:= to_from;
329: local #8
330: "direction"
331: .+
332: local #3
333: := #
ev.+speed	:= speed;
334: local #8
335: "speed"
336: .+
337: local #2
338: := #
ev.+WakeUp	:= no_wake;
339: local #8
340: "WakeUp"
341: .+
342: local #0
343: := #
ev.+loop	:= loop;
344: local #8
345: "loop"
346: .+
347: local #1
348: := #
ev.+process	:= GetProcess( GetPid() );
349: local #8
350: "process"
351: .+
352: Func(3,4): GetPid
353: Func(3,1): GetProcess
354: := #
return SendEvent( npc, ev );
355: local #7
356: local #8
357: Func(2,3): SendEvent
358: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
359: pop param 'no_wake'
360: pop param 'opponent'
361: pop param 'npc'
var ev		:= struct;
362: decl local #3
363: struct
364: :=
365: #
ev.+type	:= NPCEVENT_OPPONENT;
366: local #3
367: "type"
368: .+
369: 10485764L
370: := #
ev.+source	:= opponent;
371: local #3
372: "source"
373: .+
374: local #1
375: := #
ev.+WakeUp	:= no_wake;
376: local #3
377: "WakeUp"
378: .+
379: local #0
380: := #
ev.+process	:= GetProcess( GetPid() );
381: local #3
382: "process"
383: .+
384: Func(3,4): GetPid
385: Func(3,1): GetProcess
386: := #
return SendEvent( npc, ev );
387: local #2
388: local #3
389: Func(2,3): SendEvent
390: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
391: pop param 'no_wake'
392: pop param 'do_event'
393: pop param 'text_type'
394: pop param 'text'
395: pop param 'npc'
var ev		:= struct;
396: decl local #5
397: struct
398: :=
399: #
ev.+type	:= NPCEVENT_SPEAK;
400: local #5
401: "type"
402: .+
403: 10485765L
404: := #
ev.+text	:= text;
405: local #5
406: "text"
407: .+
408: local #3
409: := #
ev.+texttype	:= text_type;
410: local #5
411: "texttype"
412: .+
413: local #2
414: := #
ev.+doevent	:= do_event;
415: local #5
416: "doevent"
417: .+
418: local #1
419: := #
ev.+WakeUp	:= no_wake;
420: local #5
421: "WakeUp"
422: .+
423: local #0
424: := #
ev.+process	:= GetProcess( GetPid() );
425: local #5
426: "process"
427: .+
428: Func(3,4): GetPid
429: Func(3,1): GetProcess
430: := #
return SendEvent( npc, ev );
431: local #4
432: local #5
433: Func(2,3): SendEvent
434: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
435: pop param 'no_wake'
436: pop param 'data'
437: pop param 'script_name'
438: pop param 'nerve_name'
439: pop param 'npc'
var ev		:= struct;
440: decl local #5
441: struct
442: :=
443: #
ev.+type	:= NPCEVENT_STARTNERVE;
444: local #5
445: "type"
446: .+
447: 10485776L
448: := #
ev.+name	:= nerve_name;
449: local #5
450: "name"
451: .+
452: local #3
453: := #
ev.+script	:= script_name;
454: local #5
455: "script"
456: .+
457: local #2
458: := #
ev.+data	:= data;
459: local #5
460: "data"
461: .+
462: local #1
463: := #
ev.+WakeUp	:= no_wake;
464: local #5
465: "WakeUp"
466: .+
467: local #0
468: := #
ev.+process	:= GetProcess( GetPid() );
469: local #5
470: "process"
471: .+
472: Func(3,4): GetPid
473: Func(3,1): GetProcess
474: := #
return SendEvent( npc, ev );
475: local #4
476: local #5
477: Func(2,3): SendEvent
478: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
479: pop param 'no_wake'
480: pop param 'mode'
481: pop param 'npc'
var ev		:= struct;
482: decl local #3
483: struct
484: :=
485: #
ev.+type	:= NPCEVENT_WARMODE;
486: local #3
487: "type"
488: .+
489: 10485767L
490: := #
ev.+value	:= mode;
491: local #3
492: "value"
493: .+
494: local #1
495: := #
ev.+WakeUp	:= no_wake;
496: local #3
497: "WakeUp"
498: .+
499: local #0
500: := #
ev.+process	:= GetProcess( GetPid() );
501: local #3
502: "process"
503: .+
504: Func(3,4): GetPid
505: Func(3,1): GetProcess
506: := #
return SendEvent( npc, ev );
507: local #2
508: local #3
509: Func(2,3): SendEvent
510: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
511: pop param byref 'cfg_file'
512: pop param 'elem_name'
if( !cfg_file )
513: local #0
514: if true goto 518
cfg_file := Classes_GetSettingsCfgFile();
515: makelocal
516: jmp userfunc @539
517: local0 := 
var elem := cfg_file[elem_name];
518: decl local #2
519: local #0
520: local #1
521: [] 1
522: :=
523: #
if( elem.errortext )
524: local #2
525: get member 'errortext'
526: if false goto 537
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
527: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
528: local #1
529: +
530: "] ->"
531: +
532: local #2
533: get member 'errortext'
534: +
535: Func(3,0): SysLog
536: #
return elem;
537: local #2
538: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
539: decl local #0
540: ":classes:settings"
541: Func(5,0): ReadConfigFile
542: :=
543: #
if( cfg.errortext )
544: local #0
545: get member 'errortext'
546: if false goto 553
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
547: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
548: local #0
549: get member 'errortext'
550: +
551: Func(3,0): SysLog
552: #
return cfg;
553: local #0
554: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
555: pop param byref 'settings'
556: pop param byref 'dist'
557: pop param 'opponent'
558: pop param 'npc'
if( !opponent )
559: local #2
560: if true goto 564
return 1;
561: 1L
562: return
563: goto621
elseif( opponent.dead )
564: local #2
565: get member id 'dead' (39)
566: if false goto 570
return 1;
567: 1L
568: return
569: goto621
elseif( opponent.concealed )
570: local #2
571: get member id 'concealed' (33)
572: if false goto 576
return 1;
573: 1L
574: return
575: goto621
elseif( dist > 30 )
576: local #1
577: 30L
578: >
579: if false goto 583
return 1;
580: 1L
581: return
582: goto621
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
583: local #3
584: "#Peacemaking"
585: Func(2,2): GetObjProperty
586: Func(2,18): ReadGameClock
587: >
588: if false goto 592
return 1;
589: 1L
590: return
591: goto621
elseif( opponent.hidden )
592: local #2
593: get member id 'hidden' (32)
594: if false goto 608
if( !DetectHidden( npc, opponent ))
595: local #3
596: local #2
597: makelocal
598: jmp userfunc @814
599: if true goto 605
pathfind_ticker += 1;
600: global #5
601: 1L
602: +=
603: #
604: goto607
pathfind_ticker := 0;
605: 0L
606: global5 := 
607: goto621
elseif( !CheckForPathLOS( npc, opponent, settings ))
608: local #3
609: local #2
610: local #0
611: makelocal
612: jmp userfunc @760
613: if true goto 619
pathfind_ticker += 1;
614: global #5
615: 1L
616: +=
617: #
618: goto621
pathfind_ticker := 0;
619: 0L
620: global5 := 
if( pathfind_ticker >= 60 )
621: global #5
622: 60L
623: >=
624: if false goto 627
return 1;
625: 1L
626: return
return 0;
627: 0L
628: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
629: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
630: decl local #1
631: local #0
632: "BattleCryWord"
633: Func(2,2): GetObjProperty
634: :=
635: #
if( battle_cry )
636: local #1
637: if false goto 647
AI_Speak( npc, battle_cry.RandomEntry() );
638: local #0
639: local #1
640: Call Method id randomentry (#101, 0 params)
641: "default"
642: 0L
643: 0L
644: makelocal
645: jmp userfunc @391
646: #
if( npc.hidden )
647: local #0
648: get member id 'hidden' (32)
649: if false goto 660
npc.hidden := 0;
650: local #0
651: 0L
652: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
653: local #0
654: "*Springs from hiding!*"
655: 3L
656: 55L
657: 0L
658: Func(2,0): PrintTextAbove
659: #
return 1;
660: 1L
661: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
662: pop param byref 'settings'
663: pop param 'opponent'
664: pop param 'npc'
return 0;
665: 0L
666: return
if( opponent.IsA( POLCLASS_NPC ))
667: local #1
668: 4L
669: Call Method id isa (#0, 1 params)
670: if false goto 673
return 0;
671: 0L
672: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
673: decl local #3
674: local #2
675: local #0
676: "FleeLevel"
677: [] 1
678: makelocal
679: jmp userfunc @1093
680: :=
681: #
if( flee_level > AP_GetVital( npc, "Hits" ))
682: local #3
683: local #2
684: "Hits"
685: makelocal
686: jmp userfunc @751
687: >
688: if false goto 691
return 1;
689: 1L
690: return
return 0;
691: 0L
692: return
c:/ZH099/pkg/systems/timedScripts/include/timedScripts.inc, Line 131
function TS_StartTimer( mobile, timer_name, duration, level:=0, attacker:=0 )
693: pop param 'attacker'
694: pop param 'level'
695: pop param 'duration'
696: pop param 'timer_name'
697: pop param 'mobile'
duration := CInt( duration );
698: local #2
699: Func(0,2): CInt
700: local2 := 
if( duration < 1 )
701: local #2
702: 1L
703: <
704: if false goto 709
return error{"errortext":="Error::TS_StartTimer() - Duration must be greater th
705: error
706: "Error::TS_StartTimer() - Duration must be greater than 0."
707: addmember-assign(errortext)
708: return
var event := struct;
709: decl local #5
710: struct
711: :=
712: #
event.+type := EVENT_ADD_TIMER;
713: local #5
714: "type"
715: .+
716: 1L
717: := #
event.+name := CStr(timer_name);
718: local #5
719: "name"
720: .+
721: local #3
722: Func(0,5): CStr
723: := #
event.+amount := duration;
724: local #5
725: "amount"
726: .+
727: local #2
728: := #
event.+level := CInt(level);
729: local #5
730: "level"
731: .+
732: local #1
733: Func(0,2): CInt
734: := #
event.+attacker := attacker;
735: local #5
736: "attacker"
737: .+
738: local #0
739: := #
var process := TS_GetControllerProcess( mobile, START_CONTROLLER );
740: decl local #6
741: local #4
742: 1L
743: makelocal
744: jmp userfunc @1145
745: :=
746: #
return process.SendEvent( event );
747: local #6
748: local #5
749: Call Method id sendevent (#74, 1 params)
750: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
751: pop param 'vital_name'
752: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
753: local #1
754: local #0
755: Func(6,1): GetVital
756: Func(0,3): CDbl
757: 100LF
758: /
759: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
760: pop param 'settings'
761: pop param 'destination'
762: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
763: local #2
764: local #1
765: get member id 'x' (0)
766: local #1
767: get member id 'y' (1)
768: local #1
769: get member id 'z' (2)
770: Func(2,10): CheckLosAt
771: if true goto 812
var pathfind_range := CInt( settings["AreaSize"] );
772: decl local #0
773: local #0
774: "AreaSize"
775: [] 1
776: Func(0,2): CInt
777: :=
778: #
if( pathfind_range < 5 )
779: local #3
780: 5L
781: <
782: if false goto 785
pathfind_range := 5;
783: 5L
784: local3 := 
var flags := FP_IGNORE_MOBILES;
785: decl local #1
786: 1L
787: :=
788: #
if( settings["OpenDoors"] )
789: local #0
790: "OpenDoors"
791: [] 1
792: if false goto 797
flags += FP_IGNORE_DOORS;
793: local #4
794: 2L
795: +=
796: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
797: local #2
798: local #1
799: get member id 'x' (0)
800: local #1
801: get member id 'y' (1)
802: local #1
803: get member id 'z' (2)
804: local #3
805: local #4
806: makelocal
807: jmp userfunc @898
808: if true goto 811
return 0;
809: 0L
810: return
811: leave block(2)
return 1;
812: 1L
813: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
814: pop param 'hider'
815: pop param 'mobile'
if( !hider.hidden )
816: local #0
817: get member id 'hidden' (32)
818: if true goto 821
return 1; //Already revealed.
819: 1L
820: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
821: decl local #2
822: local #1
823: "DetectingHidden"
824: makelocal
825: jmp userfunc @1199
826: :=
827: #
828: decl local #3
829: local #0
830: "Hiding"
831: makelocal
832: jmp userfunc @1199
833: :=
834: #
mobile_skill *= ClasseBonus( mobile, THIEF );
835: local #2
836: local #1
837: "IsThief"
838: makelocal
839: jmp userfunc @1238
840: *=
841: #
hider_skill *= ClasseBonus( hider, THIEF );
842: local #3
843: local #0
844: "IsThief"
845: makelocal
846: jmp userfunc @1238
847: *=
848: #
if( mobile.IsA( POLCLASS_NPC ))
849: local #1
850: 4L
851: Call Method id isa (#0, 1 params)
852: if false goto 861
if( !mobile_skill )
853: local #2
854: if true goto 857
return 0;
855: 0L
856: return
mobile_skill *= 2;
857: local #2
858: 2L
859: *=
860: #
var chance := CInt( mobile_skill - hider_skill );
861: decl local #4
862: local #2
863: local #3
864: -
865: Func(0,2): CInt
866: :=
867: #
if( chance < 0 )
868: local #4
869: 0L
870: <
871: if false goto 874
chance := 5;
872: 5L
873: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
874: 100L
875: Func(8,2): RandomInt
876: local #4
877: >
878: local #1
879: get member id 'multi' (12)
880: !
881: &&
882: if false goto 885
return 0;
883: 0L
884: return
hider.hidden := 0;
885: local #0
886: 0L
887: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
888: local #0
889: "You have been discovered!"
890: local #0
891: 3L
892: 1000L
893: 0L
894: Func(2,28): PrintTextAbovePrivate
895: #
return 1;
896: 1L
897: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
898: pop param 'flags'
899: pop param 'pathfind_range'
900: pop param 'z'
901: pop param 'y'
902: pop param 'x'
903: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
904: decl local #6
905: local #5
906: get member id 'x' (0)
907: local #5
908: get member id 'y' (1)
909: local #5
910: get member id 'z' (2)
911: 2L
912: local #5
913: get member id 'realm' (112)
914: Func(2,30): ListItemsNearLocation
915: :=
916: #
foreach item in search_field
917: local #6
918: initforeach @1001
SleepMS(5);
919: 5L
920: Func(3,2): Sleepms
921: #
if( item.movable ) //Automatic Anti-Blocking with items.
922: local #7
923: get member id 'movable' (20)
924: if false goto 964
var npc_backpack := NPC_SetupBackPack( npc );
925: decl local #0
926: local #5
927: makelocal
928: jmp userfunc @1107
929: :=
930: #
var move_item := MoveItemToContainer( item, npc_backpack );
931: decl local #1
932: local #7
933: local #10
934: -1L
935: -1L
936: Func(2,29): MoveItemToContainer
937: :=
938: #
if( move_item.errortext )
939: local #11
940: get member 'errortext'
941: if false goto 954
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
942: local #5
943: "Error looting items -->"
944: local #11
945: get member 'errortext'
946: +
947: 3L
948: 1000L
949: 0L
950: Func(2,0): PrintTextAbove
951: #
continue;
952: leave block(2)
953: goto1001
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
954: local #5
955: "*Yoink*"
956: "yell"
957: 1L
958: 0L
959: makelocal
960: jmp userfunc @391
961: #
962: leave block(2)
963: goto1001
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
964: local #5
965: "Magery"
966: makelocal
967: jmp userfunc @1199
968: local #7
969: "SummonedField"
970: Func(2,2): GetObjProperty
971: &&
972: if false goto 1001
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
973: decl local #0
974: ":magery:spellStarter"
975: array
976: local #5
977: init{}
978: 34L
979: init{}
980: 0L
981: init{}
982: local #7
983: init{}
984: Func(3,3): Start_Script
985: :=
986: #
if( script.errortext )
987: local #10
988: get member 'errortext'
989: if false goto 998
PrintTextAbove( npc, script.errortext );
990: local #5
991: local #10
992: get member 'errortext'
993: 3L
994: 1000L
995: 0L
996: Func(2,0): PrintTextAbove
997: #
break;
998: leave block(1)
999: goto1002
1000: leave block(1)
1001: stepforeach @919
1002: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1003: decl local #7
1004: local #5
1005: get member id 'x' (0)
1006: local #5
1007: get member id 'y' (1)
1008: local #5
1009: get member id 'z' (2)
1010: local #4
1011: local #3
1012: local #2
1013: local #5
1014: get member id 'realm' (112)
1015: local #0
1016: local #1
1017: Func(2,31): FindPath
1018: :=
1019: #
if( !path )
1020: local #7
1021: if true goto 1024
return 0;
1022: 0L
1023: return
var move_x := CInt( path[1].x ),
1024: decl local #8
1025: local #7
1026: 1L
1027: [] 1
1028: get member id 'x' (0)
1029: Func(0,2): CInt
1030: :=
1031: #
1032: decl local #9
1033: local #7
1034: 1L
1035: [] 1
1036: get member id 'y' (1)
1037: Func(0,2): CInt
1038: :=
1039: #
1040: decl local #10
1041: local #7
1042: 1L
1043: [] 1
1044: get member id 'z' (2)
1045: Func(0,2): CInt
1046: :=
1047: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1048: decl local #11
1049: local #8
1050: local #9
1051: local #10
1052: local #5
1053: get member id 'realm' (112)
1054: Func(2,32): ListItemsAtLocation
1055: :=
1056: #
if( search_doors.Size() )
1057: local #11
1058: Call Method id size (#48, 0 params)
1059: if false goto 1087
foreach item in search_doors
1060: local #11
1061: initforeach @1085
if( item.IsDoor() )
1062: local #12
1063: Call Method isdoor (0 params)
1064: if false goto 1081
if( item.locked )
1065: local #12
1066: get member id 'locked' (70)
1067: if false goto 1071
return 0;
1068: 0L
1069: return
1070: goto1075
elseif( item.IsOpen() )
1071: local #12
1072: Call Method isopen (0 params)
1073: if false goto 1075
break;
1074: goto1086
UseItem( item, npc );
1075: local #12
1076: local #5
1077: Func(2,33): UseItem
1078: #
break;
1079: goto1086
1080: goto1082
continue;
1081: goto1085
SleepMS(5);
1082: 5L
1083: Func(3,2): Sleepms
1084: #
1085: stepforeach @1062
1086: leave block(3)
return array{move_x, mobe_y};
1087: array
1088: local #8
1089: init{}
1090: local #9
1091: init{}
1092: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1093: pop param 'flee_percent'
1094: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1095: local #1
1096: "Hits"
1097: makelocal
1098: jmp userfunc @1229
1099: Func(0,3): CDbl
1100: local #0
1101: Func(0,3): CDbl
1102: 100LF
1103: /
1104: *
1105: Func(0,2): CInt
1106: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1107: pop param 'mobile'
if( !mobile.backpack )
1108: local #0
1109: get member id 'backpack' (41)
1110: if true goto 1142
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1111: decl local #0
1112: local #0
1113: get member id 'x' (0)
1114: local #0
1115: get member id 'y' (1)
1116: local #0
1117: get member id 'z' (2)
1118: "BackPack"
1119: 1L
1120: local #0
1121: get member id 'realm' (112)
1122: Func(2,20): CreateItemAtLocation
1123: :=
1124: #
var result := EquipItem( mobile, backpack );
1125: decl local #1
1126: local #0
1127: local #1
1128: Func(2,21): EquipItem
1129: :=
1130: #
if( !result )
1131: local #2
1132: if true goto 1139
DestroyItem( backpack );
1133: local #1
1134: Func(2,22): DestroyItem
1135: #
return result;
1136: local #2
1137: return
1138: goto1141
return backpack;
1139: local #1
1140: return
1141: leave block(2)
return mobile.backpack;
1142: local #0
1143: get member id 'backpack' (41)
1144: return
c:/ZH099/pkg/systems/timedScripts/include/timedScripts.inc, Line 47
function TS_GetControllerProcess( mobile, start:=NOSTART_CONTROLLER )
1145: pop param 'start'
1146: pop param 'mobile'
var pid := CInt( GetObjProperty( mobile, "TimerControlPID" ));
1147: decl local #2
1148: local #1
1149: "TimerControlPID"
1150: Func(2,2): GetObjProperty
1151: Func(0,2): CInt
1152: :=
1153: #
var process := GetProcess( pid );
1154: decl local #3
1155: local #2
1156: Func(3,1): GetProcess
1157: :=
1158: #
if( !process )
1159: local #3
1160: if true goto 1167
if( start )
1161: local #0
1162: if false goto 1167
process := TS_StartController( mobile );
1163: local #1
1164: makelocal
1165: jmp userfunc @1169
1166: local3 := 
return process;
1167: local #3
1168: return
c:/ZH099/pkg/systems/timedScripts/include/timedScripts.inc, Line 61
function TS_StartController( mobile )
1169: pop param 'mobile'
if( TS_GetControllerProcess( mobile, NOSTART_CONTROLLER ))
1170: local #0
1171: 0L
1172: makelocal
1173: jmp userfunc @1145
1174: if false goto 1179
return error{"errortext":="Error::TS_StartController() - Controller is already 
1175: error
1176: "Error::TS_StartController() - Controller is already running."
1177: addmember-assign(errortext)
1178: return
var script := Start_Script( ":timedscripts:timerControl", mobile );
1179: decl local #1
1180: ":timedscripts:timerControl"
1181: local #0
1182: Func(3,3): Start_Script
1183: :=
1184: #
if( script.errortext )
1185: local #1
1186: get member 'errortext'
1187: if false goto 1197
ReportText( "Error::TS_StartController() ->"+script.errortext, REPORT_SYSLOG );
1188: "Error::TS_StartController() ->"
1189: local #1
1190: get member 'errortext'
1191: +
1192: 2L
1193: 0L
1194: makelocal
1195: jmp userfunc @1262
1196: #
return script;
1197: local #1
1198: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1199: pop param 'skill_name'
1200: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1201: local #1
1202: local #0
1203: makelocal
1204: jmp userfunc @1220
1205: local #1
1206: local #0
1207: makelocal
1208: jmp userfunc @1211
1209: +
1210: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1211: pop param 'skill_name'
1212: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1213: local #1
1214: local #0
1215: Func(7,1): GetAttributeTemporaryMod
1216: Func(0,3): CDbl
1217: 10LF
1218: /
1219: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1220: pop param 'skill_name'
1221: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1222: local #1
1223: local #0
1224: Func(7,0): GetAttributeBaseValue
1225: Func(0,3): CDbl
1226: 10LF
1227: /
1228: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1229: pop param 'vital_name'
1230: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1231: local #1
1232: local #0
1233: Func(6,2): GetVitalMaximumValue
1234: Func(0,3): CDbl
1235: 100LF
1236: /
1237: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1238: pop param 'classe'
1239: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1240: decl local #2
1241: local #1
1242: local #0
1243: Func(2,2): GetObjProperty
1244: Func(0,2): CInt
1245: :=
1246: #
if( level )
1247: local #2
1248: if false goto 1258
return CDbl( settings.BonusLevel * level ) + 1;
1249: global #0
1250: get member 'BonusLevel'
1251: local #2
1252: *
1253: Func(0,3): CDbl
1254: 1L
1255: +
1256: return
1257: goto1260
return 1;
1258: 1L
1259: return
1260: 0L
1261: return
c:/ZH099/pkg/utils/security/include/report.inc, Line 22
function ReportText( report_text:="?", flags:=REPORT_DISABLE, text_color:=0 )
1262: pop param 'text_color'
1263: pop param 'flags'
1264: pop param 'report_text'
if( !flags )
1265: local #1
1266: if true goto 1270
return 0;
1267: 0L
1268: return
1269: goto1325
elseif( flags & REPORT_CONSOLE )
1270: local #1
1271: 1L
1272: &
1273: if false goto 1280
Print( ""+report_text );
1274: ""
1275: local #2
1276: +
1277: Func(1,0): Print
1278: #
1279: goto1325
elseif( flags & REPORT_SYSLOG )
1280: local #1
1281: 2L
1282: &
1283: if false goto 1314
var script_name := CStr( GetProcess( GetPid() ).name ),
1284: decl local #0
1285: Func(3,4): GetPid
1286: Func(3,1): GetProcess
1287: get member id 'name' (3)
1288: Func(0,5): CStr
1289: :=
1290: #
1291: decl local #1
1292: local #3
1293: makelocal
1294: jmp userfunc @1327
1295: :=
1296: #
LogToFile( "::log/"+pkg_name+".log", "["+script_name+"]: "+report_text, LOG_DAT
1297: "::log/"
1298: local #4
1299: +
1300: ".log"
1301: +
1302: "["
1303: local #3
1304: +
1305: "]: "
1306: +
1307: local #2
1308: +
1309: 1L
1310: Func(10,0): LogToFile
1311: #
1312: leave block(2)
1313: goto1325
elseif( flags & REPORT_BROADCAST )
1314: local #1
1315: 4L
1316: &
1317: if false goto 1325
Broadcast( ""+report_text, 3, text_color );
1318: ""
1319: local #2
1320: +
1321: 3L
1322: local #0
1323: Func(2,5): Broadcast
1324: #
return 1;
1325: 1L
1326: return
c:/ZH099/pkg/utils/security/include/report.inc, Line 40
function GetPkgName( script_name )
1327: pop param 'script_name'
var i;
1328: decl local #1
1329: #
for( i:=1; i<=len(script_name); i+=1 )
1330: local #1
1331: 1L
1332: :=
1333: #
1334: local #1
1335: local #0
1336: Func(0,4): Len
1337: <=
1338: if false goto 1358
if( !Check_ValidChar( script_name[i] ))
1339: local #0
1340: local #1
1341: [] 1
1342: 0L
1343: makelocal
1344: jmp userfunc @1374
1345: if true goto 1350
script_name[i] := " ";
1346: local #0
1347: local #1
1348: " "
1349: [] := (1) #
SleepMS(5);
1350: 5L
1351: Func(3,2): Sleepms
1352: #
1353: local #1
1354: 1L
1355: +=
1356: #
1357: goto1334
foreach poss_pkg in ( SplitWords( script_name ))
1358: local #0
1359: " "
1360: Func(0,7): SplitWords
1361: initforeach @1370
if( GetPackageByName( poss_pkg ))
1362: local #2
1363: Func(4,1): GetPackageByName
1364: if false goto 1367
return poss_pkg;
1365: local #2
1366: return
SleepMS(5);
1367: 5L
1368: Func(3,2): Sleepms
1369: #
1370: stepforeach @1362
1371: leave block(3)
return 0;
1372: 0L
1373: return
c:/ZH099/scripts/include/string.inc, Line 147
function Check_ValidChar( text, allow_space:=0 )
1374: pop param 'allow_space'
1375: pop param 'text'
var valid_char := array{ "a", "b", "c", "d", "e", "f", "g",
1376: decl local #2
1377: array
1378: "a"
1379: init{}
1380: "b"
1381: init{}
1382: "c"
1383: init{}
1384: "d"
1385: init{}
1386: "e"
1387: init{}
1388: "f"
1389: init{}
1390: "g"
1391: init{}
1392: "h"
1393: init{}
1394: "i"
1395: init{}
1396: "j"
1397: init{}
1398: "k"
1399: init{}
1400: "l"
1401: init{}
1402: "m"
1403: init{}
1404: "n"
1405: init{}
1406: "o"
1407: init{}
1408: "p"
1409: init{}
1410: "q"
1411: init{}
1412: "r"
1413: init{}
1414: "s"
1415: init{}
1416: "t"
1417: init{}
1418: "u"
1419: init{}
1420: "v"
1421: init{}
1422: "w"
1423: init{}
1424: "x"
1425: init{}
1426: "y"
1427: init{}
1428: "z"
1429: init{}
1430: "A"
1431: init{}
1432: "B"
1433: init{}
1434: "C"
1435: init{}
1436: "D"
1437: init{}
1438: "E"
1439: init{}
1440: "F"
1441: init{}
1442: "G"
1443: init{}
1444: "H"
1445: init{}
1446: "I"
1447: init{}
1448: "P"
1449: init{}
1450: "O"
1451: init{}
1452: "N"
1453: init{}
1454: "M"
1455: init{}
1456: "L"
1457: init{}
1458: "K"
1459: init{}
1460: "J"
1461: init{}
1462: "Q"
1463: init{}
1464: "R"
1465: init{}
1466: "S"
1467: init{}
1468: "T"
1469: init{}
1470: "U"
1471: init{}
1472: "V"
1473: init{}
1474: "W"
1475: init{}
1476: "X"
1477: init{}
1478: "Y"
1479: init{}
1480: "Z"
1481: init{}
1482: "1"
1483: init{}
1484: "2"
1485: init{}
1486: "3"
1487: init{}
1488: "4"
1489: init{}
1490: "5"
1491: init{}
1492: "6"
1493: init{}
1494: "7"
1495: init{}
1496: "8"
1497: init{}
1498: "9"
1499: init{}
1500: "0"
1501: init{}
1502: :=
1503: #
var len_text := Len( text );
1504: decl local #3
1505: local #1
1506: Func(0,4): Len
1507: :=
1508: #
var i;
1509: decl local #4
1510: #
for( i:=1; i<=len_text; i+=1 )
1511: local #4
1512: 1L
1513: :=
1514: #
1515: local #4
1516: local #3
1517: <=
1518: if false goto 1561
SleepMS(5);
1519: 5L
1520: Func(3,2): Sleepms
1521: #
var letter := CStr( text[i] );
1522: decl local #0
1523: local #1
1524: local #4
1525: [] 1
1526: Func(0,5): CStr
1527: :=
1528: #
if( letter in valid_char )
1529: local #5
1530: local #2
1531: in
1532: if false goto 1536
continue;
1533: leave block(1)
1534: goto1556
1535: goto1553
elseif( allow_space && ( text[i] == " " || CAsc( text[i] ) == 0 ))
1536: local #0
1537: local #1
1538: local #4
1539: [] 1
1540: " "
1541: ==
1542: local #1
1543: local #4
1544: [] 1
1545: Func(0,10): CAsc
1546: 0L
1547: ==
1548: ||
1549: &&
1550: if false goto 1553
continue;
1551: leave block(1)
1552: goto1556
return 0;
1553: 0L
1554: return
1555: leave block(1)
1556: local #4
1557: 1L
1558: +=
1559: #
1560: goto1515
return 1;
1561: 1L
1562: return
