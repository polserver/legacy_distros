c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @529
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\spellCombat.src, Line 33
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\spellCombat.src, Line 35
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @661
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @421
106: #
var min_range, max_range;
107: decl local #7
108: #
109: decl local #8
110: #
NPC_WeaponRanges( npc, min_range, max_range );
111: local #1
112: local #7
113: local #8
114: makelocal
115: jmp userfunc @694
116: #
SetObjProperty( npc, "#NextCast", ReadGameClock()+bsettings["CastWait"] );
117: local #1
118: "#NextCast"
119: Func(2,19): ReadGameClock
120: local #4
121: "CastWait"
122: [] 1
123: +
124: Func(2,3): SetObjProperty
125: #
while( npc )
126: local #1
127: if false goto 281
var dist := Distance( npc, opponent );
128: decl local #0
129: local #1
130: local #6
131: Func(2,8): Distance
132: :=
133: #
if( DoneFighting( npc, opponent, dist, bsettings ))
134: local #1
135: local #6
136: local #9
137: local #4
138: makelocal
139: jmp userfunc @573
140: if false goto 172
if( scripts.Exists( "EndFight" ))
141: local #5
142: "EndFight"
143: Call Method id exists (#55, 1 params)
144: if false goto 157
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
145: local #1
146: "EndFight"
147: local #5
148: "EndFight"
149: [] 1
150: get member id 'script' (61)
151: local #0
152: 0L
153: makelocal
154: jmp userfunc @453
155: #
156: goto163
AI_WarMode( npc, 0 );
157: local #1
158: 0L
159: 0L
160: makelocal
161: jmp userfunc @497
162: #
AI_EndNerve( npc, nerve_name );
163: local #1
164: local #2
165: 0L
166: makelocal
167: jmp userfunc @327
168: #
break;
169: leave block(1)
170: goto281
171: goto264
elseif( ShouldFlee( npc, opponent, bsettings ))
172: local #1
173: local #6
174: local #4
175: makelocal
176: jmp userfunc @717
177: if false goto 199
AI_WarMode( npc, 0 );
178: local #1
179: 0L
180: 0L
181: makelocal
182: jmp userfunc @497
183: #
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, WAKE
184: local #1
185: local #6
186: get member id 'x' (0)
187: local #6
188: get member id 'y' (1)
189: local #6
190: get member id 'z' (2)
191: 2L
192: 2L
193: 1L
194: 100L
195: makelocal
196: jmp userfunc @359
197: #
198: goto264
elseif( dist < min_range )
199: local #9
200: local #7
201: <
202: if false goto 222
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, WAKE
203: local #1
204: local #6
205: get member id 'x' (0)
206: local #6
207: get member id 'y' (1)
208: local #6
209: get member id 'z' (2)
210: 2L
211: 2L
212: 1L
213: local #4
214: "MinRange"
215: [] 1
216: local #9
217: -
218: makelocal
219: jmp userfunc @359
220: #
221: goto264
elseif( dist > max_range )
222: local #9
223: local #8
224: >
225: if false goto 245
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_TOWARD, NEMOVE_RUN, WA
226: local #1
227: local #6
228: get member id 'x' (0)
229: local #6
230: get member id 'y' (1)
231: local #6
232: get member id 'z' (2)
233: 1L
234: 2L
235: 1L
236: local #9
237: local #4
238: "MaxRange"
239: [] 1
240: -
241: makelocal
242: jmp userfunc @359
243: #
244: goto264
elseif( !IsFacing( npc, opponent.x, opponent.y ))
245: local #1
246: local #6
247: get member id 'x' (0)
248: local #6
249: get member id 'y' (1)
250: makelocal
251: jmp userfunc @647
252: if true goto 264
npc.facing := GetFacing( npc.x, npc.y, opponent.x, opponent.y );
253: local #1
254: local #1
255: get member id 'x' (0)
256: local #1
257: get member id 'y' (1)
258: local #6
259: get member id 'x' (0)
260: local #6
261: get member id 'y' (1)
262: Func(2,0): GetFacing
263: set member id 'facing' (9) #
SpellAttack( npc, opponent, bsettings, dist );
264: local #1
265: local #6
266: local #4
267: local #9
268: makelocal
269: jmp userfunc @748
270: #
SleepMS(50);
271: 50L
272: Func(3,0): Sleepms
273: #
AI_ClearThoughts( npc, CLR_NERVE );
274: local #1
275: 2L
276: makelocal
277: jmp userfunc @285
278: #
279: leave block(1)
280: goto126
return 1;
281: 1L
282: progend
283: leave block(9)
284: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
285: pop param 'flags'
286: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
287: decl local #2
288: local #0
289: 1L
290: &
291: :=
292: #
var nerve	:= flags & CLR_NERVE;
293: decl local #3
294: local #0
295: 2L
296: &
297: :=
298: #
var both	:= flags & CLR_BOTH;
299: decl local #4
300: local #0
301: 3L
302: &
303: :=
304: #
if( both || brain )
305: local #4
306: local #2
307: ||
308: if false goto 315
brain := NPC.process;
309: local #1
310: get member id 'process' (64)
311: local2 := 
brain.clear_event_queue();
312: local #2
313: Call Method id clear_event_queue (#78, 0 params)
314: #
if( both || nerve )
315: local #4
316: local #3
317: ||
318: if false goto 325
nerve := GetProcess( GetPid() );
319: Func(3,3): GetPid
320: Func(3,2): GetProcess
321: local3 := 
nerve.clear_event_queue();
322: local #3
323: Call Method id clear_event_queue (#78, 0 params)
324: #
return 1;
325: 1L
326: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
327: pop param 'no_wake'
328: pop param 'nerve_name'
329: pop param 'npc'
var ev		:= struct;
330: decl local #3
331: struct
332: :=
333: #
ev.+type	:= NPCEVENT_ENDNERVE;
334: local #3
335: "type"
336: .+
337: 10485775L
338: := #
ev.+name	:= nerve_name;
339: local #3
340: "name"
341: .+
342: local #1
343: := #
ev.+WakeUp	:= no_wake;
344: local #3
345: "WakeUp"
346: .+
347: local #0
348: := #
ev.+process	:= GetProcess( GetPid() );
349: local #3
350: "process"
351: .+
352: Func(3,3): GetPid
353: Func(3,2): GetProcess
354: := #
return SendEvent( npc, ev );
355: local #2
356: local #3
357: Func(2,7): SendEvent
358: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
359: pop param 'no_wake'
360: pop param 'loop'
361: pop param 'speed'
362: pop param 'to_from'
363: pop param 'z'
364: pop param 'y'
365: pop param 'x'
366: pop param 'npc'
var ev		:= struct;
367: decl local #8
368: struct
369: :=
370: #
ev.+type	:= NPCEVENT_MOVE;
371: local #8
372: "type"
373: .+
374: 10485763L
375: := #
ev.+x		:= x;
376: local #8
377: "x"
378: .+
379: local #6
380: := #
ev.+y		:= y;
381: local #8
382: "y"
383: .+
384: local #5
385: := #
ev.+z		:= z;
386: local #8
387: "z"
388: .+
389: local #4
390: := #
ev.+direction	:= to_from;
391: local #8
392: "direction"
393: .+
394: local #3
395: := #
ev.+speed	:= speed;
396: local #8
397: "speed"
398: .+
399: local #2
400: := #
ev.+WakeUp	:= no_wake;
401: local #8
402: "WakeUp"
403: .+
404: local #0
405: := #
ev.+loop	:= loop;
406: local #8
407: "loop"
408: .+
409: local #1
410: := #
ev.+process	:= GetProcess( GetPid() );
411: local #8
412: "process"
413: .+
414: Func(3,3): GetPid
415: Func(3,2): GetProcess
416: := #
return SendEvent( npc, ev );
417: local #7
418: local #8
419: Func(2,7): SendEvent
420: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
421: pop param 'no_wake'
422: pop param 'opponent'
423: pop param 'npc'
var ev		:= struct;
424: decl local #3
425: struct
426: :=
427: #
ev.+type	:= NPCEVENT_OPPONENT;
428: local #3
429: "type"
430: .+
431: 10485764L
432: := #
ev.+source	:= opponent;
433: local #3
434: "source"
435: .+
436: local #1
437: := #
ev.+WakeUp	:= no_wake;
438: local #3
439: "WakeUp"
440: .+
441: local #0
442: := #
ev.+process	:= GetProcess( GetPid() );
443: local #3
444: "process"
445: .+
446: Func(3,3): GetPid
447: Func(3,2): GetProcess
448: := #
return SendEvent( npc, ev );
449: local #2
450: local #3
451: Func(2,7): SendEvent
452: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
453: pop param 'no_wake'
454: pop param 'data'
455: pop param 'script_name'
456: pop param 'nerve_name'
457: pop param 'npc'
var ev		:= struct;
458: decl local #5
459: struct
460: :=
461: #
ev.+type	:= NPCEVENT_STARTNERVE;
462: local #5
463: "type"
464: .+
465: 10485776L
466: := #
ev.+name	:= nerve_name;
467: local #5
468: "name"
469: .+
470: local #3
471: := #
ev.+script	:= script_name;
472: local #5
473: "script"
474: .+
475: local #2
476: := #
ev.+data	:= data;
477: local #5
478: "data"
479: .+
480: local #1
481: := #
ev.+WakeUp	:= no_wake;
482: local #5
483: "WakeUp"
484: .+
485: local #0
486: := #
ev.+process	:= GetProcess( GetPid() );
487: local #5
488: "process"
489: .+
490: Func(3,3): GetPid
491: Func(3,2): GetProcess
492: := #
return SendEvent( npc, ev );
493: local #4
494: local #5
495: Func(2,7): SendEvent
496: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
497: pop param 'no_wake'
498: pop param 'mode'
499: pop param 'npc'
var ev		:= struct;
500: decl local #3
501: struct
502: :=
503: #
ev.+type	:= NPCEVENT_WARMODE;
504: local #3
505: "type"
506: .+
507: 10485767L
508: := #
ev.+value	:= mode;
509: local #3
510: "value"
511: .+
512: local #1
513: := #
ev.+WakeUp	:= no_wake;
514: local #3
515: "WakeUp"
516: .+
517: local #0
518: := #
ev.+process	:= GetProcess( GetPid() );
519: local #3
520: "process"
521: .+
522: Func(3,3): GetPid
523: Func(3,2): GetProcess
524: := #
return SendEvent( npc, ev );
525: local #2
526: local #3
527: Func(2,7): SendEvent
528: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
529: pop param byref 'cfg_file'
530: pop param 'elem_name'
if( !cfg_file )
531: local #0
532: if true goto 536
cfg_file := Classes_GetSettingsCfgFile();
533: makelocal
534: jmp userfunc @557
535: local0 := 
var elem := cfg_file[elem_name];
536: decl local #2
537: local #0
538: local #1
539: [] 1
540: :=
541: #
if( elem.errortext )
542: local #2
543: get member 'errortext'
544: if false goto 555
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
545: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
546: local #1
547: +
548: "] ->"
549: +
550: local #2
551: get member 'errortext'
552: +
553: Func(3,1): SysLog
554: #
return elem;
555: local #2
556: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
557: decl local #0
558: ":classes:settings"
559: Func(5,0): ReadConfigFile
560: :=
561: #
if( cfg.errortext )
562: local #0
563: get member 'errortext'
564: if false goto 571
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
565: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
566: local #0
567: get member 'errortext'
568: +
569: Func(3,1): SysLog
570: #
return cfg;
571: local #0
572: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
573: pop param byref 'settings'
574: pop param byref 'dist'
575: pop param 'opponent'
576: pop param 'npc'
if( !opponent )
577: local #2
578: if true goto 582
return 1;
579: 1L
580: return
581: goto639
elseif( opponent.dead )
582: local #2
583: get member id 'dead' (39)
584: if false goto 588
return 1;
585: 1L
586: return
587: goto639
elseif( opponent.concealed )
588: local #2
589: get member id 'concealed' (33)
590: if false goto 594
return 1;
591: 1L
592: return
593: goto639
elseif( dist > 30 )
594: local #1
595: 30L
596: >
597: if false goto 601
return 1;
598: 1L
599: return
600: goto639
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
601: local #3
602: "#Peacemaking"
603: Func(2,2): GetObjProperty
604: Func(2,19): ReadGameClock
605: >
606: if false goto 610
return 1;
607: 1L
608: return
609: goto639
elseif( opponent.hidden )
610: local #2
611: get member id 'hidden' (32)
612: if false goto 626
if( !DetectHidden( npc, opponent ))
613: local #3
614: local #2
615: makelocal
616: jmp userfunc @1005
617: if true goto 623
pathfind_ticker += 1;
618: global #5
619: 1L
620: +=
621: #
622: goto625
pathfind_ticker := 0;
623: 0L
624: global5 := 
625: goto639
elseif( !CheckForPathLOS( npc, opponent, settings ))
626: local #3
627: local #2
628: local #0
629: makelocal
630: jmp userfunc @933
631: if true goto 637
pathfind_ticker += 1;
632: global #5
633: 1L
634: +=
635: #
636: goto639
pathfind_ticker := 0;
637: 0L
638: global5 := 
if( pathfind_ticker >= 60 )
639: global #5
640: 60L
641: >=
642: if false goto 645
return 1;
643: 1L
644: return
return 0;
645: 0L
646: return
c:/ZH099/scripts/include/facings.inc, Line 18
function IsFacing( mobile, x, y )
647: pop param 'y'
648: pop param 'x'
649: pop param 'mobile'
return( mobile.facing == GetFacing( mobile.x, mobile.y, x, y ));
650: local #2
651: get member id 'facing' (9)
652: local #2
653: get member id 'x' (0)
654: local #2
655: get member id 'y' (1)
656: local #1
657: local #0
658: Func(2,0): GetFacing
659: ==
660: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
661: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
662: decl local #1
663: local #0
664: "BattleCryWord"
665: Func(2,2): GetObjProperty
666: :=
667: #
if( battle_cry )
668: local #1
669: if false goto 679
AI_Speak( npc, battle_cry.RandomEntry() );
670: local #0
671: local #1
672: Call Method id randomentry (#101, 0 params)
673: "default"
674: 0L
675: 0L
676: makelocal
677: jmp userfunc @880
678: #
if( npc.hidden )
679: local #0
680: get member id 'hidden' (32)
681: if false goto 692
npc.hidden := 0;
682: local #0
683: 0L
684: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
685: local #0
686: "*Springs from hiding!*"
687: 3L
688: 55L
689: 0L
690: Func(2,6): PrintTextAbove
691: #
return 1;
692: 1L
693: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 20
function NPC_WeaponRanges( npc, byref min_range, byref max_range )
694: pop param byref 'max_range'
695: pop param byref 'min_range'
696: pop param 'npc'
min_range := CInt( CS_GetWeaponInfo( npc.weapon, "MinRange" ));
697: local #2
698: get member id 'weapon' (42)
699: "MinRange"
700: makelocal
701: jmp userfunc @987
702: Func(0,1): CInt
703: local1 := 
max_range := CInt( CS_GetWeaponInfo( npc.weapon, "MaxRange" ));
704: local #2
705: get member id 'weapon' (42)
706: "MaxRange"
707: makelocal
708: jmp userfunc @987
709: Func(0,1): CInt
710: local0 := 
if( !max_range )
711: local #0
712: if true goto 715
max_range := 1;
713: 1L
714: local0 := 
return 1;
715: 1L
716: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
717: pop param byref 'settings'
718: pop param 'opponent'
719: pop param 'npc'
return 0;
720: 0L
721: return
if( opponent.IsA( POLCLASS_NPC ))
722: local #1
723: 4L
724: Call Method id isa (#0, 1 params)
725: if false goto 728
return 0;
726: 0L
727: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
728: decl local #3
729: local #2
730: local #0
731: "FleeLevel"
732: [] 1
733: makelocal
734: jmp userfunc @1284
735: :=
736: #
if( flee_level > AP_GetVital( npc, "Hits" ))
737: local #3
738: local #2
739: "Hits"
740: makelocal
741: jmp userfunc @924
742: >
743: if false goto 746
return 1;
744: 1L
745: return
return 0;
746: 0L
747: return
C:\ZH099\pkg\systems\brainAI\scripts\combat\spellCombat.src, Line 83
function SpellAttack( npc, opponent, byref nsettings, byref dist )
748: pop param byref 'dist'
749: pop param byref 'nsettings'
750: pop param 'opponent'
751: pop param 'npc'
if( GetObjProperty( npc, "#Casting" ))
752: local #3
753: "#Casting"
754: Func(2,2): GetObjProperty
755: if false goto 759
return 0;
756: 0L
757: return
758: goto794
elseif( CInt( GetObjProperty( npc, "#NextCast" )) > ReadGameClock() )
759: local #3
760: "#NextCast"
761: Func(2,2): GetObjProperty
762: Func(0,1): CInt
763: Func(2,19): ReadGameClock
764: >
765: if false goto 769
return 0;
766: 0L
767: return
768: goto794
elseif( AP_GetVital( npc, MANA ) <= 10 )
769: local #3
770: "Mana"
771: makelocal
772: jmp userfunc @924
773: 10L
774: <=
775: if false goto 779
return 0;
776: 0L
777: return
778: goto794
elseif( !CheckLineOfSight( npc, opponent ))
779: local #3
780: local #2
781: Func(2,48): CheckLineOfSight
782: if true goto 786
return 0;
783: 0L
784: return
785: goto794
elseif( dist > nsettings["MaxRange"] )
786: local #0
787: local #1
788: "MaxRange"
789: [] 1
790: >
791: if false goto 794
return 0;
792: 0L
793: return
var npc_elem := NPC_GetNPCConfig( npc.npctemplate ),
794: decl local #4
795: local #3
796: get member id 'npctemplate' (62)
797: makelocal
798: jmp userfunc @1298
799: :=
800: #
801: decl local #5
802: local #4
803: "Spell"
804: Func(5,2): GetConfigStringArray
805: :=
806: #
807: decl local #6
808: local #5
809: Call Method id randomentry (#101, 0 params)
810: " "
811: Func(0,7): SplitWords
812: :=
813: #
814: decl local #7
815: local #6
816: 1L
817: [] 1
818: makelocal
819: jmp userfunc @1455
820: :=
821: #
if( !spell_id )
822: local #7
823: if true goto 827
return 0;
824: 0L
825: return
826: goto837
elseif( RandomInt(100) >= CInt( cast_spell[2] ))
827: 100L
828: Func(8,2): RandomInt
829: local #6
830: 2L
831: [] 1
832: Func(0,1): CInt
833: >=
834: if false goto 837
return 0;
835: 0L
836: return
var script := Start_Script( ":magery:spellStarter", array{npc, spell_id, 0, opp
837: decl local #8
838: ":magery:spellStarter"
839: array
840: local #3
841: init{}
842: local #7
843: init{}
844: 0L
845: init{}
846: local #2
847: init{}
848: local #1
849: "SpellWords"
850: [] 1
851: !
852: init{}
853: Func(3,4): Start_Script
854: :=
855: #
if( script.errortext )
856: local #8
857: get member 'errortext'
858: if false goto 869
PrintTextAbove( npc, script.errortext );
859: local #3
860: local #8
861: get member 'errortext'
862: 3L
863: 1000L
864: 0L
865: Func(2,6): PrintTextAbove
866: #
return 0;
867: 0L
868: return
SetObjProperty( npc, "#NextCast", ReadGameClock()+nsettings["CastWait"] );
869: local #3
870: "#NextCast"
871: Func(2,19): ReadGameClock
872: local #1
873: "CastWait"
874: [] 1
875: +
876: Func(2,3): SetObjProperty
877: #
return 1;
878: 1L
879: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
880: pop param 'no_wake'
881: pop param 'do_event'
882: pop param 'text_type'
883: pop param 'text'
884: pop param 'npc'
var ev		:= struct;
885: decl local #5
886: struct
887: :=
888: #
ev.+type	:= NPCEVENT_SPEAK;
889: local #5
890: "type"
891: .+
892: 10485765L
893: := #
ev.+text	:= text;
894: local #5
895: "text"
896: .+
897: local #3
898: := #
ev.+texttype	:= text_type;
899: local #5
900: "texttype"
901: .+
902: local #2
903: := #
ev.+doevent	:= do_event;
904: local #5
905: "doevent"
906: .+
907: local #1
908: := #
ev.+WakeUp	:= no_wake;
909: local #5
910: "WakeUp"
911: .+
912: local #0
913: := #
ev.+process	:= GetProcess( GetPid() );
914: local #5
915: "process"
916: .+
917: Func(3,3): GetPid
918: Func(3,2): GetProcess
919: := #
return SendEvent( npc, ev );
920: local #4
921: local #5
922: Func(2,7): SendEvent
923: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
924: pop param 'vital_name'
925: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
926: local #1
927: local #0
928: Func(6,1): GetVital
929: Func(0,2): CDbl
930: 100LF
931: /
932: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
933: pop param 'settings'
934: pop param 'destination'
935: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
936: local #2
937: local #1
938: get member id 'x' (0)
939: local #1
940: get member id 'y' (1)
941: local #1
942: get member id 'z' (2)
943: Func(2,11): CheckLosAt
944: if true goto 985
var pathfind_range := CInt( settings["AreaSize"] );
945: decl local #0
946: local #0
947: "AreaSize"
948: [] 1
949: Func(0,1): CInt
950: :=
951: #
if( pathfind_range < 5 )
952: local #3
953: 5L
954: <
955: if false goto 958
pathfind_range := 5;
956: 5L
957: local3 := 
var flags := FP_IGNORE_MOBILES;
958: decl local #1
959: 1L
960: :=
961: #
if( settings["OpenDoors"] )
962: local #0
963: "OpenDoors"
964: [] 1
965: if false goto 970
flags += FP_IGNORE_DOORS;
966: local #4
967: 2L
968: +=
969: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
970: local #2
971: local #1
972: get member id 'x' (0)
973: local #1
974: get member id 'y' (1)
975: local #1
976: get member id 'z' (2)
977: local #3
978: local #4
979: makelocal
980: jmp userfunc @1089
981: if true goto 984
return 0;
982: 0L
983: return
984: leave block(2)
return 1;
985: 1L
986: return
c:/ZH099/pkg/items/weapons/include/weaponInfo.inc, Line 8
function CS_GetWeaponInfo( weapon, prop_name )
987: pop param 'prop_name'
988: pop param 'weapon'
var config := ReadConfigFile( ":*:itemdesc" );
989: decl local #2
990: ":*:itemdesc"
991: Func(5,0): ReadConfigFile
992: :=
993: #
var info := config[weapon.objtype];
994: decl local #3
995: local #2
996: local #1
997: get member id 'objtype' (4)
998: [] 1
999: :=
1000: #
return GetConfigString( info, prop_name );
1001: local #3
1002: local #0
1003: Func(5,6): GetConfigString
1004: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
1005: pop param 'hider'
1006: pop param 'mobile'
if( !hider.hidden )
1007: local #0
1008: get member id 'hidden' (32)
1009: if true goto 1012
return 1; //Already revealed.
1010: 1L
1011: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
1012: decl local #2
1013: local #1
1014: "DetectingHidden"
1015: makelocal
1016: jmp userfunc @1471
1017: :=
1018: #
1019: decl local #3
1020: local #0
1021: "Hiding"
1022: makelocal
1023: jmp userfunc @1471
1024: :=
1025: #
mobile_skill *= ClasseBonus( mobile, THIEF );
1026: local #2
1027: local #1
1028: "IsThief"
1029: makelocal
1030: jmp userfunc @1510
1031: *=
1032: #
hider_skill *= ClasseBonus( hider, THIEF );
1033: local #3
1034: local #0
1035: "IsThief"
1036: makelocal
1037: jmp userfunc @1510
1038: *=
1039: #
if( mobile.IsA( POLCLASS_NPC ))
1040: local #1
1041: 4L
1042: Call Method id isa (#0, 1 params)
1043: if false goto 1052
if( !mobile_skill )
1044: local #2
1045: if true goto 1048
return 0;
1046: 0L
1047: return
mobile_skill *= 2;
1048: local #2
1049: 2L
1050: *=
1051: #
var chance := CInt( mobile_skill - hider_skill );
1052: decl local #4
1053: local #2
1054: local #3
1055: -
1056: Func(0,1): CInt
1057: :=
1058: #
if( chance < 0 )
1059: local #4
1060: 0L
1061: <
1062: if false goto 1065
chance := 5;
1063: 5L
1064: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
1065: 100L
1066: Func(8,2): RandomInt
1067: local #4
1068: >
1069: local #1
1070: get member id 'multi' (12)
1071: !
1072: &&
1073: if false goto 1076
return 0;
1074: 0L
1075: return
hider.hidden := 0;
1076: local #0
1077: 0L
1078: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
1079: local #0
1080: "You have been discovered!"
1081: local #0
1082: 3L
1083: 1000L
1084: 0L
1085: Func(2,29): PrintTextAbovePrivate
1086: #
return 1;
1087: 1L
1088: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
1089: pop param 'flags'
1090: pop param 'pathfind_range'
1091: pop param 'z'
1092: pop param 'y'
1093: pop param 'x'
1094: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
1095: decl local #6
1096: local #5
1097: get member id 'x' (0)
1098: local #5
1099: get member id 'y' (1)
1100: local #5
1101: get member id 'z' (2)
1102: 2L
1103: local #5
1104: get member id 'realm' (112)
1105: Func(2,31): ListItemsNearLocation
1106: :=
1107: #
foreach item in search_field
1108: local #6
1109: initforeach @1192
SleepMS(5);
1110: 5L
1111: Func(3,0): Sleepms
1112: #
if( item.movable ) //Automatic Anti-Blocking with items.
1113: local #7
1114: get member id 'movable' (20)
1115: if false goto 1155
var npc_backpack := NPC_SetupBackPack( npc );
1116: decl local #0
1117: local #5
1118: makelocal
1119: jmp userfunc @1417
1120: :=
1121: #
var move_item := MoveItemToContainer( item, npc_backpack );
1122: decl local #1
1123: local #7
1124: local #10
1125: -1L
1126: -1L
1127: Func(2,30): MoveItemToContainer
1128: :=
1129: #
if( move_item.errortext )
1130: local #11
1131: get member 'errortext'
1132: if false goto 1145
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
1133: local #5
1134: "Error looting items -->"
1135: local #11
1136: get member 'errortext'
1137: +
1138: 3L
1139: 1000L
1140: 0L
1141: Func(2,6): PrintTextAbove
1142: #
continue;
1143: leave block(2)
1144: goto1192
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
1145: local #5
1146: "*Yoink*"
1147: "yell"
1148: 1L
1149: 0L
1150: makelocal
1151: jmp userfunc @880
1152: #
1153: leave block(2)
1154: goto1192
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
1155: local #5
1156: "Magery"
1157: makelocal
1158: jmp userfunc @1471
1159: local #7
1160: "SummonedField"
1161: Func(2,2): GetObjProperty
1162: &&
1163: if false goto 1192
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
1164: decl local #0
1165: ":magery:spellStarter"
1166: array
1167: local #5
1168: init{}
1169: 34L
1170: init{}
1171: 0L
1172: init{}
1173: local #7
1174: init{}
1175: Func(3,4): Start_Script
1176: :=
1177: #
if( script.errortext )
1178: local #10
1179: get member 'errortext'
1180: if false goto 1189
PrintTextAbove( npc, script.errortext );
1181: local #5
1182: local #10
1183: get member 'errortext'
1184: 3L
1185: 1000L
1186: 0L
1187: Func(2,6): PrintTextAbove
1188: #
break;
1189: leave block(1)
1190: goto1193
1191: leave block(1)
1192: stepforeach @1110
1193: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1194: decl local #7
1195: local #5
1196: get member id 'x' (0)
1197: local #5
1198: get member id 'y' (1)
1199: local #5
1200: get member id 'z' (2)
1201: local #4
1202: local #3
1203: local #2
1204: local #5
1205: get member id 'realm' (112)
1206: local #0
1207: local #1
1208: Func(2,32): FindPath
1209: :=
1210: #
if( !path )
1211: local #7
1212: if true goto 1215
return 0;
1213: 0L
1214: return
var move_x := CInt( path[1].x ),
1215: decl local #8
1216: local #7
1217: 1L
1218: [] 1
1219: get member id 'x' (0)
1220: Func(0,1): CInt
1221: :=
1222: #
1223: decl local #9
1224: local #7
1225: 1L
1226: [] 1
1227: get member id 'y' (1)
1228: Func(0,1): CInt
1229: :=
1230: #
1231: decl local #10
1232: local #7
1233: 1L
1234: [] 1
1235: get member id 'z' (2)
1236: Func(0,1): CInt
1237: :=
1238: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1239: decl local #11
1240: local #8
1241: local #9
1242: local #10
1243: local #5
1244: get member id 'realm' (112)
1245: Func(2,33): ListItemsAtLocation
1246: :=
1247: #
if( search_doors.Size() )
1248: local #11
1249: Call Method id size (#48, 0 params)
1250: if false goto 1278
foreach item in search_doors
1251: local #11
1252: initforeach @1276
if( item.IsDoor() )
1253: local #12
1254: Call Method isdoor (0 params)
1255: if false goto 1272
if( item.locked )
1256: local #12
1257: get member id 'locked' (70)
1258: if false goto 1262
return 0;
1259: 0L
1260: return
1261: goto1266
elseif( item.IsOpen() )
1262: local #12
1263: Call Method isopen (0 params)
1264: if false goto 1266
break;
1265: goto1277
UseItem( item, npc );
1266: local #12
1267: local #5
1268: Func(2,34): UseItem
1269: #
break;
1270: goto1277
1271: goto1273
continue;
1272: goto1276
SleepMS(5);
1273: 5L
1274: Func(3,0): Sleepms
1275: #
1276: stepforeach @1253
1277: leave block(3)
return array{move_x, mobe_y};
1278: array
1279: local #8
1280: init{}
1281: local #9
1282: init{}
1283: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1284: pop param 'flee_percent'
1285: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1286: local #1
1287: "Hits"
1288: makelocal
1289: jmp userfunc @1501
1290: Func(0,2): CDbl
1291: local #0
1292: Func(0,2): CDbl
1293: 100LF
1294: /
1295: *
1296: Func(0,1): CInt
1297: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1298: pop param 'template'
if( !template.package )
1299: local #0
1300: get member 'package'
1301: if true goto 1306
template := NPC_ParseTemplateName( template );
1302: local #0
1303: makelocal
1304: jmp userfunc @1355
1305: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1306: decl local #1
1307: ":"
1308: local #0
1309: get member 'package'
1310: +
1311: ":npcdesc"
1312: +
1313: Func(5,0): ReadConfigFile
1314: :=
1315: #
if( npc_cfg.errortext )
1316: local #1
1317: get member 'errortext'
1318: if false goto 1331
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1319: error
1320: "Error::NPC_GetNPCConfig() - Could not open :"
1321: local #0
1322: get member 'package'
1323: +
1324: ":npcdesc ->"
1325: +
1326: local #1
1327: get member 'errortext'
1328: +
1329: addmember-assign(errortext)
1330: return
var cfg_elem := npc_cfg[template.template];
1331: decl local #2
1332: local #1
1333: local #0
1334: get member 'template'
1335: [] 1
1336: :=
1337: #
if( cfg_elem.errortext )
1338: local #2
1339: get member 'errortext'
1340: if false goto 1353
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1341: error
1342: "Error::NPC_GetNPCConfig() - Could not find elem ["
1343: local #0
1344: get member 'template'
1345: +
1346: "] ->"
1347: +
1348: local #2
1349: get member 'errortext'
1350: +
1351: addmember-assign(errortext)
1352: return
return cfg_elem;
1353: local #2
1354: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1355: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1356: local #0
1357: 4L
1358: Call Method id isa (#0, 1 params)
1359: if false goto 1363
template_name := template_name.npctemplate;
1360: local #0
1361: get member id 'npctemplate' (62)
1362: local0 := 
var colon_a := Find( template_name, ":", 1 );
1363: decl local #1
1364: local #0
1365: ":"
1366: 1L
1367: Func(0,8): Find
1368: :=
1369: #
var colon_b := Find( template_name, ":", 2 );
1370: decl local #2
1371: local #0
1372: ":"
1373: 2L
1374: Func(0,8): Find
1375: :=
1376: #
var parsed := struct{"package", "template"};
1377: decl local #3
1378: struct
1379: addmember(package)
1380: addmember(template)
1381: :=
1382: #
if( !colon_a || !colon_b )
1383: local #1
1384: !
1385: local #2
1386: !
1387: ||
1388: if false goto 1396
parsed.package := "";
1389: local #3
1390: ""
1391: set member 'package' #
parsed.template := template_name;
1392: local #3
1393: local #0
1394: set member 'template' #
1395: goto1415
parsed.package := template_name[colon_a+1, colon_b-2];
1396: local #3
1397: local #0
1398: local #1
1399: 1L
1400: +
1401: local #2
1402: 2L
1403: -
1404: [,]
1405: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1406: local #3
1407: local #0
1408: local #2
1409: 1L
1410: +
1411: local #0
1412: Func(0,3): Len
1413: [,]
1414: set member 'template' #
return parsed;
1415: local #3
1416: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1417: pop param 'mobile'
if( !mobile.backpack )
1418: local #0
1419: get member id 'backpack' (41)
1420: if true goto 1452
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1421: decl local #0
1422: local #0
1423: get member id 'x' (0)
1424: local #0
1425: get member id 'y' (1)
1426: local #0
1427: get member id 'z' (2)
1428: "BackPack"
1429: 1L
1430: local #0
1431: get member id 'realm' (112)
1432: Func(2,21): CreateItemAtLocation
1433: :=
1434: #
var result := EquipItem( mobile, backpack );
1435: decl local #1
1436: local #0
1437: local #1
1438: Func(2,22): EquipItem
1439: :=
1440: #
if( !result )
1441: local #2
1442: if true goto 1449
DestroyItem( backpack );
1443: local #1
1444: Func(2,23): DestroyItem
1445: #
return result;
1446: local #2
1447: return
1448: goto1451
return backpack;
1449: local #1
1450: return
1451: leave block(2)
return mobile.backpack;
1452: local #0
1453: get member id 'backpack' (41)
1454: return
c:/ZH099/pkg/systems/spells/include/spells_ex.inc, Line 12
function SPELL_SpellNameToId( spell_name )
1455: pop param 'spell_name'
var spellex_cfg := ReadConfigFile( ":spells:spells_ex" );
1456: decl local #1
1457: ":spells:spells_ex"
1458: Func(5,0): ReadConfigFile
1459: :=
1460: #
var cfg_elem := spellex_cfg["NameToId"];
1461: decl local #2
1462: local #1
1463: "NameToId"
1464: [] 1
1465: :=
1466: #
return GetConfigInt( cfg_elem, spell_name );
1467: local #2
1468: local #0
1469: Func(5,7): GetConfigInt
1470: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1471: pop param 'skill_name'
1472: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1473: local #1
1474: local #0
1475: makelocal
1476: jmp userfunc @1492
1477: local #1
1478: local #0
1479: makelocal
1480: jmp userfunc @1483
1481: +
1482: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1483: pop param 'skill_name'
1484: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1485: local #1
1486: local #0
1487: Func(7,1): GetAttributeTemporaryMod
1488: Func(0,2): CDbl
1489: 10LF
1490: /
1491: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1492: pop param 'skill_name'
1493: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1494: local #1
1495: local #0
1496: Func(7,0): GetAttributeBaseValue
1497: Func(0,2): CDbl
1498: 10LF
1499: /
1500: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1501: pop param 'vital_name'
1502: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1503: local #1
1504: local #0
1505: Func(6,2): GetVitalMaximumValue
1506: Func(0,2): CDbl
1507: 100LF
1508: /
1509: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1510: pop param 'classe'
1511: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1512: decl local #2
1513: local #1
1514: local #0
1515: Func(2,2): GetObjProperty
1516: Func(0,1): CInt
1517: :=
1518: #
if( level )
1519: local #2
1520: if false goto 1530
return CDbl( settings.BonusLevel * level ) + 1;
1521: global #0
1522: get member 'BonusLevel'
1523: local #2
1524: *
1525: Func(0,2): CDbl
1526: 1L
1527: +
1528: return
1529: goto1532
return 1;
1530: 1L
1531: return
1532: 0L
1533: return
