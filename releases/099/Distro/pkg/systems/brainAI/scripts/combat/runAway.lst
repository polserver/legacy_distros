c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @387
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\runAway.src, Line 19
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\runAway.src, Line 21
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @505
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
while( npc )
101: local #1
102: if false goto 171
var dist := Distance( npc, opponent );
103: decl local #0
104: local #1
105: local #6
106: Func(2,4): Distance
107: :=
108: #
if( DoneFighting( npc, opponent, dist, bsettings ))
109: local #1
110: local #6
111: local #7
112: local #4
113: makelocal
114: jmp userfunc @431
115: if false goto 147
if( scripts.Exists( "EndFight" ))
116: local #5
117: "EndFight"
118: Call Method id exists (#55, 1 params)
119: if false goto 132
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
120: local #1
121: "EndFight"
122: local #5
123: "EndFight"
124: [] 1
125: get member id 'script' (61)
126: local #0
127: 0L
128: makelocal
129: jmp userfunc @311
130: #
131: goto138
AI_WarMode( npc, 0 );
132: local #1
133: 0L
134: 0L
135: makelocal
136: jmp userfunc @355
137: #
AI_EndNerve( npc, nerve_name );
138: local #1
139: local #2
140: 0L
141: makelocal
142: jmp userfunc @217
143: #
break;
144: leave block(1)
145: goto171
146: goto161
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, 20 )
147: local #1
148: local #6
149: get member id 'x' (0)
150: local #6
151: get member id 'y' (1)
152: local #6
153: get member id 'z' (2)
154: 2L
155: 2L
156: 20L
157: 0L
158: makelocal
159: jmp userfunc @249
160: #
SleepMS(50);
161: 50L
162: Func(3,2): Sleepms
163: #
AI_ClearThoughts( npc, CLR_NERVE );
164: local #1
165: 2L
166: makelocal
167: jmp userfunc @175
168: #
169: leave block(1)
170: goto101
return 1;
171: 1L
172: progend
173: leave block(7)
174: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
175: pop param 'flags'
176: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
177: decl local #2
178: local #0
179: 1L
180: &
181: :=
182: #
var nerve	:= flags & CLR_NERVE;
183: decl local #3
184: local #0
185: 2L
186: &
187: :=
188: #
var both	:= flags & CLR_BOTH;
189: decl local #4
190: local #0
191: 3L
192: &
193: :=
194: #
if( both || brain )
195: local #4
196: local #2
197: ||
198: if false goto 205
brain := NPC.process;
199: local #1
200: get member id 'process' (64)
201: local2 := 
brain.clear_event_queue();
202: local #2
203: Call Method id clear_event_queue (#78, 0 params)
204: #
if( both || nerve )
205: local #4
206: local #3
207: ||
208: if false goto 215
nerve := GetProcess( GetPid() );
209: Func(3,4): GetPid
210: Func(3,1): GetProcess
211: local3 := 
nerve.clear_event_queue();
212: local #3
213: Call Method id clear_event_queue (#78, 0 params)
214: #
return 1;
215: 1L
216: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
217: pop param 'no_wake'
218: pop param 'nerve_name'
219: pop param 'npc'
var ev		:= struct;
220: decl local #3
221: struct
222: :=
223: #
ev.+type	:= NPCEVENT_ENDNERVE;
224: local #3
225: "type"
226: .+
227: 10485775L
228: := #
ev.+name	:= nerve_name;
229: local #3
230: "name"
231: .+
232: local #1
233: := #
ev.+WakeUp	:= no_wake;
234: local #3
235: "WakeUp"
236: .+
237: local #0
238: := #
ev.+process	:= GetProcess( GetPid() );
239: local #3
240: "process"
241: .+
242: Func(3,4): GetPid
243: Func(3,1): GetProcess
244: := #
return SendEvent( npc, ev );
245: local #2
246: local #3
247: Func(2,3): SendEvent
248: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
249: pop param 'no_wake'
250: pop param 'loop'
251: pop param 'speed'
252: pop param 'to_from'
253: pop param 'z'
254: pop param 'y'
255: pop param 'x'
256: pop param 'npc'
var ev		:= struct;
257: decl local #8
258: struct
259: :=
260: #
ev.+type	:= NPCEVENT_MOVE;
261: local #8
262: "type"
263: .+
264: 10485763L
265: := #
ev.+x		:= x;
266: local #8
267: "x"
268: .+
269: local #6
270: := #
ev.+y		:= y;
271: local #8
272: "y"
273: .+
274: local #5
275: := #
ev.+z		:= z;
276: local #8
277: "z"
278: .+
279: local #4
280: := #
ev.+direction	:= to_from;
281: local #8
282: "direction"
283: .+
284: local #3
285: := #
ev.+speed	:= speed;
286: local #8
287: "speed"
288: .+
289: local #2
290: := #
ev.+WakeUp	:= no_wake;
291: local #8
292: "WakeUp"
293: .+
294: local #0
295: := #
ev.+loop	:= loop;
296: local #8
297: "loop"
298: .+
299: local #1
300: := #
ev.+process	:= GetProcess( GetPid() );
301: local #8
302: "process"
303: .+
304: Func(3,4): GetPid
305: Func(3,1): GetProcess
306: := #
return SendEvent( npc, ev );
307: local #7
308: local #8
309: Func(2,3): SendEvent
310: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
311: pop param 'no_wake'
312: pop param 'data'
313: pop param 'script_name'
314: pop param 'nerve_name'
315: pop param 'npc'
var ev		:= struct;
316: decl local #5
317: struct
318: :=
319: #
ev.+type	:= NPCEVENT_STARTNERVE;
320: local #5
321: "type"
322: .+
323: 10485776L
324: := #
ev.+name	:= nerve_name;
325: local #5
326: "name"
327: .+
328: local #3
329: := #
ev.+script	:= script_name;
330: local #5
331: "script"
332: .+
333: local #2
334: := #
ev.+data	:= data;
335: local #5
336: "data"
337: .+
338: local #1
339: := #
ev.+WakeUp	:= no_wake;
340: local #5
341: "WakeUp"
342: .+
343: local #0
344: := #
ev.+process	:= GetProcess( GetPid() );
345: local #5
346: "process"
347: .+
348: Func(3,4): GetPid
349: Func(3,1): GetProcess
350: := #
return SendEvent( npc, ev );
351: local #4
352: local #5
353: Func(2,3): SendEvent
354: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
355: pop param 'no_wake'
356: pop param 'mode'
357: pop param 'npc'
var ev		:= struct;
358: decl local #3
359: struct
360: :=
361: #
ev.+type	:= NPCEVENT_WARMODE;
362: local #3
363: "type"
364: .+
365: 10485767L
366: := #
ev.+value	:= mode;
367: local #3
368: "value"
369: .+
370: local #1
371: := #
ev.+WakeUp	:= no_wake;
372: local #3
373: "WakeUp"
374: .+
375: local #0
376: := #
ev.+process	:= GetProcess( GetPid() );
377: local #3
378: "process"
379: .+
380: Func(3,4): GetPid
381: Func(3,1): GetProcess
382: := #
return SendEvent( npc, ev );
383: local #2
384: local #3
385: Func(2,3): SendEvent
386: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
387: pop param byref 'cfg_file'
388: pop param 'elem_name'
if( !cfg_file )
389: local #0
390: if true goto 394
cfg_file := Classes_GetSettingsCfgFile();
391: makelocal
392: jmp userfunc @415
393: local0 := 
var elem := cfg_file[elem_name];
394: decl local #2
395: local #0
396: local #1
397: [] 1
398: :=
399: #
if( elem.errortext )
400: local #2
401: get member 'errortext'
402: if false goto 413
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
403: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
404: local #1
405: +
406: "] ->"
407: +
408: local #2
409: get member 'errortext'
410: +
411: Func(3,0): SysLog
412: #
return elem;
413: local #2
414: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
415: decl local #0
416: ":classes:settings"
417: Func(5,0): ReadConfigFile
418: :=
419: #
if( cfg.errortext )
420: local #0
421: get member 'errortext'
422: if false goto 429
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
423: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
424: local #0
425: get member 'errortext'
426: +
427: Func(3,0): SysLog
428: #
return cfg;
429: local #0
430: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
431: pop param byref 'settings'
432: pop param byref 'dist'
433: pop param 'opponent'
434: pop param 'npc'
if( !opponent )
435: local #2
436: if true goto 440
return 1;
437: 1L
438: return
439: goto497
elseif( opponent.dead )
440: local #2
441: get member id 'dead' (39)
442: if false goto 446
return 1;
443: 1L
444: return
445: goto497
elseif( opponent.concealed )
446: local #2
447: get member id 'concealed' (33)
448: if false goto 452
return 1;
449: 1L
450: return
451: goto497
elseif( dist > 30 )
452: local #1
453: 30L
454: >
455: if false goto 459
return 1;
456: 1L
457: return
458: goto497
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
459: local #3
460: "#Peacemaking"
461: Func(2,2): GetObjProperty
462: Func(2,18): ReadGameClock
463: >
464: if false goto 468
return 1;
465: 1L
466: return
467: goto497
elseif( opponent.hidden )
468: local #2
469: get member id 'hidden' (32)
470: if false goto 484
if( !DetectHidden( npc, opponent ))
471: local #3
472: local #2
473: makelocal
474: jmp userfunc @636
475: if true goto 481
pathfind_ticker += 1;
476: global #5
477: 1L
478: +=
479: #
480: goto483
pathfind_ticker := 0;
481: 0L
482: global5 := 
483: goto497
elseif( !CheckForPathLOS( npc, opponent, settings ))
484: local #3
485: local #2
486: local #0
487: makelocal
488: jmp userfunc @582
489: if true goto 495
pathfind_ticker += 1;
490: global #5
491: 1L
492: +=
493: #
494: goto497
pathfind_ticker := 0;
495: 0L
496: global5 := 
if( pathfind_ticker >= 60 )
497: global #5
498: 60L
499: >=
500: if false goto 503
return 1;
501: 1L
502: return
return 0;
503: 0L
504: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
505: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
506: decl local #1
507: local #0
508: "BattleCryWord"
509: Func(2,2): GetObjProperty
510: :=
511: #
if( battle_cry )
512: local #1
513: if false goto 523
AI_Speak( npc, battle_cry.RandomEntry() );
514: local #0
515: local #1
516: Call Method id randomentry (#101, 0 params)
517: "default"
518: 0L
519: 0L
520: makelocal
521: jmp userfunc @538
522: #
if( npc.hidden )
523: local #0
524: get member id 'hidden' (32)
525: if false goto 536
npc.hidden := 0;
526: local #0
527: 0L
528: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
529: local #0
530: "*Springs from hiding!*"
531: 3L
532: 55L
533: 0L
534: Func(2,0): PrintTextAbove
535: #
return 1;
536: 1L
537: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
538: pop param 'no_wake'
539: pop param 'do_event'
540: pop param 'text_type'
541: pop param 'text'
542: pop param 'npc'
var ev		:= struct;
543: decl local #5
544: struct
545: :=
546: #
ev.+type	:= NPCEVENT_SPEAK;
547: local #5
548: "type"
549: .+
550: 10485765L
551: := #
ev.+text	:= text;
552: local #5
553: "text"
554: .+
555: local #3
556: := #
ev.+texttype	:= text_type;
557: local #5
558: "texttype"
559: .+
560: local #2
561: := #
ev.+doevent	:= do_event;
562: local #5
563: "doevent"
564: .+
565: local #1
566: := #
ev.+WakeUp	:= no_wake;
567: local #5
568: "WakeUp"
569: .+
570: local #0
571: := #
ev.+process	:= GetProcess( GetPid() );
572: local #5
573: "process"
574: .+
575: Func(3,4): GetPid
576: Func(3,1): GetProcess
577: := #
return SendEvent( npc, ev );
578: local #4
579: local #5
580: Func(2,3): SendEvent
581: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
582: pop param 'settings'
583: pop param 'destination'
584: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
585: local #2
586: local #1
587: get member id 'x' (0)
588: local #1
589: get member id 'y' (1)
590: local #1
591: get member id 'z' (2)
592: Func(2,10): CheckLosAt
593: if true goto 634
var pathfind_range := CInt( settings["AreaSize"] );
594: decl local #0
595: local #0
596: "AreaSize"
597: [] 1
598: Func(0,2): CInt
599: :=
600: #
if( pathfind_range < 5 )
601: local #3
602: 5L
603: <
604: if false goto 607
pathfind_range := 5;
605: 5L
606: local3 := 
var flags := FP_IGNORE_MOBILES;
607: decl local #1
608: 1L
609: :=
610: #
if( settings["OpenDoors"] )
611: local #0
612: "OpenDoors"
613: [] 1
614: if false goto 619
flags += FP_IGNORE_DOORS;
615: local #4
616: 2L
617: +=
618: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
619: local #2
620: local #1
621: get member id 'x' (0)
622: local #1
623: get member id 'y' (1)
624: local #1
625: get member id 'z' (2)
626: local #3
627: local #4
628: makelocal
629: jmp userfunc @720
630: if true goto 633
return 0;
631: 0L
632: return
633: leave block(2)
return 1;
634: 1L
635: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
636: pop param 'hider'
637: pop param 'mobile'
if( !hider.hidden )
638: local #0
639: get member id 'hidden' (32)
640: if true goto 643
return 1; //Already revealed.
641: 1L
642: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
643: decl local #2
644: local #1
645: "DetectingHidden"
646: makelocal
647: jmp userfunc @953
648: :=
649: #
650: decl local #3
651: local #0
652: "Hiding"
653: makelocal
654: jmp userfunc @953
655: :=
656: #
mobile_skill *= ClasseBonus( mobile, THIEF );
657: local #2
658: local #1
659: "IsThief"
660: makelocal
661: jmp userfunc @983
662: *=
663: #
hider_skill *= ClasseBonus( hider, THIEF );
664: local #3
665: local #0
666: "IsThief"
667: makelocal
668: jmp userfunc @983
669: *=
670: #
if( mobile.IsA( POLCLASS_NPC ))
671: local #1
672: 4L
673: Call Method id isa (#0, 1 params)
674: if false goto 683
if( !mobile_skill )
675: local #2
676: if true goto 679
return 0;
677: 0L
678: return
mobile_skill *= 2;
679: local #2
680: 2L
681: *=
682: #
var chance := CInt( mobile_skill - hider_skill );
683: decl local #4
684: local #2
685: local #3
686: -
687: Func(0,2): CInt
688: :=
689: #
if( chance < 0 )
690: local #4
691: 0L
692: <
693: if false goto 696
chance := 5;
694: 5L
695: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
696: 100L
697: Func(8,2): RandomInt
698: local #4
699: >
700: local #1
701: get member id 'multi' (12)
702: !
703: &&
704: if false goto 707
return 0;
705: 0L
706: return
hider.hidden := 0;
707: local #0
708: 0L
709: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
710: local #0
711: "You have been discovered!"
712: local #0
713: 3L
714: 1000L
715: 0L
716: Func(2,28): PrintTextAbovePrivate
717: #
return 1;
718: 1L
719: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
720: pop param 'flags'
721: pop param 'pathfind_range'
722: pop param 'z'
723: pop param 'y'
724: pop param 'x'
725: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
726: decl local #6
727: local #5
728: get member id 'x' (0)
729: local #5
730: get member id 'y' (1)
731: local #5
732: get member id 'z' (2)
733: 2L
734: local #5
735: get member id 'realm' (112)
736: Func(2,30): ListItemsNearLocation
737: :=
738: #
foreach item in search_field
739: local #6
740: initforeach @823
SleepMS(5);
741: 5L
742: Func(3,2): Sleepms
743: #
if( item.movable ) //Automatic Anti-Blocking with items.
744: local #7
745: get member id 'movable' (20)
746: if false goto 786
var npc_backpack := NPC_SetupBackPack( npc );
747: decl local #0
748: local #5
749: makelocal
750: jmp userfunc @915
751: :=
752: #
var move_item := MoveItemToContainer( item, npc_backpack );
753: decl local #1
754: local #7
755: local #10
756: -1L
757: -1L
758: Func(2,29): MoveItemToContainer
759: :=
760: #
if( move_item.errortext )
761: local #11
762: get member 'errortext'
763: if false goto 776
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
764: local #5
765: "Error looting items -->"
766: local #11
767: get member 'errortext'
768: +
769: 3L
770: 1000L
771: 0L
772: Func(2,0): PrintTextAbove
773: #
continue;
774: leave block(2)
775: goto823
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
776: local #5
777: "*Yoink*"
778: "yell"
779: 1L
780: 0L
781: makelocal
782: jmp userfunc @538
783: #
784: leave block(2)
785: goto823
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
786: local #5
787: "Magery"
788: makelocal
789: jmp userfunc @953
790: local #7
791: "SummonedField"
792: Func(2,2): GetObjProperty
793: &&
794: if false goto 823
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
795: decl local #0
796: ":magery:spellStarter"
797: array
798: local #5
799: init{}
800: 34L
801: init{}
802: 0L
803: init{}
804: local #7
805: init{}
806: Func(3,3): Start_Script
807: :=
808: #
if( script.errortext )
809: local #10
810: get member 'errortext'
811: if false goto 820
PrintTextAbove( npc, script.errortext );
812: local #5
813: local #10
814: get member 'errortext'
815: 3L
816: 1000L
817: 0L
818: Func(2,0): PrintTextAbove
819: #
break;
820: leave block(1)
821: goto824
822: leave block(1)
823: stepforeach @741
824: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
825: decl local #7
826: local #5
827: get member id 'x' (0)
828: local #5
829: get member id 'y' (1)
830: local #5
831: get member id 'z' (2)
832: local #4
833: local #3
834: local #2
835: local #5
836: get member id 'realm' (112)
837: local #0
838: local #1
839: Func(2,31): FindPath
840: :=
841: #
if( !path )
842: local #7
843: if true goto 846
return 0;
844: 0L
845: return
var move_x := CInt( path[1].x ),
846: decl local #8
847: local #7
848: 1L
849: [] 1
850: get member id 'x' (0)
851: Func(0,2): CInt
852: :=
853: #
854: decl local #9
855: local #7
856: 1L
857: [] 1
858: get member id 'y' (1)
859: Func(0,2): CInt
860: :=
861: #
862: decl local #10
863: local #7
864: 1L
865: [] 1
866: get member id 'z' (2)
867: Func(0,2): CInt
868: :=
869: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
870: decl local #11
871: local #8
872: local #9
873: local #10
874: local #5
875: get member id 'realm' (112)
876: Func(2,32): ListItemsAtLocation
877: :=
878: #
if( search_doors.Size() )
879: local #11
880: Call Method id size (#48, 0 params)
881: if false goto 909
foreach item in search_doors
882: local #11
883: initforeach @907
if( item.IsDoor() )
884: local #12
885: Call Method isdoor (0 params)
886: if false goto 903
if( item.locked )
887: local #12
888: get member id 'locked' (70)
889: if false goto 893
return 0;
890: 0L
891: return
892: goto897
elseif( item.IsOpen() )
893: local #12
894: Call Method isopen (0 params)
895: if false goto 897
break;
896: goto908
UseItem( item, npc );
897: local #12
898: local #5
899: Func(2,33): UseItem
900: #
break;
901: goto908
902: goto904
continue;
903: goto907
SleepMS(5);
904: 5L
905: Func(3,2): Sleepms
906: #
907: stepforeach @884
908: leave block(3)
return array{move_x, mobe_y};
909: array
910: local #8
911: init{}
912: local #9
913: init{}
914: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
915: pop param 'mobile'
if( !mobile.backpack )
916: local #0
917: get member id 'backpack' (41)
918: if true goto 950
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
919: decl local #0
920: local #0
921: get member id 'x' (0)
922: local #0
923: get member id 'y' (1)
924: local #0
925: get member id 'z' (2)
926: "BackPack"
927: 1L
928: local #0
929: get member id 'realm' (112)
930: Func(2,20): CreateItemAtLocation
931: :=
932: #
var result := EquipItem( mobile, backpack );
933: decl local #1
934: local #0
935: local #1
936: Func(2,21): EquipItem
937: :=
938: #
if( !result )
939: local #2
940: if true goto 947
DestroyItem( backpack );
941: local #1
942: Func(2,22): DestroyItem
943: #
return result;
944: local #2
945: return
946: goto949
return backpack;
947: local #1
948: return
949: leave block(2)
return mobile.backpack;
950: local #0
951: get member id 'backpack' (41)
952: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
953: pop param 'skill_name'
954: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
955: local #1
956: local #0
957: makelocal
958: jmp userfunc @974
959: local #1
960: local #0
961: makelocal
962: jmp userfunc @965
963: +
964: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
965: pop param 'skill_name'
966: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
967: local #1
968: local #0
969: Func(7,1): GetAttributeTemporaryMod
970: Func(0,3): CDbl
971: 10LF
972: /
973: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
974: pop param 'skill_name'
975: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
976: local #1
977: local #0
978: Func(7,0): GetAttributeBaseValue
979: Func(0,3): CDbl
980: 10LF
981: /
982: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
983: pop param 'classe'
984: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
985: decl local #2
986: local #1
987: local #0
988: Func(2,2): GetObjProperty
989: Func(0,2): CInt
990: :=
991: #
if( level )
992: local #2
993: if false goto 1003
return CDbl( settings.BonusLevel * level ) + 1;
994: global #0
995: get member 'BonusLevel'
996: local #2
997: *
998: Func(0,3): CDbl
999: 1L
1000: +
1001: return
1002: goto1005
return 1;
1003: 1L
1004: return
1005: 0L
1006: return
