c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @584
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\casterCombat.src, Line 18
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\casterCombat.src, Line 20
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @716
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @429
106: #
var min_range, max_range;
107: decl local #7
108: #
109: decl local #8
110: #
NPC_WeaponRanges( npc, min_range, max_range );
111: local #1
112: local #7
113: local #8
114: makelocal
115: jmp userfunc @749
116: #
Cast_SpellReflection( npc, bsettings );
117: local #1
118: local #4
119: makelocal
120: jmp userfunc @546
121: #
while( npc )
122: local #1
123: if false goto 289
var dist := Distance( npc, opponent );
124: decl local #0
125: local #1
126: local #6
127: Func(2,8): Distance
128: :=
129: #
if( DoneFighting( npc, opponent, dist, bsettings ))
130: local #1
131: local #6
132: local #9
133: local #4
134: makelocal
135: jmp userfunc @628
136: if false goto 168
if( scripts.Exists( "EndFight" ))
137: local #5
138: "EndFight"
139: Call Method id exists (#55, 1 params)
140: if false goto 153
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
141: local #1
142: "EndFight"
143: local #5
144: "EndFight"
145: [] 1
146: get member id 'script' (61)
147: local #0
148: 0L
149: makelocal
150: jmp userfunc @461
151: #
152: goto159
AI_WarMode( npc, 0 );
153: local #1
154: 0L
155: 0L
156: makelocal
157: jmp userfunc @505
158: #
AI_EndNerve( npc, nerve_name );
159: local #1
160: local #2
161: 0L
162: makelocal
163: jmp userfunc @335
164: #
break;
165: leave block(1)
166: goto289
167: goto214
elseif( ShouldFlee( npc, opponent, bsettings ))
168: local #1
169: local #6
170: local #4
171: makelocal
172: jmp userfunc @772
173: if false goto 195
AI_WarMode( npc, 0 );
174: local #1
175: 0L
176: 0L
177: makelocal
178: jmp userfunc @505
179: #
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, 20 )
180: local #1
181: local #6
182: get member id 'x' (0)
183: local #6
184: get member id 'y' (1)
185: local #6
186: get member id 'z' (2)
187: 2L
188: 2L
189: 20L
190: 0L
191: makelocal
192: jmp userfunc @367
193: #
194: goto214
elseif( !IsFacing( npc, opponent.x, opponent.y ))
195: local #1
196: local #6
197: get member id 'x' (0)
198: local #6
199: get member id 'y' (1)
200: makelocal
201: jmp userfunc @702
202: if true goto 214
npc.facing := GetFacing( npc.x, npc.y, opponent.x, opponent.y );
203: local #1
204: local #1
205: get member id 'x' (0)
206: local #1
207: get member id 'y' (1)
208: local #6
209: get member id 'x' (0)
210: local #6
211: get member id 'y' (1)
212: Func(2,0): GetFacing
213: set member id 'facing' (9) #
if( !CheckLineOfSight( npc, opponent ) || AP_GetVital( npc, MANA ) < 30 )
214: local #1
215: local #6
216: Func(2,48): CheckLineOfSight
217: !
218: local #1
219: "Mana"
220: makelocal
221: jmp userfunc @537
222: 30L
223: <
224: ||
225: if false goto 272
if( dist < min_range )
226: local #9
227: local #7
228: <
229: if false goto 249
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, ( bs
230: local #1
231: local #6
232: get member id 'x' (0)
233: local #6
234: get member id 'y' (1)
235: local #6
236: get member id 'z' (2)
237: 2L
238: 2L
239: local #4
240: "MinRange"
241: [] 1
242: local #9
243: -
244: 0L
245: makelocal
246: jmp userfunc @367
247: #
248: goto271
elseif( dist > max_range )
249: local #9
250: local #8
251: >
252: if false goto 271
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_TOWARD, NEMOVE_RUN, ( 
253: local #1
254: local #6
255: get member id 'x' (0)
256: local #6
257: get member id 'y' (1)
258: local #6
259: get member id 'z' (2)
260: 1L
261: 2L
262: local #9
263: local #4
264: "MaxRange"
265: [] 1
266: -
267: 0L
268: makelocal
269: jmp userfunc @367
270: #
271: goto279
SpellAttack( npc, opponent, bsettings, dist );
272: local #1
273: local #6
274: local #4
275: local #9
276: makelocal
277: jmp userfunc @803
278: #
SleepMS(50);
279: 50L
280: Func(3,0): Sleepms
281: #
AI_ClearThoughts( npc, CLR_NERVE );
282: local #1
283: 2L
284: makelocal
285: jmp userfunc @293
286: #
287: leave block(1)
288: goto122
return 1;
289: 1L
290: progend
291: leave block(9)
292: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
293: pop param 'flags'
294: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
295: decl local #2
296: local #0
297: 1L
298: &
299: :=
300: #
var nerve	:= flags & CLR_NERVE;
301: decl local #3
302: local #0
303: 2L
304: &
305: :=
306: #
var both	:= flags & CLR_BOTH;
307: decl local #4
308: local #0
309: 3L
310: &
311: :=
312: #
if( both || brain )
313: local #4
314: local #2
315: ||
316: if false goto 323
brain := NPC.process;
317: local #1
318: get member id 'process' (64)
319: local2 := 
brain.clear_event_queue();
320: local #2
321: Call Method id clear_event_queue (#78, 0 params)
322: #
if( both || nerve )
323: local #4
324: local #3
325: ||
326: if false goto 333
nerve := GetProcess( GetPid() );
327: Func(3,3): GetPid
328: Func(3,2): GetProcess
329: local3 := 
nerve.clear_event_queue();
330: local #3
331: Call Method id clear_event_queue (#78, 0 params)
332: #
return 1;
333: 1L
334: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
335: pop param 'no_wake'
336: pop param 'nerve_name'
337: pop param 'npc'
var ev		:= struct;
338: decl local #3
339: struct
340: :=
341: #
ev.+type	:= NPCEVENT_ENDNERVE;
342: local #3
343: "type"
344: .+
345: 10485775L
346: := #
ev.+name	:= nerve_name;
347: local #3
348: "name"
349: .+
350: local #1
351: := #
ev.+WakeUp	:= no_wake;
352: local #3
353: "WakeUp"
354: .+
355: local #0
356: := #
ev.+process	:= GetProcess( GetPid() );
357: local #3
358: "process"
359: .+
360: Func(3,3): GetPid
361: Func(3,2): GetProcess
362: := #
return SendEvent( npc, ev );
363: local #2
364: local #3
365: Func(2,7): SendEvent
366: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
367: pop param 'no_wake'
368: pop param 'loop'
369: pop param 'speed'
370: pop param 'to_from'
371: pop param 'z'
372: pop param 'y'
373: pop param 'x'
374: pop param 'npc'
var ev		:= struct;
375: decl local #8
376: struct
377: :=
378: #
ev.+type	:= NPCEVENT_MOVE;
379: local #8
380: "type"
381: .+
382: 10485763L
383: := #
ev.+x		:= x;
384: local #8
385: "x"
386: .+
387: local #6
388: := #
ev.+y		:= y;
389: local #8
390: "y"
391: .+
392: local #5
393: := #
ev.+z		:= z;
394: local #8
395: "z"
396: .+
397: local #4
398: := #
ev.+direction	:= to_from;
399: local #8
400: "direction"
401: .+
402: local #3
403: := #
ev.+speed	:= speed;
404: local #8
405: "speed"
406: .+
407: local #2
408: := #
ev.+WakeUp	:= no_wake;
409: local #8
410: "WakeUp"
411: .+
412: local #0
413: := #
ev.+loop	:= loop;
414: local #8
415: "loop"
416: .+
417: local #1
418: := #
ev.+process	:= GetProcess( GetPid() );
419: local #8
420: "process"
421: .+
422: Func(3,3): GetPid
423: Func(3,2): GetProcess
424: := #
return SendEvent( npc, ev );
425: local #7
426: local #8
427: Func(2,7): SendEvent
428: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
429: pop param 'no_wake'
430: pop param 'opponent'
431: pop param 'npc'
var ev		:= struct;
432: decl local #3
433: struct
434: :=
435: #
ev.+type	:= NPCEVENT_OPPONENT;
436: local #3
437: "type"
438: .+
439: 10485764L
440: := #
ev.+source	:= opponent;
441: local #3
442: "source"
443: .+
444: local #1
445: := #
ev.+WakeUp	:= no_wake;
446: local #3
447: "WakeUp"
448: .+
449: local #0
450: := #
ev.+process	:= GetProcess( GetPid() );
451: local #3
452: "process"
453: .+
454: Func(3,3): GetPid
455: Func(3,2): GetProcess
456: := #
return SendEvent( npc, ev );
457: local #2
458: local #3
459: Func(2,7): SendEvent
460: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
461: pop param 'no_wake'
462: pop param 'data'
463: pop param 'script_name'
464: pop param 'nerve_name'
465: pop param 'npc'
var ev		:= struct;
466: decl local #5
467: struct
468: :=
469: #
ev.+type	:= NPCEVENT_STARTNERVE;
470: local #5
471: "type"
472: .+
473: 10485776L
474: := #
ev.+name	:= nerve_name;
475: local #5
476: "name"
477: .+
478: local #3
479: := #
ev.+script	:= script_name;
480: local #5
481: "script"
482: .+
483: local #2
484: := #
ev.+data	:= data;
485: local #5
486: "data"
487: .+
488: local #1
489: := #
ev.+WakeUp	:= no_wake;
490: local #5
491: "WakeUp"
492: .+
493: local #0
494: := #
ev.+process	:= GetProcess( GetPid() );
495: local #5
496: "process"
497: .+
498: Func(3,3): GetPid
499: Func(3,2): GetProcess
500: := #
return SendEvent( npc, ev );
501: local #4
502: local #5
503: Func(2,7): SendEvent
504: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
505: pop param 'no_wake'
506: pop param 'mode'
507: pop param 'npc'
var ev		:= struct;
508: decl local #3
509: struct
510: :=
511: #
ev.+type	:= NPCEVENT_WARMODE;
512: local #3
513: "type"
514: .+
515: 10485767L
516: := #
ev.+value	:= mode;
517: local #3
518: "value"
519: .+
520: local #1
521: := #
ev.+WakeUp	:= no_wake;
522: local #3
523: "WakeUp"
524: .+
525: local #0
526: := #
ev.+process	:= GetProcess( GetPid() );
527: local #3
528: "process"
529: .+
530: Func(3,3): GetPid
531: Func(3,2): GetProcess
532: := #
return SendEvent( npc, ev );
533: local #2
534: local #3
535: Func(2,7): SendEvent
536: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
537: pop param 'vital_name'
538: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
539: local #1
540: local #0
541: Func(6,1): GetVital
542: Func(0,2): CDbl
543: 100LF
544: /
545: return
C:\ZH099\pkg\systems\brainAI\scripts\combat\casterCombat.src, Line 108
function Cast_SpellReflection( npc, byref nsettings )
546: pop param byref 'nsettings'
547: pop param 'npc'
var script := Start_Script( ":magery:spellStarter", array{npc, 36, 0} );
548: decl local #2
549: ":magery:spellStarter"
550: array
551: local #1
552: init{}
553: 36L
554: init{}
555: 0L
556: init{}
557: Func(3,4): Start_Script
558: :=
559: #
if( script.errortext )
560: local #2
561: get member 'errortext'
562: if false goto 573
PrintTextAbove( npc, script.errortext );
563: local #1
564: local #2
565: get member 'errortext'
566: 3L
567: 1000L
568: 0L
569: Func(2,6): PrintTextAbove
570: #
return 0;
571: 0L
572: return
SetObjProperty( npc, "#NextCast", ReadGameClock()+nsettings["CastWait"] );
573: local #1
574: "#NextCast"
575: Func(2,19): ReadGameClock
576: local #0
577: "CastWait"
578: [] 1
579: +
580: Func(2,3): SetObjProperty
581: #
return 1;
582: 1L
583: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
584: pop param byref 'cfg_file'
585: pop param 'elem_name'
if( !cfg_file )
586: local #0
587: if true goto 591
cfg_file := Classes_GetSettingsCfgFile();
588: makelocal
589: jmp userfunc @612
590: local0 := 
var elem := cfg_file[elem_name];
591: decl local #2
592: local #0
593: local #1
594: [] 1
595: :=
596: #
if( elem.errortext )
597: local #2
598: get member 'errortext'
599: if false goto 610
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
600: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
601: local #1
602: +
603: "] ->"
604: +
605: local #2
606: get member 'errortext'
607: +
608: Func(3,1): SysLog
609: #
return elem;
610: local #2
611: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
612: decl local #0
613: ":classes:settings"
614: Func(5,0): ReadConfigFile
615: :=
616: #
if( cfg.errortext )
617: local #0
618: get member 'errortext'
619: if false goto 626
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
620: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
621: local #0
622: get member 'errortext'
623: +
624: Func(3,1): SysLog
625: #
return cfg;
626: local #0
627: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
628: pop param byref 'settings'
629: pop param byref 'dist'
630: pop param 'opponent'
631: pop param 'npc'
if( !opponent )
632: local #2
633: if true goto 637
return 1;
634: 1L
635: return
636: goto694
elseif( opponent.dead )
637: local #2
638: get member id 'dead' (39)
639: if false goto 643
return 1;
640: 1L
641: return
642: goto694
elseif( opponent.concealed )
643: local #2
644: get member id 'concealed' (33)
645: if false goto 649
return 1;
646: 1L
647: return
648: goto694
elseif( dist > 30 )
649: local #1
650: 30L
651: >
652: if false goto 656
return 1;
653: 1L
654: return
655: goto694
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
656: local #3
657: "#Peacemaking"
658: Func(2,2): GetObjProperty
659: Func(2,19): ReadGameClock
660: >
661: if false goto 665
return 1;
662: 1L
663: return
664: goto694
elseif( opponent.hidden )
665: local #2
666: get member id 'hidden' (32)
667: if false goto 681
if( !DetectHidden( npc, opponent ))
668: local #3
669: local #2
670: makelocal
671: jmp userfunc @1051
672: if true goto 678
pathfind_ticker += 1;
673: global #5
674: 1L
675: +=
676: #
677: goto680
pathfind_ticker := 0;
678: 0L
679: global5 := 
680: goto694
elseif( !CheckForPathLOS( npc, opponent, settings ))
681: local #3
682: local #2
683: local #0
684: makelocal
685: jmp userfunc @979
686: if true goto 692
pathfind_ticker += 1;
687: global #5
688: 1L
689: +=
690: #
691: goto694
pathfind_ticker := 0;
692: 0L
693: global5 := 
if( pathfind_ticker >= 60 )
694: global #5
695: 60L
696: >=
697: if false goto 700
return 1;
698: 1L
699: return
return 0;
700: 0L
701: return
c:/ZH099/scripts/include/facings.inc, Line 18
function IsFacing( mobile, x, y )
702: pop param 'y'
703: pop param 'x'
704: pop param 'mobile'
return( mobile.facing == GetFacing( mobile.x, mobile.y, x, y ));
705: local #2
706: get member id 'facing' (9)
707: local #2
708: get member id 'x' (0)
709: local #2
710: get member id 'y' (1)
711: local #1
712: local #0
713: Func(2,0): GetFacing
714: ==
715: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
716: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
717: decl local #1
718: local #0
719: "BattleCryWord"
720: Func(2,2): GetObjProperty
721: :=
722: #
if( battle_cry )
723: local #1
724: if false goto 734
AI_Speak( npc, battle_cry.RandomEntry() );
725: local #0
726: local #1
727: Call Method id randomentry (#101, 0 params)
728: "default"
729: 0L
730: 0L
731: makelocal
732: jmp userfunc @935
733: #
if( npc.hidden )
734: local #0
735: get member id 'hidden' (32)
736: if false goto 747
npc.hidden := 0;
737: local #0
738: 0L
739: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
740: local #0
741: "*Springs from hiding!*"
742: 3L
743: 55L
744: 0L
745: Func(2,6): PrintTextAbove
746: #
return 1;
747: 1L
748: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 20
function NPC_WeaponRanges( npc, byref min_range, byref max_range )
749: pop param byref 'max_range'
750: pop param byref 'min_range'
751: pop param 'npc'
min_range := CInt( CS_GetWeaponInfo( npc.weapon, "MinRange" ));
752: local #2
753: get member id 'weapon' (42)
754: "MinRange"
755: makelocal
756: jmp userfunc @1033
757: Func(0,1): CInt
758: local1 := 
max_range := CInt( CS_GetWeaponInfo( npc.weapon, "MaxRange" ));
759: local #2
760: get member id 'weapon' (42)
761: "MaxRange"
762: makelocal
763: jmp userfunc @1033
764: Func(0,1): CInt
765: local0 := 
if( !max_range )
766: local #0
767: if true goto 770
max_range := 1;
768: 1L
769: local0 := 
return 1;
770: 1L
771: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
772: pop param byref 'settings'
773: pop param 'opponent'
774: pop param 'npc'
return 0;
775: 0L
776: return
if( opponent.IsA( POLCLASS_NPC ))
777: local #1
778: 4L
779: Call Method id isa (#0, 1 params)
780: if false goto 783
return 0;
781: 0L
782: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
783: decl local #3
784: local #2
785: local #0
786: "FleeLevel"
787: [] 1
788: makelocal
789: jmp userfunc @1330
790: :=
791: #
if( flee_level > AP_GetVital( npc, "Hits" ))
792: local #3
793: local #2
794: "Hits"
795: makelocal
796: jmp userfunc @537
797: >
798: if false goto 801
return 1;
799: 1L
800: return
return 0;
801: 0L
802: return
C:\ZH099\pkg\systems\brainAI\scripts\combat\casterCombat.src, Line 72
function SpellAttack( npc, opponent, byref nsettings, byref dist )
803: pop param byref 'dist'
804: pop param byref 'nsettings'
805: pop param 'opponent'
806: pop param 'npc'
if( GetObjProperty( npc, "#Casting" ))
807: local #3
808: "#Casting"
809: Func(2,2): GetObjProperty
810: if false goto 814
return 0;
811: 0L
812: return
813: goto849
elseif( CInt( GetObjProperty( npc, "#NextCast" )) > ReadGameClock() )
814: local #3
815: "#NextCast"
816: Func(2,2): GetObjProperty
817: Func(0,1): CInt
818: Func(2,19): ReadGameClock
819: >
820: if false goto 824
return 0;
821: 0L
822: return
823: goto849
elseif( AP_GetVital( npc, MANA ) <= 10 )
824: local #3
825: "Mana"
826: makelocal
827: jmp userfunc @537
828: 10L
829: <=
830: if false goto 834
return 0;
831: 0L
832: return
833: goto849
elseif( !CheckLineOfSight( npc, opponent ))
834: local #3
835: local #2
836: Func(2,48): CheckLineOfSight
837: if true goto 841
return 0;
838: 0L
839: return
840: goto849
elseif( dist > nsettings["MaxRange"] )
841: local #0
842: local #1
843: "MaxRange"
844: [] 1
845: >
846: if false goto 849
return 0;
847: 0L
848: return
var npc_elem := NPC_GetNPCConfig( npc.npctemplate ),
849: decl local #4
850: local #3
851: get member id 'npctemplate' (62)
852: makelocal
853: jmp userfunc @1344
854: :=
855: #
856: decl local #5
857: local #4
858: "Spell"
859: Func(5,2): GetConfigStringArray
860: :=
861: #
862: decl local #6
863: local #5
864: Call Method id randomentry (#101, 0 params)
865: " "
866: Func(0,7): SplitWords
867: :=
868: #
869: decl local #7
870: local #6
871: 1L
872: [] 1
873: makelocal
874: jmp userfunc @1501
875: :=
876: #
if( !spell_id )
877: local #7
878: if true goto 882
return 0;
879: 0L
880: return
881: goto892
elseif( RandomInt(100) >= CInt( cast_spell[2] ))
882: 100L
883: Func(8,2): RandomInt
884: local #6
885: 2L
886: [] 1
887: Func(0,1): CInt
888: >=
889: if false goto 892
return 0;
890: 0L
891: return
var script := Start_Script( ":magery:spellStarter", array{npc, spell_id, 0, opp
892: decl local #8
893: ":magery:spellStarter"
894: array
895: local #3
896: init{}
897: local #7
898: init{}
899: 0L
900: init{}
901: local #2
902: init{}
903: local #1
904: "SpellWords"
905: [] 1
906: !
907: init{}
908: Func(3,4): Start_Script
909: :=
910: #
if( script.errortext )
911: local #8
912: get member 'errortext'
913: if false goto 924
PrintTextAbove( npc, script.errortext );
914: local #3
915: local #8
916: get member 'errortext'
917: 3L
918: 1000L
919: 0L
920: Func(2,6): PrintTextAbove
921: #
return 0;
922: 0L
923: return
SetObjProperty( npc, "#NextCast", ReadGameClock()+nsettings["CastWait"] );
924: local #3
925: "#NextCast"
926: Func(2,19): ReadGameClock
927: local #1
928: "CastWait"
929: [] 1
930: +
931: Func(2,3): SetObjProperty
932: #
return 1;
933: 1L
934: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
935: pop param 'no_wake'
936: pop param 'do_event'
937: pop param 'text_type'
938: pop param 'text'
939: pop param 'npc'
var ev		:= struct;
940: decl local #5
941: struct
942: :=
943: #
ev.+type	:= NPCEVENT_SPEAK;
944: local #5
945: "type"
946: .+
947: 10485765L
948: := #
ev.+text	:= text;
949: local #5
950: "text"
951: .+
952: local #3
953: := #
ev.+texttype	:= text_type;
954: local #5
955: "texttype"
956: .+
957: local #2
958: := #
ev.+doevent	:= do_event;
959: local #5
960: "doevent"
961: .+
962: local #1
963: := #
ev.+WakeUp	:= no_wake;
964: local #5
965: "WakeUp"
966: .+
967: local #0
968: := #
ev.+process	:= GetProcess( GetPid() );
969: local #5
970: "process"
971: .+
972: Func(3,3): GetPid
973: Func(3,2): GetProcess
974: := #
return SendEvent( npc, ev );
975: local #4
976: local #5
977: Func(2,7): SendEvent
978: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
979: pop param 'settings'
980: pop param 'destination'
981: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
982: local #2
983: local #1
984: get member id 'x' (0)
985: local #1
986: get member id 'y' (1)
987: local #1
988: get member id 'z' (2)
989: Func(2,11): CheckLosAt
990: if true goto 1031
var pathfind_range := CInt( settings["AreaSize"] );
991: decl local #0
992: local #0
993: "AreaSize"
994: [] 1
995: Func(0,1): CInt
996: :=
997: #
if( pathfind_range < 5 )
998: local #3
999: 5L
1000: <
1001: if false goto 1004
pathfind_range := 5;
1002: 5L
1003: local3 := 
var flags := FP_IGNORE_MOBILES;
1004: decl local #1
1005: 1L
1006: :=
1007: #
if( settings["OpenDoors"] )
1008: local #0
1009: "OpenDoors"
1010: [] 1
1011: if false goto 1016
flags += FP_IGNORE_DOORS;
1012: local #4
1013: 2L
1014: +=
1015: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
1016: local #2
1017: local #1
1018: get member id 'x' (0)
1019: local #1
1020: get member id 'y' (1)
1021: local #1
1022: get member id 'z' (2)
1023: local #3
1024: local #4
1025: makelocal
1026: jmp userfunc @1135
1027: if true goto 1030
return 0;
1028: 0L
1029: return
1030: leave block(2)
return 1;
1031: 1L
1032: return
c:/ZH099/pkg/items/weapons/include/weaponInfo.inc, Line 8
function CS_GetWeaponInfo( weapon, prop_name )
1033: pop param 'prop_name'
1034: pop param 'weapon'
var config := ReadConfigFile( ":*:itemdesc" );
1035: decl local #2
1036: ":*:itemdesc"
1037: Func(5,0): ReadConfigFile
1038: :=
1039: #
var info := config[weapon.objtype];
1040: decl local #3
1041: local #2
1042: local #1
1043: get member id 'objtype' (4)
1044: [] 1
1045: :=
1046: #
return GetConfigString( info, prop_name );
1047: local #3
1048: local #0
1049: Func(5,6): GetConfigString
1050: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
1051: pop param 'hider'
1052: pop param 'mobile'
if( !hider.hidden )
1053: local #0
1054: get member id 'hidden' (32)
1055: if true goto 1058
return 1; //Already revealed.
1056: 1L
1057: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
1058: decl local #2
1059: local #1
1060: "DetectingHidden"
1061: makelocal
1062: jmp userfunc @1517
1063: :=
1064: #
1065: decl local #3
1066: local #0
1067: "Hiding"
1068: makelocal
1069: jmp userfunc @1517
1070: :=
1071: #
mobile_skill *= ClasseBonus( mobile, THIEF );
1072: local #2
1073: local #1
1074: "IsThief"
1075: makelocal
1076: jmp userfunc @1556
1077: *=
1078: #
hider_skill *= ClasseBonus( hider, THIEF );
1079: local #3
1080: local #0
1081: "IsThief"
1082: makelocal
1083: jmp userfunc @1556
1084: *=
1085: #
if( mobile.IsA( POLCLASS_NPC ))
1086: local #1
1087: 4L
1088: Call Method id isa (#0, 1 params)
1089: if false goto 1098
if( !mobile_skill )
1090: local #2
1091: if true goto 1094
return 0;
1092: 0L
1093: return
mobile_skill *= 2;
1094: local #2
1095: 2L
1096: *=
1097: #
var chance := CInt( mobile_skill - hider_skill );
1098: decl local #4
1099: local #2
1100: local #3
1101: -
1102: Func(0,1): CInt
1103: :=
1104: #
if( chance < 0 )
1105: local #4
1106: 0L
1107: <
1108: if false goto 1111
chance := 5;
1109: 5L
1110: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
1111: 100L
1112: Func(8,2): RandomInt
1113: local #4
1114: >
1115: local #1
1116: get member id 'multi' (12)
1117: !
1118: &&
1119: if false goto 1122
return 0;
1120: 0L
1121: return
hider.hidden := 0;
1122: local #0
1123: 0L
1124: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
1125: local #0
1126: "You have been discovered!"
1127: local #0
1128: 3L
1129: 1000L
1130: 0L
1131: Func(2,29): PrintTextAbovePrivate
1132: #
return 1;
1133: 1L
1134: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
1135: pop param 'flags'
1136: pop param 'pathfind_range'
1137: pop param 'z'
1138: pop param 'y'
1139: pop param 'x'
1140: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
1141: decl local #6
1142: local #5
1143: get member id 'x' (0)
1144: local #5
1145: get member id 'y' (1)
1146: local #5
1147: get member id 'z' (2)
1148: 2L
1149: local #5
1150: get member id 'realm' (112)
1151: Func(2,31): ListItemsNearLocation
1152: :=
1153: #
foreach item in search_field
1154: local #6
1155: initforeach @1238
SleepMS(5);
1156: 5L
1157: Func(3,0): Sleepms
1158: #
if( item.movable ) //Automatic Anti-Blocking with items.
1159: local #7
1160: get member id 'movable' (20)
1161: if false goto 1201
var npc_backpack := NPC_SetupBackPack( npc );
1162: decl local #0
1163: local #5
1164: makelocal
1165: jmp userfunc @1463
1166: :=
1167: #
var move_item := MoveItemToContainer( item, npc_backpack );
1168: decl local #1
1169: local #7
1170: local #10
1171: -1L
1172: -1L
1173: Func(2,30): MoveItemToContainer
1174: :=
1175: #
if( move_item.errortext )
1176: local #11
1177: get member 'errortext'
1178: if false goto 1191
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
1179: local #5
1180: "Error looting items -->"
1181: local #11
1182: get member 'errortext'
1183: +
1184: 3L
1185: 1000L
1186: 0L
1187: Func(2,6): PrintTextAbove
1188: #
continue;
1189: leave block(2)
1190: goto1238
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
1191: local #5
1192: "*Yoink*"
1193: "yell"
1194: 1L
1195: 0L
1196: makelocal
1197: jmp userfunc @935
1198: #
1199: leave block(2)
1200: goto1238
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
1201: local #5
1202: "Magery"
1203: makelocal
1204: jmp userfunc @1517
1205: local #7
1206: "SummonedField"
1207: Func(2,2): GetObjProperty
1208: &&
1209: if false goto 1238
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
1210: decl local #0
1211: ":magery:spellStarter"
1212: array
1213: local #5
1214: init{}
1215: 34L
1216: init{}
1217: 0L
1218: init{}
1219: local #7
1220: init{}
1221: Func(3,4): Start_Script
1222: :=
1223: #
if( script.errortext )
1224: local #10
1225: get member 'errortext'
1226: if false goto 1235
PrintTextAbove( npc, script.errortext );
1227: local #5
1228: local #10
1229: get member 'errortext'
1230: 3L
1231: 1000L
1232: 0L
1233: Func(2,6): PrintTextAbove
1234: #
break;
1235: leave block(1)
1236: goto1239
1237: leave block(1)
1238: stepforeach @1156
1239: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1240: decl local #7
1241: local #5
1242: get member id 'x' (0)
1243: local #5
1244: get member id 'y' (1)
1245: local #5
1246: get member id 'z' (2)
1247: local #4
1248: local #3
1249: local #2
1250: local #5
1251: get member id 'realm' (112)
1252: local #0
1253: local #1
1254: Func(2,32): FindPath
1255: :=
1256: #
if( !path )
1257: local #7
1258: if true goto 1261
return 0;
1259: 0L
1260: return
var move_x := CInt( path[1].x ),
1261: decl local #8
1262: local #7
1263: 1L
1264: [] 1
1265: get member id 'x' (0)
1266: Func(0,1): CInt
1267: :=
1268: #
1269: decl local #9
1270: local #7
1271: 1L
1272: [] 1
1273: get member id 'y' (1)
1274: Func(0,1): CInt
1275: :=
1276: #
1277: decl local #10
1278: local #7
1279: 1L
1280: [] 1
1281: get member id 'z' (2)
1282: Func(0,1): CInt
1283: :=
1284: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1285: decl local #11
1286: local #8
1287: local #9
1288: local #10
1289: local #5
1290: get member id 'realm' (112)
1291: Func(2,33): ListItemsAtLocation
1292: :=
1293: #
if( search_doors.Size() )
1294: local #11
1295: Call Method id size (#48, 0 params)
1296: if false goto 1324
foreach item in search_doors
1297: local #11
1298: initforeach @1322
if( item.IsDoor() )
1299: local #12
1300: Call Method isdoor (0 params)
1301: if false goto 1318
if( item.locked )
1302: local #12
1303: get member id 'locked' (70)
1304: if false goto 1308
return 0;
1305: 0L
1306: return
1307: goto1312
elseif( item.IsOpen() )
1308: local #12
1309: Call Method isopen (0 params)
1310: if false goto 1312
break;
1311: goto1323
UseItem( item, npc );
1312: local #12
1313: local #5
1314: Func(2,34): UseItem
1315: #
break;
1316: goto1323
1317: goto1319
continue;
1318: goto1322
SleepMS(5);
1319: 5L
1320: Func(3,0): Sleepms
1321: #
1322: stepforeach @1299
1323: leave block(3)
return array{move_x, mobe_y};
1324: array
1325: local #8
1326: init{}
1327: local #9
1328: init{}
1329: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1330: pop param 'flee_percent'
1331: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1332: local #1
1333: "Hits"
1334: makelocal
1335: jmp userfunc @1547
1336: Func(0,2): CDbl
1337: local #0
1338: Func(0,2): CDbl
1339: 100LF
1340: /
1341: *
1342: Func(0,1): CInt
1343: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1344: pop param 'template'
if( !template.package )
1345: local #0
1346: get member 'package'
1347: if true goto 1352
template := NPC_ParseTemplateName( template );
1348: local #0
1349: makelocal
1350: jmp userfunc @1401
1351: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1352: decl local #1
1353: ":"
1354: local #0
1355: get member 'package'
1356: +
1357: ":npcdesc"
1358: +
1359: Func(5,0): ReadConfigFile
1360: :=
1361: #
if( npc_cfg.errortext )
1362: local #1
1363: get member 'errortext'
1364: if false goto 1377
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1365: error
1366: "Error::NPC_GetNPCConfig() - Could not open :"
1367: local #0
1368: get member 'package'
1369: +
1370: ":npcdesc ->"
1371: +
1372: local #1
1373: get member 'errortext'
1374: +
1375: addmember-assign(errortext)
1376: return
var cfg_elem := npc_cfg[template.template];
1377: decl local #2
1378: local #1
1379: local #0
1380: get member 'template'
1381: [] 1
1382: :=
1383: #
if( cfg_elem.errortext )
1384: local #2
1385: get member 'errortext'
1386: if false goto 1399
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1387: error
1388: "Error::NPC_GetNPCConfig() - Could not find elem ["
1389: local #0
1390: get member 'template'
1391: +
1392: "] ->"
1393: +
1394: local #2
1395: get member 'errortext'
1396: +
1397: addmember-assign(errortext)
1398: return
return cfg_elem;
1399: local #2
1400: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1401: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1402: local #0
1403: 4L
1404: Call Method id isa (#0, 1 params)
1405: if false goto 1409
template_name := template_name.npctemplate;
1406: local #0
1407: get member id 'npctemplate' (62)
1408: local0 := 
var colon_a := Find( template_name, ":", 1 );
1409: decl local #1
1410: local #0
1411: ":"
1412: 1L
1413: Func(0,8): Find
1414: :=
1415: #
var colon_b := Find( template_name, ":", 2 );
1416: decl local #2
1417: local #0
1418: ":"
1419: 2L
1420: Func(0,8): Find
1421: :=
1422: #
var parsed := struct{"package", "template"};
1423: decl local #3
1424: struct
1425: addmember(package)
1426: addmember(template)
1427: :=
1428: #
if( !colon_a || !colon_b )
1429: local #1
1430: !
1431: local #2
1432: !
1433: ||
1434: if false goto 1442
parsed.package := "";
1435: local #3
1436: ""
1437: set member 'package' #
parsed.template := template_name;
1438: local #3
1439: local #0
1440: set member 'template' #
1441: goto1461
parsed.package := template_name[colon_a+1, colon_b-2];
1442: local #3
1443: local #0
1444: local #1
1445: 1L
1446: +
1447: local #2
1448: 2L
1449: -
1450: [,]
1451: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1452: local #3
1453: local #0
1454: local #2
1455: 1L
1456: +
1457: local #0
1458: Func(0,3): Len
1459: [,]
1460: set member 'template' #
return parsed;
1461: local #3
1462: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1463: pop param 'mobile'
if( !mobile.backpack )
1464: local #0
1465: get member id 'backpack' (41)
1466: if true goto 1498
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1467: decl local #0
1468: local #0
1469: get member id 'x' (0)
1470: local #0
1471: get member id 'y' (1)
1472: local #0
1473: get member id 'z' (2)
1474: "BackPack"
1475: 1L
1476: local #0
1477: get member id 'realm' (112)
1478: Func(2,21): CreateItemAtLocation
1479: :=
1480: #
var result := EquipItem( mobile, backpack );
1481: decl local #1
1482: local #0
1483: local #1
1484: Func(2,22): EquipItem
1485: :=
1486: #
if( !result )
1487: local #2
1488: if true goto 1495
DestroyItem( backpack );
1489: local #1
1490: Func(2,23): DestroyItem
1491: #
return result;
1492: local #2
1493: return
1494: goto1497
return backpack;
1495: local #1
1496: return
1497: leave block(2)
return mobile.backpack;
1498: local #0
1499: get member id 'backpack' (41)
1500: return
c:/ZH099/pkg/systems/spells/include/spells_ex.inc, Line 12
function SPELL_SpellNameToId( spell_name )
1501: pop param 'spell_name'
var spellex_cfg := ReadConfigFile( ":spells:spells_ex" );
1502: decl local #1
1503: ":spells:spells_ex"
1504: Func(5,0): ReadConfigFile
1505: :=
1506: #
var cfg_elem := spellex_cfg["NameToId"];
1507: decl local #2
1508: local #1
1509: "NameToId"
1510: [] 1
1511: :=
1512: #
return GetConfigInt( cfg_elem, spell_name );
1513: local #2
1514: local #0
1515: Func(5,7): GetConfigInt
1516: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1517: pop param 'skill_name'
1518: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1519: local #1
1520: local #0
1521: makelocal
1522: jmp userfunc @1538
1523: local #1
1524: local #0
1525: makelocal
1526: jmp userfunc @1529
1527: +
1528: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1529: pop param 'skill_name'
1530: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1531: local #1
1532: local #0
1533: Func(7,1): GetAttributeTemporaryMod
1534: Func(0,2): CDbl
1535: 10LF
1536: /
1537: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1538: pop param 'skill_name'
1539: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1540: local #1
1541: local #0
1542: Func(7,0): GetAttributeBaseValue
1543: Func(0,2): CDbl
1544: 10LF
1545: /
1546: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1547: pop param 'vital_name'
1548: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1549: local #1
1550: local #0
1551: Func(6,2): GetVitalMaximumValue
1552: Func(0,2): CDbl
1553: 100LF
1554: /
1555: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1556: pop param 'classe'
1557: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1558: decl local #2
1559: local #1
1560: local #0
1561: Func(2,2): GetObjProperty
1562: Func(0,1): CInt
1563: :=
1564: #
if( level )
1565: local #2
1566: if false goto 1576
return CDbl( settings.BonusLevel * level ) + 1;
1567: global #0
1568: get member 'BonusLevel'
1569: local #2
1570: *
1571: Func(0,2): CDbl
1572: 1L
1573: +
1574: return
1575: goto1578
return 1;
1576: 1L
1577: return
1578: 0L
1579: return
