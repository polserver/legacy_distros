c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @535
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\totem.src, Line 34
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\totem.src, Line 36
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @667
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @427
106: #
var min_range, max_range;
107: decl local #7
108: #
109: decl local #8
110: #
NPC_WeaponRanges( npc, min_range, max_range );
111: local #1
112: local #7
113: local #8
114: makelocal
115: jmp userfunc @700
116: #
SetObjProperty( npc, "#NextCast", ReadGameClock()+bsettings["CastWait"] );
117: local #1
118: "#NextCast"
119: Func(2,19): ReadGameClock
120: local #4
121: "CastWait"
122: [] 1
123: +
124: Func(2,3): SetObjProperty
125: #
while( npc )
126: local #1
127: if false goto 287
var dist := Distance( npc, opponent );
128: decl local #0
129: local #1
130: local #6
131: Func(2,8): Distance
132: :=
133: #
if( DoneFighting( npc, opponent, dist, bsettings ))
134: local #1
135: local #6
136: local #9
137: local #4
138: makelocal
139: jmp userfunc @579
140: if false goto 172
if( scripts.Exists( "EndFight" ))
141: local #5
142: "EndFight"
143: Call Method id exists (#55, 1 params)
144: if false goto 157
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
145: local #1
146: "EndFight"
147: local #5
148: "EndFight"
149: [] 1
150: get member id 'script' (61)
151: local #0
152: 0L
153: makelocal
154: jmp userfunc @459
155: #
156: goto163
AI_WarMode( npc, 0 );
157: local #1
158: 0L
159: 0L
160: makelocal
161: jmp userfunc @503
162: #
AI_EndNerve( npc, nerve_name );
163: local #1
164: local #2
165: 0L
166: makelocal
167: jmp userfunc @333
168: #
break;
169: leave block(1)
170: goto287
171: goto264
elseif( ShouldFlee( npc, opponent, bsettings ))
172: local #1
173: local #6
174: local #4
175: makelocal
176: jmp userfunc @723
177: if false goto 199
AI_WarMode( npc, 0 );
178: local #1
179: 0L
180: 0L
181: makelocal
182: jmp userfunc @503
183: #
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, WAKE
184: local #1
185: local #6
186: get member id 'x' (0)
187: local #6
188: get member id 'y' (1)
189: local #6
190: get member id 'z' (2)
191: 2L
192: 2L
193: 1L
194: 100L
195: makelocal
196: jmp userfunc @365
197: #
198: goto264
elseif( dist < min_range )
199: local #9
200: local #7
201: <
202: if false goto 222
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, WAKE
203: local #1
204: local #6
205: get member id 'x' (0)
206: local #6
207: get member id 'y' (1)
208: local #6
209: get member id 'z' (2)
210: 2L
211: 2L
212: 1L
213: local #4
214: "MinRange"
215: [] 1
216: local #9
217: -
218: makelocal
219: jmp userfunc @365
220: #
221: goto264
elseif( dist > max_range )
222: local #9
223: local #8
224: >
225: if false goto 245
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_TOWARD, NEMOVE_RUN, WA
226: local #1
227: local #6
228: get member id 'x' (0)
229: local #6
230: get member id 'y' (1)
231: local #6
232: get member id 'z' (2)
233: 1L
234: 2L
235: 1L
236: local #9
237: local #4
238: "MaxRange"
239: [] 1
240: -
241: makelocal
242: jmp userfunc @365
243: #
244: goto264
elseif( !IsFacing( npc, opponent.x, opponent.y ))
245: local #1
246: local #6
247: get member id 'x' (0)
248: local #6
249: get member id 'y' (1)
250: makelocal
251: jmp userfunc @653
252: if true goto 264
npc.facing := GetFacing( npc.x, npc.y, opponent.x, opponent.y );
253: local #1
254: local #1
255: get member id 'x' (0)
256: local #1
257: get member id 'y' (1)
258: local #6
259: get member id 'x' (0)
260: local #6
261: get member id 'y' (1)
262: Func(2,0): GetFacing
263: set member id 'facing' (9) #
if( Totem_GetLevel( npc ) >= 9 )
264: local #1
265: makelocal
266: jmp userfunc @886
267: 9L
268: >=
269: if false goto 277
SpellAttack( npc, opponent, bsettings, dist );
270: local #1
271: local #6
272: local #4
273: local #9
274: makelocal
275: jmp userfunc @754
276: #
SleepMS(50);
277: 50L
278: Func(3,0): Sleepms
279: #
AI_ClearThoughts( npc, CLR_NERVE );
280: local #1
281: 2L
282: makelocal
283: jmp userfunc @291
284: #
285: leave block(1)
286: goto126
return 1;
287: 1L
288: progend
289: leave block(9)
290: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
291: pop param 'flags'
292: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
293: decl local #2
294: local #0
295: 1L
296: &
297: :=
298: #
var nerve	:= flags & CLR_NERVE;
299: decl local #3
300: local #0
301: 2L
302: &
303: :=
304: #
var both	:= flags & CLR_BOTH;
305: decl local #4
306: local #0
307: 3L
308: &
309: :=
310: #
if( both || brain )
311: local #4
312: local #2
313: ||
314: if false goto 321
brain := NPC.process;
315: local #1
316: get member id 'process' (64)
317: local2 := 
brain.clear_event_queue();
318: local #2
319: Call Method id clear_event_queue (#78, 0 params)
320: #
if( both || nerve )
321: local #4
322: local #3
323: ||
324: if false goto 331
nerve := GetProcess( GetPid() );
325: Func(3,3): GetPid
326: Func(3,2): GetProcess
327: local3 := 
nerve.clear_event_queue();
328: local #3
329: Call Method id clear_event_queue (#78, 0 params)
330: #
return 1;
331: 1L
332: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
333: pop param 'no_wake'
334: pop param 'nerve_name'
335: pop param 'npc'
var ev		:= struct;
336: decl local #3
337: struct
338: :=
339: #
ev.+type	:= NPCEVENT_ENDNERVE;
340: local #3
341: "type"
342: .+
343: 10485775L
344: := #
ev.+name	:= nerve_name;
345: local #3
346: "name"
347: .+
348: local #1
349: := #
ev.+WakeUp	:= no_wake;
350: local #3
351: "WakeUp"
352: .+
353: local #0
354: := #
ev.+process	:= GetProcess( GetPid() );
355: local #3
356: "process"
357: .+
358: Func(3,3): GetPid
359: Func(3,2): GetProcess
360: := #
return SendEvent( npc, ev );
361: local #2
362: local #3
363: Func(2,7): SendEvent
364: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
365: pop param 'no_wake'
366: pop param 'loop'
367: pop param 'speed'
368: pop param 'to_from'
369: pop param 'z'
370: pop param 'y'
371: pop param 'x'
372: pop param 'npc'
var ev		:= struct;
373: decl local #8
374: struct
375: :=
376: #
ev.+type	:= NPCEVENT_MOVE;
377: local #8
378: "type"
379: .+
380: 10485763L
381: := #
ev.+x		:= x;
382: local #8
383: "x"
384: .+
385: local #6
386: := #
ev.+y		:= y;
387: local #8
388: "y"
389: .+
390: local #5
391: := #
ev.+z		:= z;
392: local #8
393: "z"
394: .+
395: local #4
396: := #
ev.+direction	:= to_from;
397: local #8
398: "direction"
399: .+
400: local #3
401: := #
ev.+speed	:= speed;
402: local #8
403: "speed"
404: .+
405: local #2
406: := #
ev.+WakeUp	:= no_wake;
407: local #8
408: "WakeUp"
409: .+
410: local #0
411: := #
ev.+loop	:= loop;
412: local #8
413: "loop"
414: .+
415: local #1
416: := #
ev.+process	:= GetProcess( GetPid() );
417: local #8
418: "process"
419: .+
420: Func(3,3): GetPid
421: Func(3,2): GetProcess
422: := #
return SendEvent( npc, ev );
423: local #7
424: local #8
425: Func(2,7): SendEvent
426: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
427: pop param 'no_wake'
428: pop param 'opponent'
429: pop param 'npc'
var ev		:= struct;
430: decl local #3
431: struct
432: :=
433: #
ev.+type	:= NPCEVENT_OPPONENT;
434: local #3
435: "type"
436: .+
437: 10485764L
438: := #
ev.+source	:= opponent;
439: local #3
440: "source"
441: .+
442: local #1
443: := #
ev.+WakeUp	:= no_wake;
444: local #3
445: "WakeUp"
446: .+
447: local #0
448: := #
ev.+process	:= GetProcess( GetPid() );
449: local #3
450: "process"
451: .+
452: Func(3,3): GetPid
453: Func(3,2): GetProcess
454: := #
return SendEvent( npc, ev );
455: local #2
456: local #3
457: Func(2,7): SendEvent
458: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
459: pop param 'no_wake'
460: pop param 'data'
461: pop param 'script_name'
462: pop param 'nerve_name'
463: pop param 'npc'
var ev		:= struct;
464: decl local #5
465: struct
466: :=
467: #
ev.+type	:= NPCEVENT_STARTNERVE;
468: local #5
469: "type"
470: .+
471: 10485776L
472: := #
ev.+name	:= nerve_name;
473: local #5
474: "name"
475: .+
476: local #3
477: := #
ev.+script	:= script_name;
478: local #5
479: "script"
480: .+
481: local #2
482: := #
ev.+data	:= data;
483: local #5
484: "data"
485: .+
486: local #1
487: := #
ev.+WakeUp	:= no_wake;
488: local #5
489: "WakeUp"
490: .+
491: local #0
492: := #
ev.+process	:= GetProcess( GetPid() );
493: local #5
494: "process"
495: .+
496: Func(3,3): GetPid
497: Func(3,2): GetProcess
498: := #
return SendEvent( npc, ev );
499: local #4
500: local #5
501: Func(2,7): SendEvent
502: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
503: pop param 'no_wake'
504: pop param 'mode'
505: pop param 'npc'
var ev		:= struct;
506: decl local #3
507: struct
508: :=
509: #
ev.+type	:= NPCEVENT_WARMODE;
510: local #3
511: "type"
512: .+
513: 10485767L
514: := #
ev.+value	:= mode;
515: local #3
516: "value"
517: .+
518: local #1
519: := #
ev.+WakeUp	:= no_wake;
520: local #3
521: "WakeUp"
522: .+
523: local #0
524: := #
ev.+process	:= GetProcess( GetPid() );
525: local #3
526: "process"
527: .+
528: Func(3,3): GetPid
529: Func(3,2): GetProcess
530: := #
return SendEvent( npc, ev );
531: local #2
532: local #3
533: Func(2,7): SendEvent
534: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
535: pop param byref 'cfg_file'
536: pop param 'elem_name'
if( !cfg_file )
537: local #0
538: if true goto 542
cfg_file := Classes_GetSettingsCfgFile();
539: makelocal
540: jmp userfunc @563
541: local0 := 
var elem := cfg_file[elem_name];
542: decl local #2
543: local #0
544: local #1
545: [] 1
546: :=
547: #
if( elem.errortext )
548: local #2
549: get member 'errortext'
550: if false goto 561
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
551: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
552: local #1
553: +
554: "] ->"
555: +
556: local #2
557: get member 'errortext'
558: +
559: Func(3,1): SysLog
560: #
return elem;
561: local #2
562: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
563: decl local #0
564: ":classes:settings"
565: Func(5,0): ReadConfigFile
566: :=
567: #
if( cfg.errortext )
568: local #0
569: get member 'errortext'
570: if false goto 577
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
571: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
572: local #0
573: get member 'errortext'
574: +
575: Func(3,1): SysLog
576: #
return cfg;
577: local #0
578: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
579: pop param byref 'settings'
580: pop param byref 'dist'
581: pop param 'opponent'
582: pop param 'npc'
if( !opponent )
583: local #2
584: if true goto 588
return 1;
585: 1L
586: return
587: goto645
elseif( opponent.dead )
588: local #2
589: get member id 'dead' (39)
590: if false goto 594
return 1;
591: 1L
592: return
593: goto645
elseif( opponent.concealed )
594: local #2
595: get member id 'concealed' (33)
596: if false goto 600
return 1;
597: 1L
598: return
599: goto645
elseif( dist > 30 )
600: local #1
601: 30L
602: >
603: if false goto 607
return 1;
604: 1L
605: return
606: goto645
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
607: local #3
608: "#Peacemaking"
609: Func(2,2): GetObjProperty
610: Func(2,19): ReadGameClock
611: >
612: if false goto 616
return 1;
613: 1L
614: return
615: goto645
elseif( opponent.hidden )
616: local #2
617: get member id 'hidden' (32)
618: if false goto 632
if( !DetectHidden( npc, opponent ))
619: local #3
620: local #2
621: makelocal
622: jmp userfunc @1025
623: if true goto 629
pathfind_ticker += 1;
624: global #5
625: 1L
626: +=
627: #
628: goto631
pathfind_ticker := 0;
629: 0L
630: global5 := 
631: goto645
elseif( !CheckForPathLOS( npc, opponent, settings ))
632: local #3
633: local #2
634: local #0
635: makelocal
636: jmp userfunc @953
637: if true goto 643
pathfind_ticker += 1;
638: global #5
639: 1L
640: +=
641: #
642: goto645
pathfind_ticker := 0;
643: 0L
644: global5 := 
if( pathfind_ticker >= 60 )
645: global #5
646: 60L
647: >=
648: if false goto 651
return 1;
649: 1L
650: return
return 0;
651: 0L
652: return
c:/ZH099/scripts/include/facings.inc, Line 18
function IsFacing( mobile, x, y )
653: pop param 'y'
654: pop param 'x'
655: pop param 'mobile'
return( mobile.facing == GetFacing( mobile.x, mobile.y, x, y ));
656: local #2
657: get member id 'facing' (9)
658: local #2
659: get member id 'x' (0)
660: local #2
661: get member id 'y' (1)
662: local #1
663: local #0
664: Func(2,0): GetFacing
665: ==
666: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
667: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
668: decl local #1
669: local #0
670: "BattleCryWord"
671: Func(2,2): GetObjProperty
672: :=
673: #
if( battle_cry )
674: local #1
675: if false goto 685
AI_Speak( npc, battle_cry.RandomEntry() );
676: local #0
677: local #1
678: Call Method id randomentry (#101, 0 params)
679: "default"
680: 0L
681: 0L
682: makelocal
683: jmp userfunc @900
684: #
if( npc.hidden )
685: local #0
686: get member id 'hidden' (32)
687: if false goto 698
npc.hidden := 0;
688: local #0
689: 0L
690: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
691: local #0
692: "*Springs from hiding!*"
693: 3L
694: 55L
695: 0L
696: Func(2,6): PrintTextAbove
697: #
return 1;
698: 1L
699: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 20
function NPC_WeaponRanges( npc, byref min_range, byref max_range )
700: pop param byref 'max_range'
701: pop param byref 'min_range'
702: pop param 'npc'
min_range := CInt( CS_GetWeaponInfo( npc.weapon, "MinRange" ));
703: local #2
704: get member id 'weapon' (42)
705: "MinRange"
706: makelocal
707: jmp userfunc @1007
708: Func(0,1): CInt
709: local1 := 
max_range := CInt( CS_GetWeaponInfo( npc.weapon, "MaxRange" ));
710: local #2
711: get member id 'weapon' (42)
712: "MaxRange"
713: makelocal
714: jmp userfunc @1007
715: Func(0,1): CInt
716: local0 := 
if( !max_range )
717: local #0
718: if true goto 721
max_range := 1;
719: 1L
720: local0 := 
return 1;
721: 1L
722: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
723: pop param byref 'settings'
724: pop param 'opponent'
725: pop param 'npc'
return 0;
726: 0L
727: return
if( opponent.IsA( POLCLASS_NPC ))
728: local #1
729: 4L
730: Call Method id isa (#0, 1 params)
731: if false goto 734
return 0;
732: 0L
733: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
734: decl local #3
735: local #2
736: local #0
737: "FleeLevel"
738: [] 1
739: makelocal
740: jmp userfunc @1304
741: :=
742: #
if( flee_level > AP_GetVital( npc, "Hits" ))
743: local #3
744: local #2
745: "Hits"
746: makelocal
747: jmp userfunc @944
748: >
749: if false goto 752
return 1;
750: 1L
751: return
return 0;
752: 0L
753: return
C:\ZH099\pkg\systems\brainAI\scripts\combat\totem.src, Line 86
function SpellAttack( npc, opponent, byref nsettings, byref dist )
754: pop param byref 'dist'
755: pop param byref 'nsettings'
756: pop param 'opponent'
757: pop param 'npc'
if( GetObjProperty( npc, "#Casting" ))
758: local #3
759: "#Casting"
760: Func(2,2): GetObjProperty
761: if false goto 765
return 0;
762: 0L
763: return
764: goto800
elseif( CInt( GetObjProperty( npc, "#NextCast" )) > ReadGameClock() )
765: local #3
766: "#NextCast"
767: Func(2,2): GetObjProperty
768: Func(0,1): CInt
769: Func(2,19): ReadGameClock
770: >
771: if false goto 775
return 0;
772: 0L
773: return
774: goto800
elseif( AP_GetVital( npc, MANA ) <= 10 )
775: local #3
776: "Mana"
777: makelocal
778: jmp userfunc @944
779: 10L
780: <=
781: if false goto 785
return 0;
782: 0L
783: return
784: goto800
elseif( !CheckLineOfSight( npc, opponent ))
785: local #3
786: local #2
787: Func(2,49): CheckLineOfSight
788: if true goto 792
return 0;
789: 0L
790: return
791: goto800
elseif( dist > nsettings["MaxRange"] )
792: local #0
793: local #1
794: "MaxRange"
795: [] 1
796: >
797: if false goto 800
return 0;
798: 0L
799: return
var npc_elem := NPC_GetNPCConfig( npc.npctemplate ),
800: decl local #4
801: local #3
802: get member id 'npctemplate' (62)
803: makelocal
804: jmp userfunc @1318
805: :=
806: #
807: decl local #5
808: local #4
809: "Spell"
810: Func(5,2): GetConfigStringArray
811: :=
812: #
813: decl local #6
814: local #5
815: Call Method id randomentry (#101, 0 params)
816: " "
817: Func(0,7): SplitWords
818: :=
819: #
820: decl local #7
821: local #6
822: 1L
823: [] 1
824: makelocal
825: jmp userfunc @1475
826: :=
827: #
if( !spell_id )
828: local #7
829: if true goto 833
return 0;
830: 0L
831: return
832: goto843
elseif( RandomInt(100) >= CInt( cast_spell[2] ))
833: 100L
834: Func(8,2): RandomInt
835: local #6
836: 2L
837: [] 1
838: Func(0,1): CInt
839: >=
840: if false goto 843
return 0;
841: 0L
842: return
var script := Start_Script( ":magery:spellStarter", array{npc, spell_id, 0, opp
843: decl local #8
844: ":magery:spellStarter"
845: array
846: local #3
847: init{}
848: local #7
849: init{}
850: 0L
851: init{}
852: local #2
853: init{}
854: local #1
855: "SpellWords"
856: [] 1
857: !
858: init{}
859: Func(3,4): Start_Script
860: :=
861: #
if( script.errortext )
862: local #8
863: get member 'errortext'
864: if false goto 875
PrintTextAbove( npc, script.errortext );
865: local #3
866: local #8
867: get member 'errortext'
868: 3L
869: 1000L
870: 0L
871: Func(2,6): PrintTextAbove
872: #
return 0;
873: 0L
874: return
SetObjProperty( npc, "#NextCast", ReadGameClock()+nsettings["CastWait"] );
875: local #3
876: "#NextCast"
877: Func(2,19): ReadGameClock
878: local #1
879: "CastWait"
880: [] 1
881: +
882: Func(2,3): SetObjProperty
883: #
return 1;
884: 1L
885: return
c:/ZH099/pkg/items/totem/include/totem.inc, Line 39
function Totem_GetLevel( npc )
886: pop param 'npc'
var level := CInt( GetObjProperty( npc, "TotemLevel" ));
887: decl local #1
888: local #0
889: "TotemLevel"
890: Func(2,2): GetObjProperty
891: Func(0,1): CInt
892: :=
893: #
if( !level )
894: local #1
895: if true goto 898
level := 0;
896: 0L
897: local1 := 
return level;
898: local #1
899: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
900: pop param 'no_wake'
901: pop param 'do_event'
902: pop param 'text_type'
903: pop param 'text'
904: pop param 'npc'
var ev		:= struct;
905: decl local #5
906: struct
907: :=
908: #
ev.+type	:= NPCEVENT_SPEAK;
909: local #5
910: "type"
911: .+
912: 10485765L
913: := #
ev.+text	:= text;
914: local #5
915: "text"
916: .+
917: local #3
918: := #
ev.+texttype	:= text_type;
919: local #5
920: "texttype"
921: .+
922: local #2
923: := #
ev.+doevent	:= do_event;
924: local #5
925: "doevent"
926: .+
927: local #1
928: := #
ev.+WakeUp	:= no_wake;
929: local #5
930: "WakeUp"
931: .+
932: local #0
933: := #
ev.+process	:= GetProcess( GetPid() );
934: local #5
935: "process"
936: .+
937: Func(3,3): GetPid
938: Func(3,2): GetProcess
939: := #
return SendEvent( npc, ev );
940: local #4
941: local #5
942: Func(2,7): SendEvent
943: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
944: pop param 'vital_name'
945: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
946: local #1
947: local #0
948: Func(6,1): GetVital
949: Func(0,2): CDbl
950: 100LF
951: /
952: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
953: pop param 'settings'
954: pop param 'destination'
955: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
956: local #2
957: local #1
958: get member id 'x' (0)
959: local #1
960: get member id 'y' (1)
961: local #1
962: get member id 'z' (2)
963: Func(2,11): CheckLosAt
964: if true goto 1005
var pathfind_range := CInt( settings["AreaSize"] );
965: decl local #0
966: local #0
967: "AreaSize"
968: [] 1
969: Func(0,1): CInt
970: :=
971: #
if( pathfind_range < 5 )
972: local #3
973: 5L
974: <
975: if false goto 978
pathfind_range := 5;
976: 5L
977: local3 := 
var flags := FP_IGNORE_MOBILES;
978: decl local #1
979: 1L
980: :=
981: #
if( settings["OpenDoors"] )
982: local #0
983: "OpenDoors"
984: [] 1
985: if false goto 990
flags += FP_IGNORE_DOORS;
986: local #4
987: 2L
988: +=
989: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
990: local #2
991: local #1
992: get member id 'x' (0)
993: local #1
994: get member id 'y' (1)
995: local #1
996: get member id 'z' (2)
997: local #3
998: local #4
999: makelocal
1000: jmp userfunc @1109
1001: if true goto 1004
return 0;
1002: 0L
1003: return
1004: leave block(2)
return 1;
1005: 1L
1006: return
c:/ZH099/pkg/items/weapons/include/weaponInfo.inc, Line 8
function CS_GetWeaponInfo( weapon, prop_name )
1007: pop param 'prop_name'
1008: pop param 'weapon'
var config := ReadConfigFile( ":*:itemdesc" );
1009: decl local #2
1010: ":*:itemdesc"
1011: Func(5,0): ReadConfigFile
1012: :=
1013: #
var info := config[weapon.objtype];
1014: decl local #3
1015: local #2
1016: local #1
1017: get member id 'objtype' (4)
1018: [] 1
1019: :=
1020: #
return GetConfigString( info, prop_name );
1021: local #3
1022: local #0
1023: Func(5,6): GetConfigString
1024: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
1025: pop param 'hider'
1026: pop param 'mobile'
if( !hider.hidden )
1027: local #0
1028: get member id 'hidden' (32)
1029: if true goto 1032
return 1; //Already revealed.
1030: 1L
1031: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
1032: decl local #2
1033: local #1
1034: "DetectingHidden"
1035: makelocal
1036: jmp userfunc @1491
1037: :=
1038: #
1039: decl local #3
1040: local #0
1041: "Hiding"
1042: makelocal
1043: jmp userfunc @1491
1044: :=
1045: #
mobile_skill *= ClasseBonus( mobile, THIEF );
1046: local #2
1047: local #1
1048: "IsThief"
1049: makelocal
1050: jmp userfunc @1530
1051: *=
1052: #
hider_skill *= ClasseBonus( hider, THIEF );
1053: local #3
1054: local #0
1055: "IsThief"
1056: makelocal
1057: jmp userfunc @1530
1058: *=
1059: #
if( mobile.IsA( POLCLASS_NPC ))
1060: local #1
1061: 4L
1062: Call Method id isa (#0, 1 params)
1063: if false goto 1072
if( !mobile_skill )
1064: local #2
1065: if true goto 1068
return 0;
1066: 0L
1067: return
mobile_skill *= 2;
1068: local #2
1069: 2L
1070: *=
1071: #
var chance := CInt( mobile_skill - hider_skill );
1072: decl local #4
1073: local #2
1074: local #3
1075: -
1076: Func(0,1): CInt
1077: :=
1078: #
if( chance < 0 )
1079: local #4
1080: 0L
1081: <
1082: if false goto 1085
chance := 5;
1083: 5L
1084: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
1085: 100L
1086: Func(8,2): RandomInt
1087: local #4
1088: >
1089: local #1
1090: get member id 'multi' (12)
1091: !
1092: &&
1093: if false goto 1096
return 0;
1094: 0L
1095: return
hider.hidden := 0;
1096: local #0
1097: 0L
1098: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
1099: local #0
1100: "You have been discovered!"
1101: local #0
1102: 3L
1103: 1000L
1104: 0L
1105: Func(2,29): PrintTextAbovePrivate
1106: #
return 1;
1107: 1L
1108: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
1109: pop param 'flags'
1110: pop param 'pathfind_range'
1111: pop param 'z'
1112: pop param 'y'
1113: pop param 'x'
1114: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
1115: decl local #6
1116: local #5
1117: get member id 'x' (0)
1118: local #5
1119: get member id 'y' (1)
1120: local #5
1121: get member id 'z' (2)
1122: 2L
1123: local #5
1124: get member id 'realm' (112)
1125: Func(2,31): ListItemsNearLocation
1126: :=
1127: #
foreach item in search_field
1128: local #6
1129: initforeach @1212
SleepMS(5);
1130: 5L
1131: Func(3,0): Sleepms
1132: #
if( item.movable ) //Automatic Anti-Blocking with items.
1133: local #7
1134: get member id 'movable' (20)
1135: if false goto 1175
var npc_backpack := NPC_SetupBackPack( npc );
1136: decl local #0
1137: local #5
1138: makelocal
1139: jmp userfunc @1437
1140: :=
1141: #
var move_item := MoveItemToContainer( item, npc_backpack );
1142: decl local #1
1143: local #7
1144: local #10
1145: -1L
1146: -1L
1147: Func(2,30): MoveItemToContainer
1148: :=
1149: #
if( move_item.errortext )
1150: local #11
1151: get member 'errortext'
1152: if false goto 1165
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
1153: local #5
1154: "Error looting items -->"
1155: local #11
1156: get member 'errortext'
1157: +
1158: 3L
1159: 1000L
1160: 0L
1161: Func(2,6): PrintTextAbove
1162: #
continue;
1163: leave block(2)
1164: goto1212
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
1165: local #5
1166: "*Yoink*"
1167: "yell"
1168: 1L
1169: 0L
1170: makelocal
1171: jmp userfunc @900
1172: #
1173: leave block(2)
1174: goto1212
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
1175: local #5
1176: "Magery"
1177: makelocal
1178: jmp userfunc @1491
1179: local #7
1180: "SummonedField"
1181: Func(2,2): GetObjProperty
1182: &&
1183: if false goto 1212
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
1184: decl local #0
1185: ":magery:spellStarter"
1186: array
1187: local #5
1188: init{}
1189: 34L
1190: init{}
1191: 0L
1192: init{}
1193: local #7
1194: init{}
1195: Func(3,4): Start_Script
1196: :=
1197: #
if( script.errortext )
1198: local #10
1199: get member 'errortext'
1200: if false goto 1209
PrintTextAbove( npc, script.errortext );
1201: local #5
1202: local #10
1203: get member 'errortext'
1204: 3L
1205: 1000L
1206: 0L
1207: Func(2,6): PrintTextAbove
1208: #
break;
1209: leave block(1)
1210: goto1213
1211: leave block(1)
1212: stepforeach @1130
1213: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1214: decl local #7
1215: local #5
1216: get member id 'x' (0)
1217: local #5
1218: get member id 'y' (1)
1219: local #5
1220: get member id 'z' (2)
1221: local #4
1222: local #3
1223: local #2
1224: local #5
1225: get member id 'realm' (112)
1226: local #0
1227: local #1
1228: Func(2,32): FindPath
1229: :=
1230: #
if( !path )
1231: local #7
1232: if true goto 1235
return 0;
1233: 0L
1234: return
var move_x := CInt( path[1].x ),
1235: decl local #8
1236: local #7
1237: 1L
1238: [] 1
1239: get member id 'x' (0)
1240: Func(0,1): CInt
1241: :=
1242: #
1243: decl local #9
1244: local #7
1245: 1L
1246: [] 1
1247: get member id 'y' (1)
1248: Func(0,1): CInt
1249: :=
1250: #
1251: decl local #10
1252: local #7
1253: 1L
1254: [] 1
1255: get member id 'z' (2)
1256: Func(0,1): CInt
1257: :=
1258: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1259: decl local #11
1260: local #8
1261: local #9
1262: local #10
1263: local #5
1264: get member id 'realm' (112)
1265: Func(2,33): ListItemsAtLocation
1266: :=
1267: #
if( search_doors.Size() )
1268: local #11
1269: Call Method id size (#48, 0 params)
1270: if false goto 1298
foreach item in search_doors
1271: local #11
1272: initforeach @1296
if( item.IsDoor() )
1273: local #12
1274: Call Method isdoor (0 params)
1275: if false goto 1292
if( item.locked )
1276: local #12
1277: get member id 'locked' (70)
1278: if false goto 1282
return 0;
1279: 0L
1280: return
1281: goto1286
elseif( item.IsOpen() )
1282: local #12
1283: Call Method isopen (0 params)
1284: if false goto 1286
break;
1285: goto1297
UseItem( item, npc );
1286: local #12
1287: local #5
1288: Func(2,34): UseItem
1289: #
break;
1290: goto1297
1291: goto1293
continue;
1292: goto1296
SleepMS(5);
1293: 5L
1294: Func(3,0): Sleepms
1295: #
1296: stepforeach @1273
1297: leave block(3)
return array{move_x, mobe_y};
1298: array
1299: local #8
1300: init{}
1301: local #9
1302: init{}
1303: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1304: pop param 'flee_percent'
1305: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1306: local #1
1307: "Hits"
1308: makelocal
1309: jmp userfunc @1521
1310: Func(0,2): CDbl
1311: local #0
1312: Func(0,2): CDbl
1313: 100LF
1314: /
1315: *
1316: Func(0,1): CInt
1317: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1318: pop param 'template'
if( !template.package )
1319: local #0
1320: get member 'package'
1321: if true goto 1326
template := NPC_ParseTemplateName( template );
1322: local #0
1323: makelocal
1324: jmp userfunc @1375
1325: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1326: decl local #1
1327: ":"
1328: local #0
1329: get member 'package'
1330: +
1331: ":npcdesc"
1332: +
1333: Func(5,0): ReadConfigFile
1334: :=
1335: #
if( npc_cfg.errortext )
1336: local #1
1337: get member 'errortext'
1338: if false goto 1351
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1339: error
1340: "Error::NPC_GetNPCConfig() - Could not open :"
1341: local #0
1342: get member 'package'
1343: +
1344: ":npcdesc ->"
1345: +
1346: local #1
1347: get member 'errortext'
1348: +
1349: addmember-assign(errortext)
1350: return
var cfg_elem := npc_cfg[template.template];
1351: decl local #2
1352: local #1
1353: local #0
1354: get member 'template'
1355: [] 1
1356: :=
1357: #
if( cfg_elem.errortext )
1358: local #2
1359: get member 'errortext'
1360: if false goto 1373
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1361: error
1362: "Error::NPC_GetNPCConfig() - Could not find elem ["
1363: local #0
1364: get member 'template'
1365: +
1366: "] ->"
1367: +
1368: local #2
1369: get member 'errortext'
1370: +
1371: addmember-assign(errortext)
1372: return
return cfg_elem;
1373: local #2
1374: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1375: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1376: local #0
1377: 4L
1378: Call Method id isa (#0, 1 params)
1379: if false goto 1383
template_name := template_name.npctemplate;
1380: local #0
1381: get member id 'npctemplate' (62)
1382: local0 := 
var colon_a := Find( template_name, ":", 1 );
1383: decl local #1
1384: local #0
1385: ":"
1386: 1L
1387: Func(0,8): Find
1388: :=
1389: #
var colon_b := Find( template_name, ":", 2 );
1390: decl local #2
1391: local #0
1392: ":"
1393: 2L
1394: Func(0,8): Find
1395: :=
1396: #
var parsed := struct{"package", "template"};
1397: decl local #3
1398: struct
1399: addmember(package)
1400: addmember(template)
1401: :=
1402: #
if( !colon_a || !colon_b )
1403: local #1
1404: !
1405: local #2
1406: !
1407: ||
1408: if false goto 1416
parsed.package := "";
1409: local #3
1410: ""
1411: set member 'package' #
parsed.template := template_name;
1412: local #3
1413: local #0
1414: set member 'template' #
1415: goto1435
parsed.package := template_name[colon_a+1, colon_b-2];
1416: local #3
1417: local #0
1418: local #1
1419: 1L
1420: +
1421: local #2
1422: 2L
1423: -
1424: [,]
1425: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1426: local #3
1427: local #0
1428: local #2
1429: 1L
1430: +
1431: local #0
1432: Func(0,3): Len
1433: [,]
1434: set member 'template' #
return parsed;
1435: local #3
1436: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1437: pop param 'mobile'
if( !mobile.backpack )
1438: local #0
1439: get member id 'backpack' (41)
1440: if true goto 1472
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1441: decl local #0
1442: local #0
1443: get member id 'x' (0)
1444: local #0
1445: get member id 'y' (1)
1446: local #0
1447: get member id 'z' (2)
1448: "BackPack"
1449: 1L
1450: local #0
1451: get member id 'realm' (112)
1452: Func(2,21): CreateItemAtLocation
1453: :=
1454: #
var result := EquipItem( mobile, backpack );
1455: decl local #1
1456: local #0
1457: local #1
1458: Func(2,22): EquipItem
1459: :=
1460: #
if( !result )
1461: local #2
1462: if true goto 1469
DestroyItem( backpack );
1463: local #1
1464: Func(2,23): DestroyItem
1465: #
return result;
1466: local #2
1467: return
1468: goto1471
return backpack;
1469: local #1
1470: return
1471: leave block(2)
return mobile.backpack;
1472: local #0
1473: get member id 'backpack' (41)
1474: return
c:/ZH099/pkg/systems/spells/include/spells_ex.inc, Line 12
function SPELL_SpellNameToId( spell_name )
1475: pop param 'spell_name'
var spellex_cfg := ReadConfigFile( ":spells:spells_ex" );
1476: decl local #1
1477: ":spells:spells_ex"
1478: Func(5,0): ReadConfigFile
1479: :=
1480: #
var cfg_elem := spellex_cfg["NameToId"];
1481: decl local #2
1482: local #1
1483: "NameToId"
1484: [] 1
1485: :=
1486: #
return GetConfigInt( cfg_elem, spell_name );
1487: local #2
1488: local #0
1489: Func(5,7): GetConfigInt
1490: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1491: pop param 'skill_name'
1492: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1493: local #1
1494: local #0
1495: makelocal
1496: jmp userfunc @1512
1497: local #1
1498: local #0
1499: makelocal
1500: jmp userfunc @1503
1501: +
1502: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1503: pop param 'skill_name'
1504: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1505: local #1
1506: local #0
1507: Func(7,1): GetAttributeTemporaryMod
1508: Func(0,2): CDbl
1509: 10LF
1510: /
1511: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1512: pop param 'skill_name'
1513: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1514: local #1
1515: local #0
1516: Func(7,0): GetAttributeBaseValue
1517: Func(0,2): CDbl
1518: 10LF
1519: /
1520: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1521: pop param 'vital_name'
1522: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1523: local #1
1524: local #0
1525: Func(6,2): GetVitalMaximumValue
1526: Func(0,2): CDbl
1527: 100LF
1528: /
1529: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1530: pop param 'classe'
1531: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1532: decl local #2
1533: local #1
1534: local #0
1535: Func(2,2): GetObjProperty
1536: Func(0,1): CInt
1537: :=
1538: #
if( level )
1539: local #2
1540: if false goto 1550
return CDbl( settings.BonusLevel * level ) + 1;
1541: global #0
1542: get member 'BonusLevel'
1543: local #2
1544: *
1545: Func(0,2): CDbl
1546: 1L
1547: +
1548: return
1549: goto1552
return 1;
1550: 1L
1551: return
1552: 0L
1553: return
