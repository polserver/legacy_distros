c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @514
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\genericVirtual.src, Line 29
var pathfind_ticker := 0;
57: decl global #5
58: 0L
59: :=
60: #
C:\ZH099\pkg\systems\brainAI\scripts\combat\genericVirtual.src, Line 31
program BrainNerve( params )
61: get arg 'params'
var npc		:= params[1];
62: decl local #1
63: local #0
64: 1L
65: [] 1
66: :=
67: #
var nerve_name	:= params[2];
68: decl local #2
69: local #0
70: 2L
71: [] 1
72: :=
73: #
var event	:= params[3];
74: decl local #3
75: local #0
76: 3L
77: [] 1
78: :=
79: #
var bsettings	:= params[4];
80: decl local #4
81: local #0
82: 4L
83: [] 1
84: :=
85: #
var scripts	:= params[5];
86: decl local #5
87: local #0
88: 5L
89: [] 1
90: :=
91: #
NPC_SetuptCombat( npc );
92: local #1
93: makelocal
94: jmp userfunc @679
95: #
var opponent := event.source;
96: decl local #6
97: local #3
98: get member 'source'
99: :=
100: #
AI_SetOpponent( npc, opponent );
101: local #1
102: local #6
103: 1L
104: makelocal
105: jmp userfunc @406
106: #
var min_range, max_range;
107: decl local #7
108: #
109: decl local #8
110: #
NPC_WeaponRanges( npc, min_range, max_range );
111: local #1
112: local #7
113: local #8
114: makelocal
115: jmp userfunc @712
116: #
while( npc )
117: local #1
118: if false goto 266
var dist := Distance( npc, opponent );
119: decl local #0
120: local #1
121: local #6
122: Func(2,4): Distance
123: :=
124: #
if( DoneFighting( npc, opponent, dist, bsettings ))
125: local #1
126: local #6
127: local #9
128: local #4
129: makelocal
130: jmp userfunc @558
131: if false goto 163
if( scripts.Exists( "EndFight" ))
132: local #5
133: "EndFight"
134: Call Method id exists (#55, 1 params)
135: if false goto 148
AI_StartNerve( npc, "EndFight", scripts["EndFight"].script, params );
136: local #1
137: "EndFight"
138: local #5
139: "EndFight"
140: [] 1
141: get member id 'script' (61)
142: local #0
143: 0L
144: makelocal
145: jmp userfunc @438
146: #
147: goto154
AI_WarMode( npc, 0 );
148: local #1
149: 0L
150: 0L
151: makelocal
152: jmp userfunc @482
153: #
AI_EndNerve( npc, nerve_name );
154: local #1
155: local #2
156: 0L
157: makelocal
158: jmp userfunc @312
159: #
break;
160: leave block(1)
161: goto266
162: goto256
elseif( ShouldFlee( npc, opponent, bsettings ))
163: local #1
164: local #6
165: local #4
166: makelocal
167: jmp userfunc @735
168: if false goto 189
AI_WarMode( npc, 0 );
169: local #1
170: 0L
171: 0L
172: makelocal
173: jmp userfunc @482
174: #
AI_Move( npc, opponent.x, opponent.y, NEMOVE_AWAY, NEMOVE_RUN, 20 );
175: local #1
176: local #6
177: get member id 'x' (0)
178: local #6
179: get member id 'y' (1)
180: 2L
181: 2L
182: 20L
183: 0L
184: 0L
185: makelocal
186: jmp userfunc @344
187: #
188: goto256
elseif( !GetNerveProcess( npc, "Virtual" ))
189: local #1
190: "Virtual"
191: makelocal
192: jmp userfunc @632
193: if true goto 199
SendEvent( npc, "virtual" );
194: local #1
195: "virtual"
196: Func(2,3): SendEvent
197: #
198: goto256
elseif( dist < min_range )
199: local #9
200: local #7
201: <
202: if false goto 222
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_AWAY, NEMOVE_RUN, ( bs
203: local #1
204: local #6
205: get member id 'x' (0)
206: local #6
207: get member id 'y' (1)
208: local #6
209: get member id 'z' (2)
210: 2L
211: 2L
212: local #4
213: "MinRange"
214: [] 1
215: local #9
216: -
217: 0L
218: makelocal
219: jmp userfunc @344
220: #
221: goto256
elseif( dist > max_range )
222: local #9
223: local #8
224: >
225: if false goto 245
AI_Move( npc, opponent.x, opponent.y, opponent.z, NEMOVE_TOWARD, NEMOVE_RUN, ( 
226: local #1
227: local #6
228: get member id 'x' (0)
229: local #6
230: get member id 'y' (1)
231: local #6
232: get member id 'z' (2)
233: 1L
234: 2L
235: local #9
236: local #4
237: "MaxRange"
238: [] 1
239: -
240: 0L
241: makelocal
242: jmp userfunc @344
243: #
244: goto256
npc.facing := GetFacing(npc.x, npc.y, opponent.x, opponent.y);
245: local #1
246: local #1
247: get member id 'x' (0)
248: local #1
249: get member id 'y' (1)
250: local #6
251: get member id 'x' (0)
252: local #6
253: get member id 'y' (1)
254: Func(2,34): GetFacing
255: set member id 'facing' (9) #
SleepMS(50);
256: 50L
257: Func(3,2): Sleepms
258: #
AI_ClearThoughts( npc, CLR_NERVE );
259: local #1
260: 2L
261: makelocal
262: jmp userfunc @270
263: #
264: leave block(1)
265: goto117
return 1;
266: 1L
267: progend
268: leave block(9)
269: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
270: pop param 'flags'
271: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
272: decl local #2
273: local #0
274: 1L
275: &
276: :=
277: #
var nerve	:= flags & CLR_NERVE;
278: decl local #3
279: local #0
280: 2L
281: &
282: :=
283: #
var both	:= flags & CLR_BOTH;
284: decl local #4
285: local #0
286: 3L
287: &
288: :=
289: #
if( both || brain )
290: local #4
291: local #2
292: ||
293: if false goto 300
brain := NPC.process;
294: local #1
295: get member id 'process' (64)
296: local2 := 
brain.clear_event_queue();
297: local #2
298: Call Method id clear_event_queue (#78, 0 params)
299: #
if( both || nerve )
300: local #4
301: local #3
302: ||
303: if false goto 310
nerve := GetProcess( GetPid() );
304: Func(3,4): GetPid
305: Func(3,1): GetProcess
306: local3 := 
nerve.clear_event_queue();
307: local #3
308: Call Method id clear_event_queue (#78, 0 params)
309: #
return 1;
310: 1L
311: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
312: pop param 'no_wake'
313: pop param 'nerve_name'
314: pop param 'npc'
var ev		:= struct;
315: decl local #3
316: struct
317: :=
318: #
ev.+type	:= NPCEVENT_ENDNERVE;
319: local #3
320: "type"
321: .+
322: 10485775L
323: := #
ev.+name	:= nerve_name;
324: local #3
325: "name"
326: .+
327: local #1
328: := #
ev.+WakeUp	:= no_wake;
329: local #3
330: "WakeUp"
331: .+
332: local #0
333: := #
ev.+process	:= GetProcess( GetPid() );
334: local #3
335: "process"
336: .+
337: Func(3,4): GetPid
338: Func(3,1): GetProcess
339: := #
return SendEvent( npc, ev );
340: local #2
341: local #3
342: Func(2,3): SendEvent
343: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
344: pop param 'no_wake'
345: pop param 'loop'
346: pop param 'speed'
347: pop param 'to_from'
348: pop param 'z'
349: pop param 'y'
350: pop param 'x'
351: pop param 'npc'
var ev		:= struct;
352: decl local #8
353: struct
354: :=
355: #
ev.+type	:= NPCEVENT_MOVE;
356: local #8
357: "type"
358: .+
359: 10485763L
360: := #
ev.+x		:= x;
361: local #8
362: "x"
363: .+
364: local #6
365: := #
ev.+y		:= y;
366: local #8
367: "y"
368: .+
369: local #5
370: := #
ev.+z		:= z;
371: local #8
372: "z"
373: .+
374: local #4
375: := #
ev.+direction	:= to_from;
376: local #8
377: "direction"
378: .+
379: local #3
380: := #
ev.+speed	:= speed;
381: local #8
382: "speed"
383: .+
384: local #2
385: := #
ev.+WakeUp	:= no_wake;
386: local #8
387: "WakeUp"
388: .+
389: local #0
390: := #
ev.+loop	:= loop;
391: local #8
392: "loop"
393: .+
394: local #1
395: := #
ev.+process	:= GetProcess( GetPid() );
396: local #8
397: "process"
398: .+
399: Func(3,4): GetPid
400: Func(3,1): GetProcess
401: := #
return SendEvent( npc, ev );
402: local #7
403: local #8
404: Func(2,3): SendEvent
405: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 118
function AI_SetOpponent( npc, opponent, no_wake:=WAKEUP )
406: pop param 'no_wake'
407: pop param 'opponent'
408: pop param 'npc'
var ev		:= struct;
409: decl local #3
410: struct
411: :=
412: #
ev.+type	:= NPCEVENT_OPPONENT;
413: local #3
414: "type"
415: .+
416: 10485764L
417: := #
ev.+source	:= opponent;
418: local #3
419: "source"
420: .+
421: local #1
422: := #
ev.+WakeUp	:= no_wake;
423: local #3
424: "WakeUp"
425: .+
426: local #0
427: := #
ev.+process	:= GetProcess( GetPid() );
428: local #3
429: "process"
430: .+
431: Func(3,4): GetPid
432: Func(3,1): GetProcess
433: := #
return SendEvent( npc, ev );
434: local #2
435: local #3
436: Func(2,3): SendEvent
437: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 152
function AI_StartNerve( npc, nerve_name, script_name, data, no_wake:=NOWAKE )
438: pop param 'no_wake'
439: pop param 'data'
440: pop param 'script_name'
441: pop param 'nerve_name'
442: pop param 'npc'
var ev		:= struct;
443: decl local #5
444: struct
445: :=
446: #
ev.+type	:= NPCEVENT_STARTNERVE;
447: local #5
448: "type"
449: .+
450: 10485776L
451: := #
ev.+name	:= nerve_name;
452: local #5
453: "name"
454: .+
455: local #3
456: := #
ev.+script	:= script_name;
457: local #5
458: "script"
459: .+
460: local #2
461: := #
ev.+data	:= data;
462: local #5
463: "data"
464: .+
465: local #1
466: := #
ev.+WakeUp	:= no_wake;
467: local #5
468: "WakeUp"
469: .+
470: local #0
471: := #
ev.+process	:= GetProcess( GetPid() );
472: local #5
473: "process"
474: .+
475: Func(3,4): GetPid
476: Func(3,1): GetProcess
477: := #
return SendEvent( npc, ev );
478: local #4
479: local #5
480: Func(2,3): SendEvent
481: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 211
function AI_WarMode( npc, mode:=0, no_wake:=NOWAKE )
482: pop param 'no_wake'
483: pop param 'mode'
484: pop param 'npc'
var ev		:= struct;
485: decl local #3
486: struct
487: :=
488: #
ev.+type	:= NPCEVENT_WARMODE;
489: local #3
490: "type"
491: .+
492: 10485767L
493: := #
ev.+value	:= mode;
494: local #3
495: "value"
496: .+
497: local #1
498: := #
ev.+WakeUp	:= no_wake;
499: local #3
500: "WakeUp"
501: .+
502: local #0
503: := #
ev.+process	:= GetProcess( GetPid() );
504: local #3
505: "process"
506: .+
507: Func(3,4): GetPid
508: Func(3,1): GetProcess
509: := #
return SendEvent( npc, ev );
510: local #2
511: local #3
512: Func(2,3): SendEvent
513: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
514: pop param byref 'cfg_file'
515: pop param 'elem_name'
if( !cfg_file )
516: local #0
517: if true goto 521
cfg_file := Classes_GetSettingsCfgFile();
518: makelocal
519: jmp userfunc @542
520: local0 := 
var elem := cfg_file[elem_name];
521: decl local #2
522: local #0
523: local #1
524: [] 1
525: :=
526: #
if( elem.errortext )
527: local #2
528: get member 'errortext'
529: if false goto 540
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
530: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
531: local #1
532: +
533: "] ->"
534: +
535: local #2
536: get member 'errortext'
537: +
538: Func(3,0): SysLog
539: #
return elem;
540: local #2
541: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
542: decl local #0
543: ":classes:settings"
544: Func(5,0): ReadConfigFile
545: :=
546: #
if( cfg.errortext )
547: local #0
548: get member 'errortext'
549: if false goto 556
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
550: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
551: local #0
552: get member 'errortext'
553: +
554: Func(3,0): SysLog
555: #
return cfg;
556: local #0
557: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 33
function DoneFighting( npc, opponent, byref dist, byref settings )
558: pop param byref 'settings'
559: pop param byref 'dist'
560: pop param 'opponent'
561: pop param 'npc'
if( !opponent )
562: local #2
563: if true goto 567
return 1;
564: 1L
565: return
566: goto624
elseif( opponent.dead )
567: local #2
568: get member id 'dead' (39)
569: if false goto 573
return 1;
570: 1L
571: return
572: goto624
elseif( opponent.concealed )
573: local #2
574: get member id 'concealed' (33)
575: if false goto 579
return 1;
576: 1L
577: return
578: goto624
elseif( dist > 30 )
579: local #1
580: 30L
581: >
582: if false goto 586
return 1;
583: 1L
584: return
585: goto624
elseif( GetObjProperty( npc, "#Peacemaking" ) > ReadGameClock() )
586: local #3
587: "#Peacemaking"
588: Func(2,2): GetObjProperty
589: Func(2,18): ReadGameClock
590: >
591: if false goto 595
return 1;
592: 1L
593: return
594: goto624
elseif( opponent.hidden )
595: local #2
596: get member id 'hidden' (32)
597: if false goto 611
if( !DetectHidden( npc, opponent ))
598: local #3
599: local #2
600: makelocal
601: jmp userfunc @891
602: if true goto 608
pathfind_ticker += 1;
603: global #5
604: 1L
605: +=
606: #
607: goto610
pathfind_ticker := 0;
608: 0L
609: global5 := 
610: goto624
elseif( !CheckForPathLOS( npc, opponent, settings ))
611: local #3
612: local #2
613: local #0
614: makelocal
615: jmp userfunc @819
616: if true goto 622
pathfind_ticker += 1;
617: global #5
618: 1L
619: +=
620: #
621: goto624
pathfind_ticker := 0;
622: 0L
623: global5 := 
if( pathfind_ticker >= 60 )
624: global #5
625: 60L
626: >=
627: if false goto 630
return 1;
628: 1L
629: return
return 0;
630: 0L
631: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
632: pop param 'nerve_name'
633: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
634: decl local #2
635: local #1
636: makelocal
637: jmp userfunc @662
638: :=
639: #
if( nerve_dict.Exists( nerve_name ))
640: local #2
641: local #0
642: Call Method id exists (#55, 1 params)
643: if false goto 652
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
644: local #2
645: local #0
646: [] 1
647: get member id 'pid' (103)
648: Func(0,2): CInt
649: Func(3,1): GetProcess
650: return
651: goto660
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
652: error
653: "Error::GetNerveProcess() - Invalid nerve name  ["
654: local #0
655: +
656: "]"
657: +
658: addmember-assign(errortext)
659: return
660: 0L
661: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
662: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
663: decl local #1
664: local #0
665: "#NerveInfo"
666: Func(2,2): GetObjProperty
667: :=
668: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
669: local #1
670: Func(0,1): TypeOf
671: Func(0,0): Lower
672: "dictionary"
673: <>
674: if false goto 677
nerve_dict := dictionary;
675: dictionary
676: local1 := 
return nerve_dict;
677: local #1
678: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 232
function NPC_SetuptCombat( npc )
679: pop param 'npc'
var battle_cry := GetObjProperty( npc, "BattleCryWord" );
680: decl local #1
681: local #0
682: "BattleCryWord"
683: Func(2,2): GetObjProperty
684: :=
685: #
if( battle_cry )
686: local #1
687: if false goto 697
AI_Speak( npc, battle_cry.RandomEntry() );
688: local #0
689: local #1
690: Call Method id randomentry (#101, 0 params)
691: "default"
692: 0L
693: 0L
694: makelocal
695: jmp userfunc @766
696: #
if( npc.hidden )
697: local #0
698: get member id 'hidden' (32)
699: if false goto 710
npc.hidden := 0;
700: local #0
701: 0L
702: set member id 'hidden' (32) #
PrintTextAbove( npc, "*Springs from hiding!*", 3, 55 );
703: local #0
704: "*Springs from hiding!*"
705: 3L
706: 55L
707: 0L
708: Func(2,0): PrintTextAbove
709: #
return 1;
710: 1L
711: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 20
function NPC_WeaponRanges( npc, byref min_range, byref max_range )
712: pop param byref 'max_range'
713: pop param byref 'min_range'
714: pop param 'npc'
min_range := CInt( CS_GetWeaponInfo( npc.weapon, "MinRange" ));
715: local #2
716: get member id 'weapon' (42)
717: "MinRange"
718: makelocal
719: jmp userfunc @873
720: Func(0,2): CInt
721: local1 := 
max_range := CInt( CS_GetWeaponInfo( npc.weapon, "MaxRange" ));
722: local #2
723: get member id 'weapon' (42)
724: "MaxRange"
725: makelocal
726: jmp userfunc @873
727: Func(0,2): CInt
728: local0 := 
if( !max_range )
729: local #0
730: if true goto 733
max_range := 1;
731: 1L
732: local0 := 
return 1;
733: 1L
734: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 85
function ShouldFlee( npc, opponent, byref settings )
735: pop param byref 'settings'
736: pop param 'opponent'
737: pop param 'npc'
return 0;
738: 0L
739: return
if( opponent.IsA( POLCLASS_NPC ))
740: local #1
741: 4L
742: Call Method id isa (#0, 1 params)
743: if false goto 746
return 0;
744: 0L
745: return
var flee_level := NPC_GetFleeLevel( npc, settings["FleeLevel"] );
746: decl local #3
747: local #2
748: local #0
749: "FleeLevel"
750: [] 1
751: makelocal
752: jmp userfunc @1170
753: :=
754: #
if( flee_level > AP_GetVital( npc, "Hits" ))
755: local #3
756: local #2
757: "Hits"
758: makelocal
759: jmp userfunc @810
760: >
761: if false goto 764
return 1;
762: 1L
763: return
return 0;
764: 0L
765: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
766: pop param 'no_wake'
767: pop param 'do_event'
768: pop param 'text_type'
769: pop param 'text'
770: pop param 'npc'
var ev		:= struct;
771: decl local #5
772: struct
773: :=
774: #
ev.+type	:= NPCEVENT_SPEAK;
775: local #5
776: "type"
777: .+
778: 10485765L
779: := #
ev.+text	:= text;
780: local #5
781: "text"
782: .+
783: local #3
784: := #
ev.+texttype	:= text_type;
785: local #5
786: "texttype"
787: .+
788: local #2
789: := #
ev.+doevent	:= do_event;
790: local #5
791: "doevent"
792: .+
793: local #1
794: := #
ev.+WakeUp	:= no_wake;
795: local #5
796: "WakeUp"
797: .+
798: local #0
799: := #
ev.+process	:= GetProcess( GetPid() );
800: local #5
801: "process"
802: .+
803: Func(3,4): GetPid
804: Func(3,1): GetProcess
805: := #
return SendEvent( npc, ev );
806: local #4
807: local #5
808: Func(2,3): SendEvent
809: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 40
function AP_GetVital( mobile, vital_name )
810: pop param 'vital_name'
811: pop param 'mobile'
return CDbl( GetVital( mobile, vital_name )) / 100.0;
812: local #1
813: local #0
814: Func(6,1): GetVital
815: Func(0,3): CDbl
816: 100LF
817: /
818: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 64
function CheckForPathLOS( npc, destination, settings )
819: pop param 'settings'
820: pop param 'destination'
821: pop param 'npc'
if( !CheckLosAt( npc, destination.x, destination.y, destination.z ))
822: local #2
823: local #1
824: get member id 'x' (0)
825: local #1
826: get member id 'y' (1)
827: local #1
828: get member id 'z' (2)
829: Func(2,10): CheckLosAt
830: if true goto 871
var pathfind_range := CInt( settings["AreaSize"] );
831: decl local #0
832: local #0
833: "AreaSize"
834: [] 1
835: Func(0,2): CInt
836: :=
837: #
if( pathfind_range < 5 )
838: local #3
839: 5L
840: <
841: if false goto 844
pathfind_range := 5;
842: 5L
843: local3 := 
var flags := FP_IGNORE_MOBILES;
844: decl local #1
845: 1L
846: :=
847: #
if( settings["OpenDoors"] )
848: local #0
849: "OpenDoors"
850: [] 1
851: if false goto 856
flags += FP_IGNORE_DOORS;
852: local #4
853: 2L
854: +=
855: #
if( !GetNewPath( npc, destination.x, destination.y, destination.z, pathfind_ran
856: local #2
857: local #1
858: get member id 'x' (0)
859: local #1
860: get member id 'y' (1)
861: local #1
862: get member id 'z' (2)
863: local #3
864: local #4
865: makelocal
866: jmp userfunc @975
867: if true goto 870
return 0;
868: 0L
869: return
870: leave block(2)
return 1;
871: 1L
872: return
c:/ZH099/pkg/items/weapons/include/weaponInfo.inc, Line 8
function CS_GetWeaponInfo( weapon, prop_name )
873: pop param 'prop_name'
874: pop param 'weapon'
var config := ReadConfigFile( ":*:itemdesc" );
875: decl local #2
876: ":*:itemdesc"
877: Func(5,0): ReadConfigFile
878: :=
879: #
var info := config[weapon.objtype];
880: decl local #3
881: local #2
882: local #1
883: get member id 'objtype' (4)
884: [] 1
885: :=
886: #
return GetConfigString( info, prop_name );
887: local #3
888: local #0
889: Func(5,6): GetConfigString
890: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
891: pop param 'hider'
892: pop param 'mobile'
if( !hider.hidden )
893: local #0
894: get member id 'hidden' (32)
895: if true goto 898
return 1; //Already revealed.
896: 1L
897: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
898: decl local #2
899: local #1
900: "DetectingHidden"
901: makelocal
902: jmp userfunc @1222
903: :=
904: #
905: decl local #3
906: local #0
907: "Hiding"
908: makelocal
909: jmp userfunc @1222
910: :=
911: #
mobile_skill *= ClasseBonus( mobile, THIEF );
912: local #2
913: local #1
914: "IsThief"
915: makelocal
916: jmp userfunc @1261
917: *=
918: #
hider_skill *= ClasseBonus( hider, THIEF );
919: local #3
920: local #0
921: "IsThief"
922: makelocal
923: jmp userfunc @1261
924: *=
925: #
if( mobile.IsA( POLCLASS_NPC ))
926: local #1
927: 4L
928: Call Method id isa (#0, 1 params)
929: if false goto 938
if( !mobile_skill )
930: local #2
931: if true goto 934
return 0;
932: 0L
933: return
mobile_skill *= 2;
934: local #2
935: 2L
936: *=
937: #
var chance := CInt( mobile_skill - hider_skill );
938: decl local #4
939: local #2
940: local #3
941: -
942: Func(0,2): CInt
943: :=
944: #
if( chance < 0 )
945: local #4
946: 0L
947: <
948: if false goto 951
chance := 5;
949: 5L
950: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
951: 100L
952: Func(8,2): RandomInt
953: local #4
954: >
955: local #1
956: get member id 'multi' (12)
957: !
958: &&
959: if false goto 962
return 0;
960: 0L
961: return
hider.hidden := 0;
962: local #0
963: 0L
964: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
965: local #0
966: "You have been discovered!"
967: local #0
968: 3L
969: 1000L
970: 0L
971: Func(2,28): PrintTextAbovePrivate
972: #
return 1;
973: 1L
974: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 160
function GetNewPath( npc, x, y, z, pathfind_range, flags )
975: pop param 'flags'
976: pop param 'pathfind_range'
977: pop param 'z'
978: pop param 'y'
979: pop param 'x'
980: pop param 'npc'
var search_field := ListItemsNearLocation( npc.x, npc.y, npc.z, 2, npc.realm );
981: decl local #6
982: local #5
983: get member id 'x' (0)
984: local #5
985: get member id 'y' (1)
986: local #5
987: get member id 'z' (2)
988: 2L
989: local #5
990: get member id 'realm' (112)
991: Func(2,30): ListItemsNearLocation
992: :=
993: #
foreach item in search_field
994: local #6
995: initforeach @1078
SleepMS(5);
996: 5L
997: Func(3,2): Sleepms
998: #
if( item.movable ) //Automatic Anti-Blocking with items.
999: local #7
1000: get member id 'movable' (20)
1001: if false goto 1041
var npc_backpack := NPC_SetupBackPack( npc );
1002: decl local #0
1003: local #5
1004: makelocal
1005: jmp userfunc @1184
1006: :=
1007: #
var move_item := MoveItemToContainer( item, npc_backpack );
1008: decl local #1
1009: local #7
1010: local #10
1011: -1L
1012: -1L
1013: Func(2,29): MoveItemToContainer
1014: :=
1015: #
if( move_item.errortext )
1016: local #11
1017: get member 'errortext'
1018: if false goto 1031
PrintTextAbove( npc, "Error looting items -->"+move_item.errortext );
1019: local #5
1020: "Error looting items -->"
1021: local #11
1022: get member 'errortext'
1023: +
1024: 3L
1025: 1000L
1026: 0L
1027: Func(2,0): PrintTextAbove
1028: #
continue;
1029: leave block(2)
1030: goto1078
AI_Speak( npc, "*Yoink*", SPEAK_TEXTTYPE_YELL, SPEAK_DOEVENT_ENABLE );
1031: local #5
1032: "*Yoink*"
1033: "yell"
1034: 1L
1035: 0L
1036: makelocal
1037: jmp userfunc @766
1038: #
1039: leave block(2)
1040: goto1078
elseif( AP_GetSkill( npc, MAGERY )&& GetObjProperty( item, "SummonedField" )) /
1041: local #5
1042: "Magery"
1043: makelocal
1044: jmp userfunc @1222
1045: local #7
1046: "SummonedField"
1047: Func(2,2): GetObjProperty
1048: &&
1049: if false goto 1078
var script := Start_Script( ":magery:spellStarter", array{ npc, 34, 0, item } )
1050: decl local #0
1051: ":magery:spellStarter"
1052: array
1053: local #5
1054: init{}
1055: 34L
1056: init{}
1057: 0L
1058: init{}
1059: local #7
1060: init{}
1061: Func(3,3): Start_Script
1062: :=
1063: #
if( script.errortext )
1064: local #10
1065: get member 'errortext'
1066: if false goto 1075
PrintTextAbove( npc, script.errortext );
1067: local #5
1068: local #10
1069: get member 'errortext'
1070: 3L
1071: 1000L
1072: 0L
1073: Func(2,0): PrintTextAbove
1074: #
break;
1075: leave block(1)
1076: goto1079
1077: leave block(1)
1078: stepforeach @996
1079: leave block(3)
var path := FindPath( npc.x, npc.y, npc.z, x, y, z, npc.realm, flags, pathfind_
1080: decl local #7
1081: local #5
1082: get member id 'x' (0)
1083: local #5
1084: get member id 'y' (1)
1085: local #5
1086: get member id 'z' (2)
1087: local #4
1088: local #3
1089: local #2
1090: local #5
1091: get member id 'realm' (112)
1092: local #0
1093: local #1
1094: Func(2,31): FindPath
1095: :=
1096: #
if( !path )
1097: local #7
1098: if true goto 1101
return 0;
1099: 0L
1100: return
var move_x := CInt( path[1].x ),
1101: decl local #8
1102: local #7
1103: 1L
1104: [] 1
1105: get member id 'x' (0)
1106: Func(0,2): CInt
1107: :=
1108: #
1109: decl local #9
1110: local #7
1111: 1L
1112: [] 1
1113: get member id 'y' (1)
1114: Func(0,2): CInt
1115: :=
1116: #
1117: decl local #10
1118: local #7
1119: 1L
1120: [] 1
1121: get member id 'z' (2)
1122: Func(0,2): CInt
1123: :=
1124: #
var search_doors := ListItemsAtLocation( move_x, mobe_y, mobe_z, npc.realm );
1125: decl local #11
1126: local #8
1127: local #9
1128: local #10
1129: local #5
1130: get member id 'realm' (112)
1131: Func(2,32): ListItemsAtLocation
1132: :=
1133: #
if( search_doors.Size() )
1134: local #11
1135: Call Method id size (#48, 0 params)
1136: if false goto 1164
foreach item in search_doors
1137: local #11
1138: initforeach @1162
if( item.IsDoor() )
1139: local #12
1140: Call Method isdoor (0 params)
1141: if false goto 1158
if( item.locked )
1142: local #12
1143: get member id 'locked' (70)
1144: if false goto 1148
return 0;
1145: 0L
1146: return
1147: goto1152
elseif( item.IsOpen() )
1148: local #12
1149: Call Method isopen (0 params)
1150: if false goto 1152
break;
1151: goto1163
UseItem( item, npc );
1152: local #12
1153: local #5
1154: Func(2,33): UseItem
1155: #
break;
1156: goto1163
1157: goto1159
continue;
1158: goto1162
SleepMS(5);
1159: 5L
1160: Func(3,2): Sleepms
1161: #
1162: stepforeach @1139
1163: leave block(3)
return array{move_x, mobe_y};
1164: array
1165: local #8
1166: init{}
1167: local #9
1168: init{}
1169: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 15
function NPC_GetFleeLevel( npc, flee_percent )
1170: pop param 'flee_percent'
1171: pop param 'npc'
return CInt( CDbl( AP_GetVitalMaximumValue( npc, "Hits" )) * ( CDbl( flee_perce
1172: local #1
1173: "Hits"
1174: makelocal
1175: jmp userfunc @1252
1176: Func(0,3): CDbl
1177: local #0
1178: Func(0,3): CDbl
1179: 100LF
1180: /
1181: *
1182: Func(0,2): CInt
1183: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
1184: pop param 'mobile'
if( !mobile.backpack )
1185: local #0
1186: get member id 'backpack' (41)
1187: if true goto 1219
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
1188: decl local #0
1189: local #0
1190: get member id 'x' (0)
1191: local #0
1192: get member id 'y' (1)
1193: local #0
1194: get member id 'z' (2)
1195: "BackPack"
1196: 1L
1197: local #0
1198: get member id 'realm' (112)
1199: Func(2,20): CreateItemAtLocation
1200: :=
1201: #
var result := EquipItem( mobile, backpack );
1202: decl local #1
1203: local #0
1204: local #1
1205: Func(2,21): EquipItem
1206: :=
1207: #
if( !result )
1208: local #2
1209: if true goto 1216
DestroyItem( backpack );
1210: local #1
1211: Func(2,22): DestroyItem
1212: #
return result;
1213: local #2
1214: return
1215: goto1218
return backpack;
1216: local #1
1217: return
1218: leave block(2)
return mobile.backpack;
1219: local #0
1220: get member id 'backpack' (41)
1221: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
1222: pop param 'skill_name'
1223: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
1224: local #1
1225: local #0
1226: makelocal
1227: jmp userfunc @1243
1228: local #1
1229: local #0
1230: makelocal
1231: jmp userfunc @1234
1232: +
1233: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
1234: pop param 'skill_name'
1235: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
1236: local #1
1237: local #0
1238: Func(7,1): GetAttributeTemporaryMod
1239: Func(0,3): CDbl
1240: 10LF
1241: /
1242: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
1243: pop param 'skill_name'
1244: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
1245: local #1
1246: local #0
1247: Func(7,0): GetAttributeBaseValue
1248: Func(0,3): CDbl
1249: 10LF
1250: /
1251: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
1252: pop param 'vital_name'
1253: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
1254: local #1
1255: local #0
1256: Func(6,2): GetVitalMaximumValue
1257: Func(0,3): CDbl
1258: 100LF
1259: /
1260: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
1261: pop param 'classe'
1262: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
1263: decl local #2
1264: local #1
1265: local #0
1266: Func(2,2): GetObjProperty
1267: Func(0,2): CInt
1268: :=
1269: #
if( level )
1270: local #2
1271: if false goto 1281
return CDbl( settings.BonusLevel * level ) + 1;
1272: global #0
1273: get member 'BonusLevel'
1274: local #2
1275: *
1276: Func(0,3): CDbl
1277: 1L
1278: +
1279: return
1280: goto1283
return 1;
1281: 1L
1282: return
1283: 0L
1284: return
