C:\ZH099\pkg\systems\brainAI\scripts\leftArea\skunk.src, Line 13
program BrainNerve( params )
include ":brainAI:npcError";
0: get arg 'params'
var npc		:= params[1];
1: decl local #1
2: local #0
3: 1L
4: [] 1
5: :=
6: #
var event	:= params[3];
7: decl local #2
8: local #0
9: 3L
10: [] 1
11: :=
12: #
params := 0; // Not needed anymore.
13: 0L
14: local0 := 
while( npc )
15: local #1
16: if false goto 39
if( event )
17: local #2
18: if false goto 32
case( event.type )
19: local #2
20: get member 'type'
21: casejmp
	32: @22
	default: @29
LeftArea( npc, event );
22: local #1
23: local #2
24: makelocal
25: jmp userfunc @43
26: #
break;
27: goto28
28: goto30
break;
29: goto30
event := 0;
30: 0L
31: local2 := 
SleepMS(5);
32: 5L
33: Func(3,2): Sleepms
34: #
event := Wait_For_Event(1);
35: 1L
36: Func(3,7): Wait_For_Event
37: local2 := 
38: goto15
return 1;
39: 1L
40: progend
41: leave block(3)
42: progend
C:\ZH099\pkg\systems\brainAI\scripts\leftArea\skunk.src, Line 42
function LeftArea( npc, byref event )
43: pop param byref 'event'
44: pop param 'npc'
var source := event.source;
45: decl local #2
46: local #0
47: get member 'source'
48: :=
49: #
if( source.npctemplate )
50: local #2
51: get member id 'npctemplate' (62)
52: if false goto 56
return 0;
53: 0L
54: return
55: goto78
elseif( NPC_RemoveFromWatchList( npc, source ))
56: local #1
57: local #2
58: makelocal
59: jmp userfunc @97
60: if false goto 78
if( NPC_LoadWatchList( npc ).Size() == 0 )
61: local #1
62: makelocal
63: jmp userfunc @80
64: Call Method id size (#48, 0 params)
65: 0L
66: ==
67: if false goto 76
AI_Speak( npc, "*returns to standing on all fours*" );
68: local #1
69: "*returns to standing on all fours*"
70: "default"
71: 0L
72: 0L
73: makelocal
74: jmp userfunc @136
75: #
return 1;
76: 1L
77: return
return 0;
78: 0L
79: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 23
function NPC_LoadWatchList( npc )
80: pop param 'npc'
var watch_dict := GetObjProperty( npc, "#WatchList" );
81: decl local #1
82: local #0
83: "#WatchList"
84: Func(2,2): GetObjProperty
85: :=
86: #
if( Lower( TypeOf( watch_dict )) != "dictionary" )
87: local #1
88: Func(0,1): TypeOf
89: Func(0,0): Lower
90: "dictionary"
91: <>
92: if false goto 95
watch_dict := dictionary;
93: dictionary
94: local1 := 
return watch_dict;
95: local #1
96: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 54
function NPC_RemoveFromWatchList( npc, mobile )
97: pop param 'mobile'
98: pop param 'npc'
if( mobile.IsA( POLCLASS_MOBILE ))
99: local #0
100: 3L
101: Call Method id isa (#0, 1 params)
102: if false goto 106
mobile := mobile.serial;
103: local #0
104: get member id 'serial' (6)
105: local0 := 
var watch_dict := NPC_LoadWatchList( npc );
106: decl local #2
107: local #1
108: makelocal
109: jmp userfunc @80
110: :=
111: #
if( watch_dict.Exists( mobile ))
112: local #2
113: local #0
114: Call Method id exists (#55, 1 params)
115: if false goto 127
watch_dict.Erase( mobile );
116: local #2
117: local #0
118: Call Method id erase (#49, 1 params)
119: #
NPC_SaveWatchList( npc, watch_dict );
120: local #1
121: local #2
122: makelocal
123: jmp userfunc @129
124: #
return 1;
125: 1L
126: return
return 0;
127: 0L
128: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 33
function NPC_SaveWatchList( npc, dict_list )
129: pop param 'dict_list'
130: pop param 'npc'
return SetObjProperty( npc, "#WatchList", dict_list );
131: local #1
132: "#WatchList"
133: local #0
134: Func(2,1): SetObjProperty
135: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
136: pop param 'no_wake'
137: pop param 'do_event'
138: pop param 'text_type'
139: pop param 'text'
140: pop param 'npc'
var ev		:= struct;
141: decl local #5
142: struct
143: :=
144: #
ev.+type	:= NPCEVENT_SPEAK;
145: local #5
146: "type"
147: .+
148: 10485765L
149: := #
ev.+text	:= text;
150: local #5
151: "text"
152: .+
153: local #3
154: := #
ev.+texttype	:= text_type;
155: local #5
156: "texttype"
157: .+
158: local #2
159: := #
ev.+doevent	:= do_event;
160: local #5
161: "doevent"
162: .+
163: local #1
164: := #
ev.+WakeUp	:= no_wake;
165: local #5
166: "WakeUp"
167: .+
168: local #0
169: := #
ev.+process	:= GetProcess( GetPid() );
170: local #5
171: "process"
172: .+
173: Func(3,4): GetPid
174: Func(3,1): GetProcess
175: := #
return SendEvent( npc, ev );
176: local #4
177: local #5
178: Func(2,3): SendEvent
179: return
