C:\ZH099\pkg\systems\brainAI\scripts\doubleClick\push.src, Line 17
program BrainNerve( params )
enum GRAPHIC_FIRE
0: get arg 'params'
var npc		:= params[1];
1: decl local #1
2: local #0
3: 1L
4: [] 1
5: :=
6: #
var event	:= params[3];
7: decl local #2
8: local #0
9: 3L
10: [] 1
11: :=
12: #
var settings	:= params[4];
13: decl local #3
14: local #0
15: 4L
16: [] 1
17: :=
18: #
params := 0; // Not needed anymore.
19: 0L
20: local0 := 
while( npc )
21: local #1
22: if false goto 46
if( event )
23: local #2
24: if false goto 39
case( event.type )
25: local #2
26: get member 'type'
27: casejmp
	2048: @28
	default: @36
PushEvent( npc, event, settings );
28: local #1
29: local #2
30: local #3
31: makelocal
32: jmp userfunc @50
33: #
break;
34: goto35
35: goto37
break;
36: goto37
event := 0;
37: 0L
38: local2 := 
SleepMS(5);
39: 5L
40: Func(3,2): Sleepms
41: #
event := Wait_For_Event(1);
42: 1L
43: Func(3,6): Wait_For_Event
44: local2 := 
45: goto21
return 1;
46: 1L
47: progend
48: leave block(4)
49: progend
C:\ZH099\pkg\systems\brainAI\scripts\doubleClick\push.src, Line 46
function PushEvent( npc, byref event, byref settings )
50: pop param byref 'settings'
51: pop param byref 'event'
52: pop param 'npc'
var source := event.source;
53: decl local #3
54: local #1
55: get member 'source'
56: :=
57: #
if( source.hidden )
58: local #3
59: get member id 'hidden' (32)
60: if false goto 64
return 0;
61: 0L
62: return
63: goto88
elseif( source.IsA( POLCLASS_NPC ))
64: local #3
65: 4L
66: Call Method id isa (#0, 1 params)
67: if false goto 71
return 0;
68: 0L
69: return
70: goto88
elseif( !CheckLineOfSight( source, npc ))
71: local #3
72: local #2
73: Func(2,5): CheckLineOfSight
74: if true goto 78
return 0;
75: 0L
76: return
77: goto88
elseif( Distance( source, npc ) <= settings["DblClickRange"] )
78: local #3
79: local #2
80: Func(2,4): Distance
81: local #0
82: "DblClickRange"
83: [] 1
84: <=
85: if false goto 88
return 0;
86: 0L
87: return
PrintTextAbove( source, "*push*" );
88: local #3
89: "*push*"
90: 3L
91: 1000L
92: 0L
93: Func(2,0): PrintTextAbove
94: #
PlaySoundEffect( npc, NPC_GetDamagedSound( npc ));
95: local #2
96: local #2
97: makelocal
98: jmp userfunc @194
99: Func(2,6): PlaySoundEffect
100: #
PerformAction( npc, ANIM_STAND_2HAND );
101: local #2
102: 8L
103: 5L
104: 1L
105: 0L
106: 0L
107: 1L
108: Func(2,7): PerformAction
109: #
Sleep(2);
110: 2L
111: Func(3,7): Sleep
112: #
AI_Move( npc, event.source.x, event.source.y, event.source.z, NEMOVE_AWAY, NEMO
113: local #2
114: local #1
115: get member 'source'
116: get member id 'x' (0)
117: local #1
118: get member 'source'
119: get member id 'y' (1)
120: local #1
121: get member 'source'
122: get member id 'z' (2)
123: 2L
124: 1L
125: 1L
126: 0L
127: makelocal
128: jmp userfunc @132
129: #
return 1;
130: 1L
131: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 88
function AI_Move( npc, x, y, z, to_from:=NEMOVE_TOWARD, speed:=NEMOVE_RUN, loop
132: pop param 'no_wake'
133: pop param 'loop'
134: pop param 'speed'
135: pop param 'to_from'
136: pop param 'z'
137: pop param 'y'
138: pop param 'x'
139: pop param 'npc'
var ev		:= struct;
140: decl local #8
141: struct
142: :=
143: #
ev.+type	:= NPCEVENT_MOVE;
144: local #8
145: "type"
146: .+
147: 10485763L
148: := #
ev.+x		:= x;
149: local #8
150: "x"
151: .+
152: local #6
153: := #
ev.+y		:= y;
154: local #8
155: "y"
156: .+
157: local #5
158: := #
ev.+z		:= z;
159: local #8
160: "z"
161: .+
162: local #4
163: := #
ev.+direction	:= to_from;
164: local #8
165: "direction"
166: .+
167: local #3
168: := #
ev.+speed	:= speed;
169: local #8
170: "speed"
171: .+
172: local #2
173: := #
ev.+WakeUp	:= no_wake;
174: local #8
175: "WakeUp"
176: .+
177: local #0
178: := #
ev.+loop	:= loop;
179: local #8
180: "loop"
181: .+
182: local #1
183: := #
ev.+process	:= GetProcess( GetPid() );
184: local #8
185: "process"
186: .+
187: Func(3,4): GetPid
188: Func(3,1): GetProcess
189: := #
return SendEvent( npc, ev );
190: local #7
191: local #8
192: Func(2,3): SendEvent
193: return
c:/ZH099/pkg/systems/brainAI/include/npcEffects.inc, Line 82
function NPC_GetDamagedSound( source )
194: pop param 'source'
var source_effects := NPC_GetNPCConfig( source.npctemplate );
195: decl local #1
196: local #0
197: get member id 'npctemplate' (62)
198: makelocal
199: jmp userfunc @222
200: :=
201: #
if( !source_effects )
202: local #1
203: if true goto 206
return 0;
204: 0L
205: return
var damaged_sound_list := GetConfigStringArray( source_effects, "DamagedSound" 
206: decl local #2
207: local #1
208: "DamagedSound"
209: Func(5,2): GetConfigStringArray
210: :=
211: #
if( TypeOf( damaged_sound_list ) != "Array" )
212: local #2
213: Func(0,1): TypeOf
214: "Array"
215: <>
216: if false goto 219
return 0;
217: 0L
218: return
return damaged_sound_list.RandomEntry();
219: local #2
220: Call Method id randomentry (#101, 0 params)
221: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
222: pop param 'template'
if( !template.package )
223: local #0
224: get member 'package'
225: if true goto 230
template := NPC_ParseTemplateName( template );
226: local #0
227: makelocal
228: jmp userfunc @279
229: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
230: decl local #1
231: ":"
232: local #0
233: get member 'package'
234: +
235: ":npcdesc"
236: +
237: Func(5,0): ReadConfigFile
238: :=
239: #
if( npc_cfg.errortext )
240: local #1
241: get member 'errortext'
242: if false goto 255
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
243: error
244: "Error::NPC_GetNPCConfig() - Could not open :"
245: local #0
246: get member 'package'
247: +
248: ":npcdesc ->"
249: +
250: local #1
251: get member 'errortext'
252: +
253: addmember-assign(errortext)
254: return
var cfg_elem := npc_cfg[template.template];
255: decl local #2
256: local #1
257: local #0
258: get member 'template'
259: [] 1
260: :=
261: #
if( cfg_elem.errortext )
262: local #2
263: get member 'errortext'
264: if false goto 277
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
265: error
266: "Error::NPC_GetNPCConfig() - Could not find elem ["
267: local #0
268: get member 'template'
269: +
270: "] ->"
271: +
272: local #2
273: get member 'errortext'
274: +
275: addmember-assign(errortext)
276: return
return cfg_elem;
277: local #2
278: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
279: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
280: local #0
281: 4L
282: Call Method id isa (#0, 1 params)
283: if false goto 287
template_name := template_name.npctemplate;
284: local #0
285: get member id 'npctemplate' (62)
286: local0 := 
var colon_a := Find( template_name, ":", 1 );
287: decl local #1
288: local #0
289: ":"
290: 1L
291: Func(0,3): Find
292: :=
293: #
var colon_b := Find( template_name, ":", 2 );
294: decl local #2
295: local #0
296: ":"
297: 2L
298: Func(0,3): Find
299: :=
300: #
var parsed := struct{"package", "template"};
301: decl local #3
302: struct
303: addmember(package)
304: addmember(template)
305: :=
306: #
if( !colon_a || !colon_b )
307: local #1
308: !
309: local #2
310: !
311: ||
312: if false goto 320
parsed.package := "";
313: local #3
314: ""
315: set member 'package' #
parsed.template := template_name;
316: local #3
317: local #0
318: set member 'template' #
319: goto339
parsed.package := template_name[colon_a+1, colon_b-2];
320: local #3
321: local #0
322: local #1
323: 1L
324: +
325: local #2
326: 2L
327: -
328: [,]
329: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
330: local #3
331: local #0
332: local #2
333: 1L
334: +
335: local #0
336: Func(0,4): Len
337: [,]
338: set member 'template' #
return parsed;
339: local #3
340: return
