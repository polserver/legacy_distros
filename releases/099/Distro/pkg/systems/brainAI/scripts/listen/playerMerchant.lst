c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @147
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 35
var container_type	:= "BankBox";
11: decl global #2
12: "BankBox"
13: :=
14: #
var STORAGE_DEBUG	:= 1;
15: decl global #3
16: 1L
17: :=
18: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 24
var g_datafile := DFOpenDataFile( ":playerMerchant:playerMerchant", DF_CREATE )
19: decl global #4
20: ":playerMerchant:playerMerchant"
21: 1L
22: 0L
23: makelocal
24: jmp userfunc @223
25: :=
26: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 26
program BrainNerve( params )
27: get arg 'params'
var npc		:= params[1];
28: decl local #1
29: local #0
30: 1L
31: [] 1
32: :=
33: #
var event	:= params[3];
34: decl local #2
35: local #0
36: 3L
37: [] 1
38: :=
39: #
params := 0; // Not needed anymore.
40: 0L
41: local0 := 
var forsale := CPM_GetMerchantContainer( npc, CPM_FORSALE, CP_CREATE );
42: decl local #3
43: local #1
44: "Merchant-ForSale"
45: 1L
46: makelocal
47: jmp userfunc @191
48: :=
49: #
LogInventory( npc, forsale );
50: local #1
51: local #3
52: makelocal
53: jmp userfunc @279
54: #
var text := Lower( event.text ),
55: decl local #4
56: local #2
57: get member 'text'
58: Func(0,3): Lower
59: :=
60: #
61: decl local #5
62: local #2
63: get member 'source'
64: :=
65: #
if( source.hidden )
66: local #5
67: get member id 'hidden' (32)
68: if false goto 72
return 0;
69: 0L
70: progend
71: goto91
elseif( source.dead )
72: local #5
73: get member id 'dead' (39)
74: if false goto 78
return 0;
75: 0L
76: progend
77: goto91
elseif( source.IsA( POLCLASS_NPC ))
78: local #5
79: 4L
80: Call Method id isa (#0, 1 params)
81: if false goto 85
return 0;
82: 0L
83: progend
84: goto91
elseif( !CheckLineOfSight( npc, source ))
85: local #1
86: local #5
87: Func(2,26): CheckLineOfSight
88: if true goto 91
return 0;
89: 0L
90: progend
AI_Turn( npc, source, NETURN_TOWARD );
91: local #1
92: local #5
93: 1L
94: 0L
95: makelocal
96: jmp userfunc @109
97: #
ProcessSpeech( npc, source, text, forsale );
98: local #1
99: local #5
100: local #4
101: local #3
102: makelocal
103: jmp userfunc @407
104: #
return 1;
105: 1L
106: progend
107: leave block(6)
108: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
109: pop param 'no_wake'
110: pop param 'direction'
111: pop param 'object'
112: pop param 'npc'
var ev		:= struct;
113: decl local #4
114: struct
115: :=
116: #
ev.+type	:= NPCEVENT_TURN;
117: local #4
118: "type"
119: .+
120: 10485766L
121: := #
ev.+source	:= object;
122: local #4
123: "source"
124: .+
125: local #2
126: := #
ev.+direction	:= direction;
127: local #4
128: "direction"
129: .+
130: local #1
131: := #
ev.+WakeUp	:= no_wake;
132: local #4
133: "WakeUp"
134: .+
135: local #0
136: := #
ev.+process	:= GetProcess( GetPid() );
137: local #4
138: "process"
139: .+
140: Func(3,5): GetPid
141: Func(3,4): GetProcess
142: := #
return SendEvent( npc, ev );
143: local #3
144: local #4
145: Func(2,18): SendEvent
146: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
147: pop param byref 'cfg_file'
148: pop param 'elem_name'
if( !cfg_file )
149: local #0
150: if true goto 154
cfg_file := Classes_GetSettingsCfgFile();
151: makelocal
152: jmp userfunc @175
153: local0 := 
var elem := cfg_file[elem_name];
154: decl local #2
155: local #0
156: local #1
157: [] 1
158: :=
159: #
if( elem.errortext )
160: local #2
161: get member 'errortext'
162: if false goto 173
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
163: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
164: local #1
165: +
166: "] ->"
167: +
168: local #2
169: get member 'errortext'
170: +
171: Func(3,1): SysLog
172: #
return elem;
173: local #2
174: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
175: decl local #0
176: ":classes:settings"
177: Func(5,0): ReadConfigFile
178: :=
179: #
if( cfg.errortext )
180: local #0
181: get member 'errortext'
182: if false goto 189
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
183: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
184: local #0
185: get member 'errortext'
186: +
187: Func(3,1): SysLog
188: #
return cfg;
189: local #0
190: return
c:/ZH099/pkg/systems/merchants/include/storage.inc, Line 33
function CPM_GetMerchantContainer( npc, type, create:=CP_NOCREATE )
191: pop param 'create'
192: pop param 'type'
193: pop param 'npc'
var shared_container := GetObjProperty( npc, "Shared-"+type );
194: decl local #3
195: local #2
196: "Shared-"
197: local #1
198: +
199: Func(2,11): GetObjProperty
200: :=
201: #
if( shared_container && type != CPM_SHOPPINGCART )
202: local #3
203: local #1
204: "Merchant-ShoppingCart"
205: <>
206: &&
207: if false goto 215
return CP_GetStorageAreaContainer( shared_container, type, create );
208: local #3
209: local #1
210: local #0
211: makelocal
212: jmp userfunc @860
213: return
214: goto221
return CP_GetStorageContainerForMobile( npc, type, create );
215: local #2
216: local #1
217: local #0
218: makelocal
219: jmp userfunc @916
220: return
221: 0L
222: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
223: pop param 'flags'
224: pop param 'create'
225: pop param 'file_name'
var data_file := OpenDataFile(file_name);
226: decl local #3
227: local #2
228: Func(11,0): OpenDataFile
229: :=
230: #
if ( (!data_file) && (create) )
231: local #3
232: !
233: local #1
234: &&
235: if false goto 249
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
236: "Debug::DFOpenDataFile() - Creating data file: "
237: local #2
238: +
239: makelocal
240: jmp userfunc @969
241: #
CreateDataFile(file_name, flags);
242: local #2
243: local #0
244: Func(11,1): CreateDataFile
245: #
data_file := OpenDataFile(file_name);
246: local #2
247: Func(11,0): OpenDataFile
248: local3 := 
if ( data_file )
249: local #3
250: if false goto 254
return data_file;
251: local #3
252: return
253: goto277
elseif ( create )
254: local #1
255: if false goto 277
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
256: decl local #0
257: error
258: "Error::DFOpenDataFile() - Could not open "
259: local #2
260: +
261: " : "
262: +
263: local #3
264: get member 'errortext'
265: +
266: addmember-assign(errortext)
267: :=
268: #
DF_OutPut(errmsg.errortext);
269: local #4
270: get member 'errortext'
271: makelocal
272: jmp userfunc @969
273: #
return errmsg;
274: local #4
275: return
276: leave block(1)
277: 0L
278: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 99
function LogInventory( npc, forsale )
279: pop param 'forsale'
280: pop param 'npc'
var items_forsale := CP_ListRootItemsInContainer( forsale );
281: decl local #2
282: local #0
283: makelocal
284: jmp userfunc @944
285: :=
286: #
if( !items_forsale.Size() )
287: local #2
288: Call Method id size (#48, 0 params)
289: if true goto 292
return 0;
290: 0L
291: return
var owner := GetObjProperty( npc, "Owner" );
292: decl local #3
293: local #1
294: "Owner"
295: Func(2,11): GetObjProperty
296: :=
297: #
if( !owner )
298: local #3
299: if true goto 302
return 0;
300: 0L
301: return
var data_elem := DFFindElement( g_datafile, owner, DF_CREATE );
302: decl local #4
303: global #4
304: local #3
305: 1L
306: makelocal
307: jmp userfunc @992
308: :=
309: #
var log := array{},
310: decl local #5
311: array
312: :=
313: #
314: decl local #6
315: array
316: :=
317: #
prop.+name := "Vendor";
318: local #6
319: "name"
320: .+
321: "Vendor"
322: := #
prop.+value := npc.name+" at x: "+npc.x+", y: "+npc.y+", z: "+npc.z+", realm: "
323: local #6
324: "value"
325: .+
326: local #1
327: get member id 'name' (3)
328: " at x: "
329: +
330: local #1
331: get member id 'x' (0)
332: +
333: ", y: "
334: +
335: local #1
336: get member id 'y' (1)
337: +
338: ", z: "
339: +
340: local #1
341: get member id 'z' (2)
342: +
343: ", realm: "
344: +
345: local #1
346: get member id 'realm' (112)
347: +
348: := #
log[1] := prop;
349: local #5
350: 1L
351: local #6
352: [] := (1) #
foreach item in items_forsale
353: local #2
354: initforeach @398
prop.name := "Item";
355: local #6
356: "Item"
357: set member id 'name' (3) #
if( item.amount > 1 )
358: local #7
359: get member id 'amount' (13)
360: 1L
361: >
362: if false goto 380
prop.value := item.amount+" "+item.desc+" at "+item.sellprice +" each.";
363: local #6
364: local #7
365: get member id 'amount' (13)
366: " "
367: +
368: local #7
369: get member id 'desc' (19)
370: +
371: " at "
372: +
373: local #7
374: get member id 'sellprice' (23)
375: +
376: " each."
377: +
378: set member 'value' #
379: goto391
prop.value := item.desc+" at "+item.sellprice+".";
380: local #6
381: local #7
382: get member id 'desc' (19)
383: " at "
384: +
385: local #7
386: get member id 'sellprice' (23)
387: +
388: "."
389: +
390: set member 'value' #
log[Len( log )+1] := prop;
391: local #5
392: local #5
393: Func(0,2): Len
394: 1L
395: +
396: local #6
397: [] := (1) #
398: stepforeach @355
399: leave block(3)
data_elem.SetProp( "Vendor", log );
400: local #4
401: "Vendor"
402: local #5
403: Call Method id setprop (#36, 2 params)
404: #
return 1;
405: 1L
406: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 59
function ProcessSpeech( npc, source, text, byref forsale )
407: pop param byref 'forsale'
408: pop param 'text'
409: pop param 'source'
410: pop param 'npc'
var shopping_cart := CPM_GetMerchantContainer( npc, CPM_SHOPPINGCART, CP_CREATE
411: decl local #4
412: local #3
413: "Merchant-ShoppingCart"
414: 1L
415: makelocal
416: jmp userfunc @191
417: :=
418: #
if( text["help"] )
419: local #1
420: "help"
421: [] 1
422: if false goto 443
AI_Speak( npc, "I will obey to the following orders:" );
423: local #3
424: "I will obey to the following orders:"
425: "default"
426: 0L
427: 0L
428: makelocal
429: jmp userfunc @598
430: #
Sleep(3);
431: 3L
432: Func(3,6): Sleep
433: #
AI_Speak( npc, "buy - purchase - collect release - sell - status - undress - st
434: local #3
435: "buy - purchase - collect release - sell - status - undress - strip - wear - equip - inventory"
436: "default"
437: 0L
438: 0L
439: makelocal
440: jmp userfunc @598
441: #
442: goto558
elseif( text["buy"] || text["purchase"] )
443: local #1
444: "buy"
445: [] 1
446: local #1
447: "purchase"
448: [] 1
449: ||
450: if false goto 459
BuyStuff( npc, source, forsale, shopping_cart );
451: local #3
452: local #2
453: local #0
454: local #4
455: makelocal
456: jmp userfunc @642
457: #
458: goto558
elseif( text["collect"] )
459: local #1
460: "collect"
461: [] 1
462: if false goto 469
CashOut( npc, source );
463: local #3
464: local #2
465: makelocal
466: jmp userfunc @699
467: #
468: goto558
elseif( text["inventory"] && source.cmdlevel > 3 )
469: local #1
470: "inventory"
471: [] 1
472: local #2
473: get member id 'cmdlevel' (46)
474: 3L
475: >
476: &&
477: if false goto 485
OpenInventory( npc, source, forsale );
478: local #3
479: local #2
480: local #0
481: makelocal
482: jmp userfunc @1208
483: #
484: goto558
elseif( text["release"] || text["fire"] )
485: local #1
486: "release"
487: [] 1
488: local #1
489: "fire"
490: [] 1
491: ||
492: if false goto 499
FireMerchant( npc, source );
493: local #3
494: local #2
495: makelocal
496: jmp userfunc @1126
497: #
498: goto558
elseif( text["sell"] )
499: local #1
500: "sell"
501: [] 1
502: if false goto 512
AI_Speak( npc, "Just hand me what you want me to buy." );
503: local #3
504: "Just hand me what you want me to buy."
505: "default"
506: 0L
507: 0L
508: makelocal
509: jmp userfunc @598
510: #
511: goto558
elseif( text["status"] )
512: local #1
513: "status"
514: [] 1
515: if false goto 523
CheckStatus( npc, source, forsale );
516: local #3
517: local #2
518: local #0
519: makelocal
520: jmp userfunc @799
521: #
522: goto558
elseif( text["undress"] || text["strip"] )
523: local #1
524: "undress"
525: [] 1
526: local #1
527: "strip"
528: [] 1
529: ||
530: if false goto 545
UndressMerchant( npc, source );
531: local #3
532: local #2
533: makelocal
534: jmp userfunc @560
535: #
AI_Speak( npc, "This is so humiliating..." );
536: local #3
537: "This is so humiliating..."
538: "default"
539: 0L
540: 0L
541: makelocal
542: jmp userfunc @598
543: #
544: goto558
elseif( text["wear"] || text["equip"] )
545: local #1
546: "wear"
547: [] 1
548: local #1
549: "equip"
550: [] 1
551: ||
552: if false goto 558
DressMerchant( npc, source );
553: local #3
554: local #2
555: makelocal
556: jmp userfunc @1054
557: #
return 1;
558: 1L
559: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 224
function UndressMerchant( npc, source )
560: pop param 'source'
561: pop param 'npc'
if( !CanCommand( npc, source ))
562: local #1
563: local #0
564: makelocal
565: jmp userfunc @670
566: if true goto 569
return 0;
567: 0L
568: return
foreach thing in ListEquippedItems( npc )
569: local #1
570: Func(2,6): ListEquippedItems
571: initforeach @594
if( thing.IsHair || thing.IsBeard || thing == npc.backpack )
572: local #2
573: get member 'IsHair'
574: local #2
575: get member 'IsBeard'
576: ||
577: local #2
578: local #1
579: get member id 'backpack' (41)
580: ==
581: ||
582: if false goto 584
continue;
583: goto594
MoveItemToContainer( thing, source.backpack );
584: local #2
585: local #0
586: get member id 'backpack' (41)
587: -1L
588: -1L
589: Func(2,14): MoveItemToContainer
590: #
SleepMS(5);
591: 5L
592: Func(3,0): Sleepms
593: #
594: stepforeach @572
595: leave block(3)
return 1;
596: 1L
597: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
598: pop param 'no_wake'
599: pop param 'do_event'
600: pop param 'text_type'
601: pop param 'text'
602: pop param 'npc'
var ev		:= struct;
603: decl local #5
604: struct
605: :=
606: #
ev.+type	:= NPCEVENT_SPEAK;
607: local #5
608: "type"
609: .+
610: 10485765L
611: := #
ev.+text	:= text;
612: local #5
613: "text"
614: .+
615: local #3
616: := #
ev.+texttype	:= text_type;
617: local #5
618: "texttype"
619: .+
620: local #2
621: := #
ev.+doevent	:= do_event;
622: local #5
623: "doevent"
624: .+
625: local #1
626: := #
ev.+WakeUp	:= no_wake;
627: local #5
628: "WakeUp"
629: .+
630: local #0
631: := #
ev.+process	:= GetProcess( GetPid() );
632: local #5
633: "process"
634: .+
635: Func(3,5): GetPid
636: Func(3,4): GetProcess
637: := #
return SendEvent( npc, ev );
638: local #4
639: local #5
640: Func(2,18): SendEvent
641: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 89
function BuyStuff( npc, mobile, forsale, shopping_cart )
642: pop param 'shopping_cart'
643: pop param 'forsale'
644: pop param 'mobile'
645: pop param 'npc'
var result := SendBuyWindow( mobile, forsale, npc, shopping_cart, VENDOR_SEND_A
646: decl local #4
647: local #2
648: local #1
649: local #3
650: local #0
651: 1L
652: Func(2,27): SendBuyWindow
653: :=
654: #
if( result.errortext )
655: local #4
656: get member 'errortext'
657: if false goto 668
PrintTextAbove( npc, "SendBuyWindow() error - "+result.errortext );
658: local #3
659: "SendBuyWindow() error - "
660: local #4
661: get member 'errortext'
662: +
663: 3L
664: 1000L
665: 0L
666: Func(2,17): PrintTextAbove
667: #
return 1;
668: 1L
669: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 281
function CanCommand( npc, source )
670: pop param 'source'
671: pop param 'npc'
if( source.cmdlevel >= 3 )
672: local #0
673: get member id 'cmdlevel' (46)
674: 3L
675: >=
676: if false goto 680
return 1;
677: 1L
678: return
679: goto689
elseif( GetObjProperty( npc, "Owner" ) == source.serial )
680: local #1
681: "Owner"
682: Func(2,11): GetObjProperty
683: local #0
684: get member id 'serial' (6)
685: ==
686: if false goto 689
return 1;
687: 1L
688: return
AI_Speak( npc, "I don't think that's any of your business." );
689: local #1
690: "I don't think that's any of your business."
691: "default"
692: 0L
693: 0L
694: makelocal
695: jmp userfunc @598
696: #
return 0;
697: 0L
698: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 138
function CashOut( npc, source )
699: pop param 'source'
700: pop param 'npc'
if( !CanCommand( npc, source ))
701: local #1
702: local #0
703: makelocal
704: jmp userfunc @670
705: if true goto 708
return 0;
706: 0L
707: return
var my_gold := CInt( GetObjProperty( npc, "MyGold" ));
708: decl local #2
709: local #1
710: "MyGold"
711: Func(2,11): GetObjProperty
712: Func(0,0): CInt
713: :=
714: #
if( my_gold )
715: local #2
716: if false goto 789
var pay_amt := 0;
717: decl local #0
718: 0L
719: :=
720: #
if( my_gold > 60000 )
721: local #2
722: 60000L
723: >
724: if false goto 728
pay_amt := 60000;
725: 60000L
726: local3 := 
727: goto730
pay_amt := my_gold;
728: local #2
729: local3 := 
AI_Speak( npc, "Here is your "+pay_amt+" gold coins." );
730: local #1
731: "Here is your "
732: local #3
733: +
734: " gold coins."
735: +
736: "default"
737: 0L
738: 0L
739: makelocal
740: jmp userfunc @598
741: #
var money := CreateItemInContainer( source.backpack, 0xeed, pay_amt );
742: decl local #1
743: local #0
744: get member id 'backpack' (41)
745: 3821L
746: local #3
747: Func(2,23): CreateItemInContainer
748: :=
749: #
if( !money )
750: local #4
751: if true goto 764
CreateItemAtLocation( source.x, source.y, source.z, 0xeed, pay_amt, source.real
752: local #0
753: get member id 'x' (0)
754: local #0
755: get member id 'y' (1)
756: local #0
757: get member id 'z' (2)
758: 3821L
759: local #3
760: local #0
761: get member id 'realm' (112)
762: Func(2,28): CreateItemAtLocation
763: #
my_gold -= pay_amt;
764: local #2
765: local #3
766: -=
767: #
if( my_gold )
768: local #2
769: if false goto 782
AI_Speak( npc, "I still hold "+my_gold+" gold coins." );
770: local #1
771: "I still hold "
772: local #2
773: +
774: " gold coins."
775: +
776: "default"
777: 0L
778: 0L
779: makelocal
780: jmp userfunc @598
781: #
SetObjProperty( npc, "MyGold", my_gold );
782: local #1
783: "MyGold"
784: local #2
785: Func(2,12): SetObjProperty
786: #
787: leave block(2)
788: goto797
AI_Speak( npc, "I do not have any gold coins for you!" );
789: local #1
790: "I do not have any gold coins for you!"
791: "default"
792: 0L
793: 0L
794: makelocal
795: jmp userfunc @598
796: #
return 1;
797: 1L
798: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 202
function CheckStatus( npc, source, forsale )
799: pop param 'forsale'
800: pop param 'source'
801: pop param 'npc'
if( !CanCommand( npc, source ))
802: local #2
803: local #1
804: makelocal
805: jmp userfunc @670
806: if true goto 809
return 0;
807: 0L
808: return
if( forsale.Size() )
809: local #0
810: Call Method id size (#48, 0 params)
811: if false goto 831
foreach thing in forsale
812: local #0
813: initforeach @828
AI_Speak( npc, "I have "+thing.desc );
814: local #2
815: "I have "
816: local #3
817: get member id 'desc' (19)
818: +
819: "default"
820: 0L
821: 0L
822: makelocal
823: jmp userfunc @598
824: #
SleepMS(500);
825: 500L
826: Func(3,0): Sleepms
827: #
828: stepforeach @814
829: leave block(3)
830: goto839
AI_Speak( npc, "I don't have nothing to sell." );
831: local #2
832: "I don't have nothing to sell."
833: "default"
834: 0L
835: 0L
836: makelocal
837: jmp userfunc @598
838: #
var my_gold := CInt( GetObjProperty( npc, "MyGold" ));
839: decl local #3
840: local #2
841: "MyGold"
842: Func(2,11): GetObjProperty
843: Func(0,0): CInt
844: :=
845: #
AI_Speak( npc, "I currently hold "+my_gold+" gold coin(s) for you." );
846: local #2
847: "I currently hold "
848: local #3
849: +
850: " gold coin(s) for you."
851: +
852: "default"
853: 0L
854: 0L
855: makelocal
856: jmp userfunc @598
857: #
return 1;
858: 1L
859: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 61
function CP_GetStorageAreaContainer( container_id, storage_area_name:=0, create
860: pop param 'create'
861: pop param 'storage_area_name'
862: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
863: local #1
864: !
865: local #1
866: error
867: ==
868: ||
869: if false goto 872
storage_area_name := CP_DEFAULT_AREA;
870: "World Bank"
871: local1 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
872: decl local #3
873: "[Root Container] "
874: local #2
875: +
876: :=
877: #
var storage_area := FindStorageArea( storage_area_name );
878: decl local #4
879: local #1
880: Func(12,0): FindStorageArea
881: :=
882: #
if( !storage_area )
883: local #4
884: if true goto 895
if( !create )
885: local #0
886: if true goto 890
return storage_area; // Will be an error
887: local #4
888: return
889: goto895
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
890: local #2
891: local #1
892: makelocal
893: jmp userfunc @1423
894: return
var root_container := FindRootItemInStorageArea( storage_area, container_name )
895: decl local #5
896: local #4
897: local #3
898: Func(12,1): FindRootItemInStorageArea
899: :=
900: #
if( !root_container && create )
901: local #5
902: !
903: local #0
904: &&
905: if false goto 912
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
906: local #2
907: local #1
908: makelocal
909: jmp userfunc @1423
910: return
911: goto914
return root_container;
912: local #5
913: return
914: 0L
915: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 49
function CP_GetStorageContainerForMobile( mobile, storage_area_name:=0, create:
916: pop param 'create'
917: pop param 'storage_area_name'
918: pop param 'mobile'
if(( !storage_area_name ) || ( storage_area_name == error ))
919: local #1
920: !
921: local #1
922: error
923: ==
924: ||
925: if false goto 928
storage_area_name := CP_DEFAULT_AREA;
926: "World Bank"
927: local1 := 
var container_id := CP_GetMobileContainerID( mobile );
928: decl local #3
929: local #2
930: makelocal
931: jmp userfunc @1469
932: :=
933: #
var root_container := CP_GetStorageAreaContainer( container_id, storage_area_na
934: decl local #4
935: local #3
936: local #1
937: local #0
938: makelocal
939: jmp userfunc @860
940: :=
941: #
return root_container;
942: local #4
943: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 155
function CP_ListRootItemsInContainer( container )
944: pop param 'container'
var root_items := array{};
945: decl local #1
946: array
947: :=
948: #
foreach item in EnumerateItemsInContainer( container )
949: local #0
950: 0L
951: Func(2,5): EnumerateItemsInContainer
952: initforeach @965
if( item.container == container )
953: local #2
954: get member id 'container' (15)
955: local #0
956: ==
957: if false goto 962
root_items.Append( item );
958: local #1
959: local #2
960: Call Method id append (#52, 1 params)
961: #
SleepMS(2);
962: 2L
963: Func(3,0): Sleepms
964: #
965: stepforeach @953
966: leave block(3)
return root_items;
967: local #1
968: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
969: pop param 'text'
if ( DF_DEBUG_MODE )
970: global #1
971: if false goto 990
var script_name := GetProcess(GetPid()).name;
972: decl local #0
973: Func(3,5): GetPid
974: Func(3,4): GetProcess
975: get member id 'name' (3)
976: :=
977: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
978: "::log/dataFile.log"
979: "["
980: local #1
981: +
982: "]: "
983: +
984: local #0
985: +
986: 1L
987: Func(10,0): LogToFile
988: #
989: leave block(1)
return 1;
990: 1L
991: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
992: pop param 'create'
993: pop param 'elem_name'
994: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
995: decl local #3
996: local #2
997: local #1
998: Func(0,1): CStr
999: Call Method id findelement (#72, 1 params)
1000: :=
1001: #
if ( !temp && create )
1002: local #3
1003: !
1004: local #0
1005: &&
1006: if false goto 1024
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
1007: "Debug::DFFindElement() - Creating elem: "
1008: local #1
1009: Func(0,1): CStr
1010: +
1011: makelocal
1012: jmp userfunc @969
1013: #
file_ref.CreateElement(CStr(elem_name));
1014: local #2
1015: local #1
1016: Func(0,1): CStr
1017: Call Method id createelement (#71, 1 params)
1018: #
temp := file_ref.FindElement(CStr(elem_name));
1019: local #2
1020: local #1
1021: Func(0,1): CStr
1022: Call Method id findelement (#72, 1 params)
1023: local3 := 
if ( temp )
1024: local #3
1025: if false goto 1029
return temp;
1026: local #3
1027: return
1028: goto1052
elseif (create)
1029: local #0
1030: if false goto 1052
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
1031: decl local #0
1032: error
1033: "Error::DFFindElement() - Could not open data elem ["
1034: local #1
1035: +
1036: "] - "
1037: +
1038: local #3
1039: get member 'errortext'
1040: +
1041: addmember-assign(errortext)
1042: :=
1043: #
DF_OutPut(errmsg.errortext);
1044: local #4
1045: get member 'errortext'
1046: makelocal
1047: jmp userfunc @969
1048: #
return errmsg;
1049: local #4
1050: return
1051: leave block(1)
1052: 0L
1053: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 243
function DressMerchant( npc, source )
1054: pop param 'source'
1055: pop param 'npc'
if( !CanCommand( npc, source ))
1056: local #1
1057: local #0
1058: makelocal
1059: jmp userfunc @670
1060: if true goto 1063
return 0;
1061: 0L
1062: return
SendSysMessage( source, "Select the item you would like to equip your merchant.
1063: local #0
1064: "Select the item you would like to equip your merchant."
1065: 3L
1066: 1000L
1067: Func(2,1): SendSysMessage
1068: #
var targ := Target( source );
1069: decl local #2
1070: local #0
1071: 1L
1072: Func(2,29): Target
1073: :=
1074: #
if( !targ )
1075: local #2
1076: if true goto 1086
SendSysMessage( source, "Cancelled." );
1077: local #0
1078: "Cancelled."
1079: 3L
1080: 1000L
1081: Func(2,1): SendSysMessage
1082: #
return 0;
1083: 0L
1084: return
1085: goto1108
elseif( !targ.IsA( POLCLASS_EQUIPMENT ))
1086: local #2
1087: 14L
1088: Call Method id isa (#0, 1 params)
1089: if true goto 1099
SendSysMessage( source, "It is not possible to equip that item." );
1090: local #0
1091: "It is not possible to equip that item."
1092: 3L
1093: 1000L
1094: Func(2,1): SendSysMessage
1095: #
return 0;
1096: 0L
1097: return
1098: goto1108
elseif( !useItem_check( source, targ, ITEM_INCONTAINER ))
1099: local #0
1100: local #2
1101: 2L
1102: 0L
1103: makelocal
1104: jmp userfunc @1224
1105: if true goto 1108
return 0;
1106: 0L
1107: return
var equip := EquipItem( npc, targ );
1108: decl local #3
1109: local #1
1110: local #2
1111: Func(2,30): EquipItem
1112: :=
1113: #
if( !equip )
1114: local #3
1115: if true goto 1124
SendSysMessage( source, "Your merchant can not equip that item." );
1116: local #0
1117: "Your merchant can not equip that item."
1118: 3L
1119: 1000L
1120: Func(2,1): SendSysMessage
1121: #
return 0;
1122: 0L
1123: return
return 1;
1124: 1L
1125: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 173
function FireMerchant( npc, source )
1126: pop param 'source'
1127: pop param 'npc'
if( !CanCommand( npc, source ))
1128: local #1
1129: local #0
1130: makelocal
1131: jmp userfunc @670
1132: if true goto 1136
return 0;
1133: 0L
1134: return
1135: goto1144
elseif( !YesNo( source, "Fire him?" ))
1136: local #0
1137: "Fire him?"
1138: 0L
1139: makelocal
1140: jmp userfunc @1388
1141: if true goto 1144
return 0;
1142: 0L
1143: return
CashOut( npc, source );
1144: local #1
1145: local #0
1146: makelocal
1147: jmp userfunc @699
1148: #
UndressMerchant( npc, source );
1149: local #1
1150: local #0
1151: makelocal
1152: jmp userfunc @560
1153: #
SetObjProperty( npc, "GuardKill", 1 );
1154: local #1
1155: "GuardKill"
1156: 1L
1157: Func(2,12): SetObjProperty
1158: #
npc.Kill();
1159: local #1
1160: Call Method id kill (#75, 0 params)
1161: #
var created := CreateItemInContainer( source.backpack, 0x2D90, 1 );
1162: decl local #2
1163: local #0
1164: get member id 'backpack' (41)
1165: 11664L
1166: 1L
1167: Func(2,23): CreateItemInContainer
1168: :=
1169: #
if( created.errortext )
1170: local #2
1171: get member 'errortext'
1172: if false goto 1184
SendSysMessage( source, "Error creating player's merchant deed -->"+created.err
1173: local #0
1174: "Error creating player's merchant deed -->"
1175: local #2
1176: get member 'errortext'
1177: +
1178: 3L
1179: 1000L
1180: Func(2,1): SendSysMessage
1181: #
return 0;
1182: 0L
1183: return
var result := g_datafile.DeleteElement( CStr( source.serial ));
1184: decl local #3
1185: global #4
1186: local #0
1187: get member id 'serial' (6)
1188: Func(0,1): CStr
1189: Call Method id deleteelement (#73, 1 params)
1190: :=
1191: #
if( result.errortext )
1192: local #3
1193: get member 'errortext'
1194: if false goto 1206
SendSysMessage( source, "Error removing element from datafile -->"+result.error
1195: local #0
1196: "Error removing element from datafile -->"
1197: local #3
1198: get member 'errortext'
1199: +
1200: 3L
1201: 1000L
1202: Func(2,1): SendSysMessage
1203: #
return 0;
1204: 0L
1205: return
return 1;
1206: 1L
1207: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\playerMerchant.src, Line 270
function OpenInventory( npc, source, forsale );
1208: pop param 'forsale'
1209: pop param 'source'
1210: pop param 'npc'
if( !CanCommand( npc, source ))
1211: local #2
1212: local #1
1213: makelocal
1214: jmp userfunc @670
1215: if true goto 1218
return 0;
1216: 0L
1217: return
SendOpenSpecialContainer( source, forsale );
1218: local #1
1219: local #0
1220: Func(2,31): SendOpenSpecialContainer
1221: #
return 1;
1222: 1L
1223: return
c:/ZH099/scripts/include/itemUtil.inc, Line 25
function useItem_check( mobile, item, option := DEFAULT_ITEM, temp_dist := 0 )
1224: pop param 'temp_dist'
1225: pop param 'option'
1226: pop param 'item'
1227: pop param 'mobile'
if( !ReserveItem( item ))
1228: local #2
1229: Func(2,0): ReserveItem
1230: if true goto 1240
SendSysMessage( mobile, "You cannot use that item." );
1231: local #3
1232: "You cannot use that item."
1233: 3L
1234: 1000L
1235: Func(2,1): SendSysMessage
1236: #
return 0;
1237: 0L
1238: return
1239: goto1252
elseif( !Accessible( mobile, item ))
1240: local #3
1241: local #2
1242: Func(2,2): Accessible
1243: if true goto 1252
SendSysMessage( mobile, "You do not have access to that item." );
1244: local #3
1245: "You do not have access to that item."
1246: 3L
1247: 1000L
1248: Func(2,1): SendSysMessage
1249: #
return 0;
1250: 0L
1251: return
if( option & ITEM_WILD )
1252: local #1
1253: 8L
1254: &
1255: if false goto 1310
if( !item.movable )
1256: local #2
1257: get member id 'movable' (20)
1258: if true goto 1268
SendSysMessage( mobile, "That item is not movable." );
1259: local #3
1260: "That item is not movable."
1261: 3L
1262: 1000L
1263: Func(2,1): SendSysMessage
1264: #
return 0;
1265: 0L
1266: return
1267: goto1309
elseif( !CheckLosAt( mobile, item.x, item.y, item.z ))
1268: local #3
1269: local #2
1270: get member id 'x' (0)
1271: local #2
1272: get member id 'y' (1)
1273: local #2
1274: get member id 'z' (2)
1275: Func(2,3): CheckLosAt
1276: if true goto 1286
SendSysMessage( mobile, "You cannot see that item." );
1277: local #3
1278: "You cannot see that item."
1279: 3L
1280: 1000L
1281: Func(2,1): SendSysMessage
1282: #
return 0;
1283: 0L
1284: return
1285: goto1309
elseif( temp_dist )
1286: local #0
1287: if false goto 1309
if( !CoordinateDistance( mobile.x, mobile.y, item.x, item.y ) > temp_dist )
1288: local #3
1289: get member id 'x' (0)
1290: local #3
1291: get member id 'y' (1)
1292: local #2
1293: get member id 'x' (0)
1294: local #2
1295: get member id 'y' (1)
1296: Func(2,4): CoordinateDistance
1297: !
1298: local #0
1299: >
1300: if false goto 1309
SendSysMessage( mobile, "You are too far from the item." );
1301: local #3
1302: "You are too far from the item."
1303: 3L
1304: 1000L
1305: Func(2,1): SendSysMessage
1306: #
return 0;
1307: 0L
1308: return
1309: goto1367
elseif( option & ITEM_INCONTAINER )
1310: local #1
1311: 2L
1312: &
1313: if false goto 1342
if( !item.movable )
1314: local #2
1315: get member id 'movable' (20)
1316: if true goto 1326
SendSysMessage( mobile, "That item is not movable." );
1317: local #3
1318: "That item is not movable."
1319: 3L
1320: 1000L
1321: Func(2,1): SendSysMessage
1322: #
return 0;
1323: 0L
1324: return
1325: goto1341
elseif( !( item in EnumerateItemsInContainer( mobile.backpack )))
1326: local #2
1327: local #3
1328: get member id 'backpack' (41)
1329: 0L
1330: Func(2,5): EnumerateItemsInContainer
1331: in
1332: if true goto 1341
SendSysMessage( mobile, "That item is not in your backpack." );
1333: local #3
1334: "That item is not in your backpack."
1335: 3L
1336: 1000L
1337: Func(2,1): SendSysMessage
1338: #
return 0;
1339: 0L
1340: return
1341: goto1367
elseif( option & ITEM_EQUIPPED )
1342: local #1
1343: 4L
1344: &
1345: if false goto 1367
if( item in ListEquippedItems( mobile ))
1346: local #2
1347: local #3
1348: Func(2,6): ListEquippedItems
1349: in
1350: if false goto 1354
return 1;
1351: 1L
1352: return
1353: goto1367
SendSysMessage( mobile, "You must equip "+item.desc+" before using it." );
1354: local #3
1355: "You must equip "
1356: local #2
1357: get member id 'desc' (19)
1358: +
1359: " before using it."
1360: +
1361: 3L
1362: 1000L
1363: Func(2,1): SendSysMessage
1364: #
return 0;
1365: 0L
1366: return
if(( item.IsA( POLCLASS_CONTAINER ) || item.IsA( POLCLASS_DOOR )) && item.locke
1367: local #2
1368: 6L
1369: Call Method id isa (#0, 1 params)
1370: local #2
1371: 8L
1372: Call Method id isa (#0, 1 params)
1373: ||
1374: local #2
1375: get member id 'locked' (70)
1376: &&
1377: if false goto 1386
SendSysMessage( mobile, "That item is locked!" );
1378: local #3
1379: "That item is locked!"
1380: 3L
1381: 1000L
1382: Func(2,1): SendSysMessage
1383: #
return 0;
1384: 0L
1385: return
return 1;
1386: 1L
1387: return
c:/ZH099/scripts/include/yesNo.inc, Line 11
function YesNo( mobile, prompt, delay:=0 )
1388: pop param 'delay'
1389: pop param 'prompt'
1390: pop param 'mobile'
var parms := array{mobile, prompt, delay};
1391: decl local #3
1392: array
1393: local #2
1394: init{}
1395: local #1
1396: init{}
1397: local #0
1398: init{}
1399: :=
1400: #
var script := Run_Script( ":gumps:yesNoMiniGump", parms );
1401: decl local #4
1402: ":gumps:yesNoMiniGump"
1403: local #3
1404: Func(3,3): Run_Script
1405: :=
1406: #
if( script.errortext )
1407: local #4
1408: get member 'errortext'
1409: if false goto 1421
SendSysMessage( mobile, "Error starting script <:gumps:yesNoMiniGump> -->"+scri
1410: local #2
1411: "Error starting script <:gumps:yesNoMiniGump> -->"
1412: local #4
1413: get member 'errortext'
1414: +
1415: 3L
1416: 1000L
1417: Func(2,1): SendSysMessage
1418: #
return 0;
1419: 0L
1420: return
return script;
1421: local #4
1422: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 86
function CP_CreateStorageAreaContainer( container_id, storage_area_name:=0 )
1423: pop param 'storage_area_name'
1424: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
1425: local #0
1426: !
1427: local #0
1428: error
1429: ==
1430: ||
1431: if false goto 1434
storage_area_name := CP_DEFAULT_AREA;
1432: "World Bank"
1433: local0 := 
var storage_area := FindStorageArea( storage_area_name );
1434: decl local #2
1435: local #0
1436: Func(12,0): FindStorageArea
1437: :=
1438: #
if( !storage_area )
1439: local #2
1440: if true goto 1444
storage_area := CreateStorageArea( storage_area_name );
1441: local #0
1442: Func(12,2): CreateStorageArea
1443: local2 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
1444: decl local #3
1445: "[Root Container] "
1446: local #1
1447: +
1448: :=
1449: #
var root_container := CreateRootItemInStorageArea( storage_area, container_name
1450: decl local #4
1451: local #2
1452: local #3
1453: global #2
1454: Func(12,3): CreateRootItemInStorageArea
1455: :=
1456: #
if( root_container.errortext )
1457: local #4
1458: get member 'errortext'
1459: if false goto 1467
CP_StorageDebugMsg( "Error::CP_CreateStorageAreaContainer() - "+root_container.
1460: "Error::CP_CreateStorageAreaContainer() - "
1461: local #4
1462: get member 'errortext'
1463: +
1464: makelocal
1465: jmp userfunc @1489
1466: #
return root_container;
1467: local #4
1468: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 40
function CP_GetMobileContainerID( mobile )
1469: pop param 'mobile'
if( mobile.IsA( POLCLASS_CORPSE ))
1470: local #0
1471: 7L
1472: Call Method id isa (#0, 1 params)
1473: if false goto 1481
return "Owner="+Hex( mobile.ownerserial );
1474: "Owner="
1475: local #0
1476: get member id 'ownerserial' (124)
1477: Func(0,7): Hex
1478: +
1479: return
1480: goto1487
return "Owner="+Hex( mobile.serial );
1481: "Owner="
1482: local #0
1483: get member id 'serial' (6)
1484: Func(0,7): Hex
1485: +
1486: return
1487: 0L
1488: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 145
function CP_StorageDebugMsg( report_text )
1489: pop param 'report_text'
if( STORAGE_DEBUG )
1490: global #3
1491: if false goto 1510
var script_name := GetProcess( GetPid() ).name;
1492: decl local #0
1493: Func(3,5): GetPid
1494: Func(3,4): GetProcess
1495: get member id 'name' (3)
1496: :=
1497: #
LogToFile( "::log/storage.log", "["+script_name+"]: "+report_text, LOG_DATETIME
1498: "::log/storage.log"
1499: "["
1500: local #1
1501: +
1502: "]: "
1503: +
1504: local #0
1505: +
1506: 1L
1507: Func(10,0): LogToFile
1508: #
1509: leave block(1)
return 1;
1510: 1L
1511: return
