c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 35
var container_type	:= "BankBox";
0: decl global #0
1: "BankBox"
2: :=
3: #
var STORAGE_DEBUG	:= 1;
4: decl global #1
5: 1L
6: :=
7: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\barber.src, Line 17
program BrainNerve( params )
use os;
8: get arg 'params'
var npc		:= params[1];
9: decl local #1
10: local #0
11: 1L
12: [] 1
13: :=
14: #
var event	:= params[3];
15: decl local #2
16: local #0
17: 3L
18: [] 1
19: :=
20: #
params := 0; // Not needed anymore.
21: 0L
22: local0 := 
var text := Lower( event.text ),
23: decl local #3
24: local #2
25: get member 'text'
26: Func(0,0): Lower
27: :=
28: #
29: decl local #4
30: local #2
31: get member 'source'
32: :=
33: #
if( source.hidden )
34: local #4
35: get member id 'hidden' (32)
36: if false goto 40
return 0;
37: 0L
38: progend
39: goto59
elseif( source.dead )
40: local #4
41: get member id 'dead' (39)
42: if false goto 46
return 0;
43: 0L
44: progend
45: goto59
elseif( source.IsA( POLCLASS_NPC ))
46: local #4
47: 4L
48: Call Method id isa (#0, 1 params)
49: if false goto 53
return 0;
50: 0L
51: progend
52: goto59
elseif( !CheckLineOfSight( npc, source ))
53: local #1
54: local #4
55: Func(2,8): CheckLineOfSight
56: if true goto 59
return 0;
57: 0L
58: progend
AI_Turn( npc, source, NETURN_TOWARD );
59: local #1
60: local #4
61: 1L
62: 0L
63: makelocal
64: jmp userfunc @76
65: #
ProcessSpeech( npc, source, text );
66: local #1
67: local #4
68: local #3
69: makelocal
70: jmp userfunc @114
71: #
return 1;
72: 1L
73: progend
74: leave block(5)
75: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
76: pop param 'no_wake'
77: pop param 'direction'
78: pop param 'object'
79: pop param 'npc'
var ev		:= struct;
80: decl local #4
81: struct
82: :=
83: #
ev.+type	:= NPCEVENT_TURN;
84: local #4
85: "type"
86: .+
87: 10485766L
88: := #
ev.+source	:= object;
89: local #4
90: "source"
91: .+
92: local #2
93: := #
ev.+direction	:= direction;
94: local #4
95: "direction"
96: .+
97: local #1
98: := #
ev.+WakeUp	:= no_wake;
99: local #4
100: "WakeUp"
101: .+
102: local #0
103: := #
ev.+process	:= GetProcess( GetPid() );
104: local #4
105: "process"
106: .+
107: Func(3,4): GetPid
108: Func(3,1): GetProcess
109: := #
return SendEvent( npc, ev );
110: local #3
111: local #4
112: Func(2,3): SendEvent
113: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\barber.src, Line 47
function ProcessSpeech( npc, source, text )
114: pop param 'text'
115: pop param 'source'
116: pop param 'npc'
if( text["help"] )
117: local #0
118: "help"
119: [] 1
120: if false goto 143
AI_Speak( npc, "I will obey the following orders:" );
121: local #2
122: "I will obey the following orders:"
123: "default"
124: 0L
125: 0L
126: makelocal
127: jmp userfunc @188
128: #
Sleep(2);
129: 2L
130: Func(3,6): Sleep
131: #
AI_Speak( npc, "buy" );
132: local #2
133: "buy"
134: "default"
135: 0L
136: 0L
137: makelocal
138: jmp userfunc @188
139: #
return 1;
140: 1L
141: return
142: goto186
elseif( text["buy"] )
143: local #0
144: "buy"
145: [] 1
146: if false goto 186
var parms := array;
147: decl local #0
148: array
149: :=
150: #
parms[1] := npc;
151: local #3
152: 1L
153: local #2
154: [] := (1) #
parms[2] := source;
155: local #3
156: 2L
157: local #1
158: [] := (1) #
parms[3] := source;
159: local #3
160: 3L
161: local #1
162: [] := (1) #
var start := start_script( ":hair:barber/hairStyle", parms );
163: decl local #1
164: ":hair:barber/hairStyle"
165: local #3
166: Func(3,3): Start_Script
167: :=
168: #
if( start.errortext )
169: local #4
170: get member 'errortext'
171: if false goto 185
AI_Speak(npc, "Error starting hairStyle -->"+start.errortext );
172: local #2
173: "Error starting hairStyle -->"
174: local #4
175: get member 'errortext'
176: +
177: "default"
178: 0L
179: 0L
180: makelocal
181: jmp userfunc @188
182: #
return 0;
183: 0L
184: return
185: leave block(2)
return 1;
186: 1L
187: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
188: pop param 'no_wake'
189: pop param 'do_event'
190: pop param 'text_type'
191: pop param 'text'
192: pop param 'npc'
var ev		:= struct;
193: decl local #5
194: struct
195: :=
196: #
ev.+type	:= NPCEVENT_SPEAK;
197: local #5
198: "type"
199: .+
200: 10485765L
201: := #
ev.+text	:= text;
202: local #5
203: "text"
204: .+
205: local #3
206: := #
ev.+texttype	:= text_type;
207: local #5
208: "texttype"
209: .+
210: local #2
211: := #
ev.+doevent	:= do_event;
212: local #5
213: "doevent"
214: .+
215: local #1
216: := #
ev.+WakeUp	:= no_wake;
217: local #5
218: "WakeUp"
219: .+
220: local #0
221: := #
ev.+process	:= GetProcess( GetPid() );
222: local #5
223: "process"
224: .+
225: Func(3,4): GetPid
226: Func(3,1): GetProcess
227: := #
return SendEvent( npc, ev );
228: local #4
229: local #5
230: Func(2,3): SendEvent
231: return
