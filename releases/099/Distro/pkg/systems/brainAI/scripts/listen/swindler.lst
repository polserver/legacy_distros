c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @133
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 36
var magicLevel := 0;
11: decl global #2
12: 0L
13: :=
14: #
var loot_index := 0;
15: decl global #3
16: 0L
17: :=
18: #
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 35
var container_type	:= "BankBox";
19: decl global #4
20: "BankBox"
21: :=
22: #
var STORAGE_DEBUG	:= 1;
23: decl global #5
24: 1L
25: :=
26: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\swindler.src, Line 23
program BrainNerve( params )
const CPM_HOLDING	:= "Merchant-Holding";
27: get arg 'params'
var npc		:= params[1];
28: decl local #1
29: local #0
30: 1L
31: [] 1
32: :=
33: #
var event	:= params[3];
34: decl local #2
35: local #0
36: 3L
37: [] 1
38: :=
39: #
params := 0; // Not needed anymore.
40: 0L
41: local0 := 
var text := Lower( event.text ),
42: decl local #3
43: local #2
44: get member 'text'
45: Func(0,0): Lower
46: :=
47: #
48: decl local #4
49: local #2
50: get member 'source'
51: :=
52: #
if( source.hidden )
53: local #4
54: get member id 'hidden' (32)
55: if false goto 59
return 0;
56: 0L
57: progend
58: goto78
elseif( source.dead )
59: local #4
60: get member id 'dead' (39)
61: if false goto 65
return 0;
62: 0L
63: progend
64: goto78
elseif( source.IsA( POLCLASS_NPC ))
65: local #4
66: 4L
67: Call Method id isa (#0, 1 params)
68: if false goto 72
return 0;
69: 0L
70: progend
71: goto78
elseif( !CheckLineOfSight( npc, source ))
72: local #1
73: local #4
74: Func(2,18): CheckLineOfSight
75: if true goto 78
return 0;
76: 0L
77: progend
AI_Turn( npc, source, NETURN_TOWARD );
78: local #1
79: local #4
80: 1L
81: 0L
82: makelocal
83: jmp userfunc @95
84: #
ProcessSpeech( npc, source, text );
85: local #1
86: local #4
87: local #3
88: makelocal
89: jmp userfunc @177
90: #
return 1;
91: 1L
92: progend
93: leave block(5)
94: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
95: pop param 'no_wake'
96: pop param 'direction'
97: pop param 'object'
98: pop param 'npc'
var ev		:= struct;
99: decl local #4
100: struct
101: :=
102: #
ev.+type	:= NPCEVENT_TURN;
103: local #4
104: "type"
105: .+
106: 10485766L
107: := #
ev.+source	:= object;
108: local #4
109: "source"
110: .+
111: local #2
112: := #
ev.+direction	:= direction;
113: local #4
114: "direction"
115: .+
116: local #1
117: := #
ev.+WakeUp	:= no_wake;
118: local #4
119: "WakeUp"
120: .+
121: local #0
122: := #
ev.+process	:= GetProcess( GetPid() );
123: local #4
124: "process"
125: .+
126: Func(3,2): GetPid
127: Func(3,1): GetProcess
128: := #
return SendEvent( npc, ev );
129: local #3
130: local #4
131: Func(2,9): SendEvent
132: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
133: pop param byref 'cfg_file'
134: pop param 'elem_name'
if( !cfg_file )
135: local #0
136: if true goto 140
cfg_file := Classes_GetSettingsCfgFile();
137: makelocal
138: jmp userfunc @161
139: local0 := 
var elem := cfg_file[elem_name];
140: decl local #2
141: local #0
142: local #1
143: [] 1
144: :=
145: #
if( elem.errortext )
146: local #2
147: get member 'errortext'
148: if false goto 159
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
149: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
150: local #1
151: +
152: "] ->"
153: +
154: local #2
155: get member 'errortext'
156: +
157: Func(3,0): SysLog
158: #
return elem;
159: local #2
160: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
161: decl local #0
162: ":classes:settings"
163: Func(5,0): ReadConfigFile
164: :=
165: #
if( cfg.errortext )
166: local #0
167: get member 'errortext'
168: if false goto 175
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
169: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
170: local #0
171: get member 'errortext'
172: +
173: Func(3,0): SysLog
174: #
return cfg;
175: local #0
176: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\swindler.src, Line 53
function ProcessSpeech( npc, source, text )
177: pop param 'text'
178: pop param 'source'
179: pop param 'npc'
var forsale := CPM_GetMerchantContainer( npc, CPM_FORSALE, CP_CREATE ),
180: decl local #3
181: local #2
182: "Merchant-ForSale"
183: 1L
184: makelocal
185: jmp userfunc @397
186: :=
187: #
188: decl local #4
189: local #2
190: local #3
191: makelocal
192: jmp userfunc @232
193: :=
194: #
if( text["help"] )
195: local #0
196: "help"
197: [] 1
198: if false goto 219
AI_Speak( npc, "I will obey to the following orders:" );
199: local #2
200: "I will obey to the following orders:"
201: "default"
202: 0L
203: 0L
204: makelocal
205: jmp userfunc @325
206: #
Sleep(3);
207: 3L
208: Func(3,4): Sleep
209: #
AI_Speak( npc, "buy" );
210: local #2
211: "buy"
212: "default"
213: 0L
214: 0L
215: makelocal
216: jmp userfunc @325
217: #
218: goto230
elseif( text["buy"] )
219: local #0
220: "buy"
221: [] 1
222: if false goto 230
BuyStuff( npc, source, forsale, shopping_cart );
223: local #2
224: local #1
225: local #3
226: local #4
227: makelocal
228: jmp userfunc @369
229: #
return 1;
230: 1L
231: return
c:/ZH099/pkg/systems/merchants/include/swindler.inc, Line 15
function Swindler_Check_Restock( npc, forsale )
232: pop param 'forsale'
233: pop param 'npc'
var next_restock := CInt( GetObjProperty( npc, "NextRestock" ));
234: decl local #2
235: local #1
236: "NextRestock"
237: Func(2,1): GetObjProperty
238: Func(0,1): CInt
239: :=
240: #
if( next_restock <= ReadGameClock() )
241: local #2
242: Func(2,16): ReadGameClock
243: <=
244: if false goto 257
Swindler_RestockInventory( npc, forsale );
245: local #1
246: local #0
247: makelocal
248: jmp userfunc @263
249: #
SetObjProperty( npc, "NextRestock", ReadGameClock() + MERCHANT_RESTOCK );
250: local #1
251: "NextRestock"
252: Func(2,16): ReadGameClock
253: 2700L
254: +
255: Func(2,2): SetObjProperty
256: #
return CPM_GetMerchantContainer( npc, CPM_SHOPPINGCART, CP_CREATE );
257: local #1
258: "Merchant-ShoppingCart"
259: 1L
260: makelocal
261: jmp userfunc @397
262: return
c:/ZH099/pkg/systems/merchants/include/swindler.inc, Line 26
function Swindler_RestockInventory( npc, byref inventory )
263: pop param byref 'inventory'
264: pop param 'npc'
foreach item in ( ListRootItemsInContainer( inventory ))
265: local #0
266: makelocal
267: jmp userfunc @429
268: initforeach @275
DestroyItem( item );
269: local #2
270: Func(2,17): DestroyItem
271: #
SleepMS(2);
272: 2L
273: Func(3,3): Sleepms
274: #
275: stepforeach @269
276: leave block(3)
var i;
277: decl local #2
278: #
for( i:=1; i<=5; i+=1 )
279: local #2
280: 1L
281: :=
282: #
283: local #2
284: 5L
285: <=
286: if false goto 309
var level := RandomInt(5)+1;
287: decl local #0
288: 5L
289: Func(4,2): RandomInt
290: 1L
291: +
292: :=
293: #
Loot_Generate( inventory, level, 1 );
294: local #0
295: local #3
296: 1L
297: makelocal
298: jmp userfunc @454
299: #
SleepMS(5);
300: 5L
301: Func(3,3): Sleepms
302: #
303: leave block(1)
304: local #2
305: 1L
306: +=
307: #
308: goto283
foreach item in ( ListRootItemsInContainer( inventory ))
309: local #0
310: makelocal
311: jmp userfunc @429
312: initforeach @321
SetPrice( npc, item );
313: local #1
314: local #3
315: makelocal
316: jmp userfunc @812
317: #
SleepMS(2);
318: 2L
319: Func(3,3): Sleepms
320: #
321: stepforeach @313
322: leave block(3)
return 1;
323: 1L
324: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
325: pop param 'no_wake'
326: pop param 'do_event'
327: pop param 'text_type'
328: pop param 'text'
329: pop param 'npc'
var ev		:= struct;
330: decl local #5
331: struct
332: :=
333: #
ev.+type	:= NPCEVENT_SPEAK;
334: local #5
335: "type"
336: .+
337: 10485765L
338: := #
ev.+text	:= text;
339: local #5
340: "text"
341: .+
342: local #3
343: := #
ev.+texttype	:= text_type;
344: local #5
345: "texttype"
346: .+
347: local #2
348: := #
ev.+doevent	:= do_event;
349: local #5
350: "doevent"
351: .+
352: local #1
353: := #
ev.+WakeUp	:= no_wake;
354: local #5
355: "WakeUp"
356: .+
357: local #0
358: := #
ev.+process	:= GetProcess( GetPid() );
359: local #5
360: "process"
361: .+
362: Func(3,2): GetPid
363: Func(3,1): GetProcess
364: := #
return SendEvent( npc, ev );
365: local #4
366: local #5
367: Func(2,9): SendEvent
368: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\swindler.src, Line 69
function BuyStuff( npc, mobile, forsale, shopping_cart )
369: pop param 'shopping_cart'
370: pop param 'forsale'
371: pop param 'mobile'
372: pop param 'npc'
var result := SendBuyWindow( mobile, forsale, npc, shopping_cart, VENDOR_SEND_A
373: decl local #4
374: local #2
375: local #1
376: local #3
377: local #0
378: 1L
379: Func(2,19): SendBuyWindow
380: :=
381: #
if( result.errortext )
382: local #4
383: get member 'errortext'
384: if false goto 395
PrintTextAbove( npc, "SendBuyWindow() error - "+result.errortext );
385: local #3
386: "SendBuyWindow() error - "
387: local #4
388: get member 'errortext'
389: +
390: 3L
391: 1000L
392: 0L
393: Func(2,8): PrintTextAbove
394: #
return 1;
395: 1L
396: return
c:/ZH099/pkg/systems/merchants/include/storage.inc, Line 33
function CPM_GetMerchantContainer( npc, type, create:=CP_NOCREATE )
397: pop param 'create'
398: pop param 'type'
399: pop param 'npc'
var shared_container := GetObjProperty( npc, "Shared-"+type );
400: decl local #3
401: local #2
402: "Shared-"
403: local #1
404: +
405: Func(2,1): GetObjProperty
406: :=
407: #
if( shared_container && type != CPM_SHOPPINGCART )
408: local #3
409: local #1
410: "Merchant-ShoppingCart"
411: <>
412: &&
413: if false goto 421
return CP_GetStorageAreaContainer( shared_container, type, create );
414: local #3
415: local #1
416: local #0
417: makelocal
418: jmp userfunc @1001
419: return
420: goto427
return CP_GetStorageContainerForMobile( npc, type, create );
421: local #2
422: local #1
423: local #0
424: makelocal
425: jmp userfunc @1057
426: return
427: 0L
428: return
c:/ZH099/pkg/items/containers/include/containers.inc, Line 57
function ListRootItemsInContainer( container )
429: pop param 'container'
var item_list := array{};
430: decl local #1
431: array
432: :=
433: #
foreach item in ( EnumerateItemsInContainer( container ))
434: local #0
435: 0L
436: Func(2,11): EnumerateItemsInContainer
437: initforeach @450
if( item.container == container )
438: local #2
439: get member id 'container' (15)
440: local #0
441: ==
442: if false goto 447
item_list.Append( item );
443: local #1
444: local #2
445: Call Method id append (#52, 1 params)
446: #
SleepMS(2);
447: 2L
448: Func(3,3): Sleepms
449: #
450: stepforeach @438
451: leave block(3)
return item_list;
452: local #1
453: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 39
function Loot_Generate( container, npc_cfg, useLoot_Index := 0 )
454: pop param 'useLoot_Index'
455: pop param 'npc_cfg'
456: pop param 'container'
if( !container.IsA( POLCLASS_CONTAINER ))
457: local #2
458: 6L
459: Call Method id isa (#0, 1 params)
460: if true goto 471
PrintTextAbove( container, "Object passed was not a container." );
461: local #2
462: "Object passed was not a container."
463: 3L
464: 1000L
465: 0L
466: Func(2,8): PrintTextAbove
467: #
return 0;
468: 0L
469: return
470: goto477
elseif( GetObjProperty( container, "LFucker" ))
471: local #2
472: "LFucker"
473: Func(2,1): GetObjProperty
474: if false goto 477
return 0;
475: 0L
476: return
var index_cfg := ReadConfigFile( ":loot:loot-index" );
477: decl local #3
478: ":loot:loot-index"
479: Func(5,0): ReadConfigFile
480: :=
481: #
if( index_cfg.errortext )
482: local #3
483: get member 'errortext'
484: if false goto 497
PrintTextAbove( container, "Error - Could not open loot-index.cfg -> "+index_cf
485: local #2
486: "Error - Could not open loot-index.cfg -> "
487: local #3
488: get member 'errortext'
489: +
490: 3L
491: 1000L
492: 0L
493: Func(2,8): PrintTextAbove
494: #
return 0;
495: 0L
496: return
if( !useLoot_Index )
497: local #0
498: if true goto 507
loot_index := CInt( npc_cfg.LootIndex );
499: local #1
500: get member 'LootIndex'
501: Func(0,1): CInt
502: global3 := 
magicLevel := RandomDiceRoll( "1d4" );
503: "1d4"
504: Func(4,0): RandomDiceRoll
505: global2 := 
506: goto513
loot_index := CInt( npc_cfg );
507: local #1
508: Func(0,1): CInt
509: global3 := 
loot_index := CInt( npc_cfg );
510: local #1
511: Func(0,1): CInt
512: global3 := 
if( !loot_index )
513: global #3
514: if true goto 518
return 0;
515: 0L
516: return
517: goto528
elseif( A_IsIn( container, AREAS_DANGEROUS ))
518: local #2
519: "Dangerous"
520: 0L
521: makelocal
522: jmp userfunc @872
523: if false goto 528
magicLevel += 1;
524: global #2
525: 1L
526: +=
527: #
if( GetObjProperty( container, "NPCBoss" ))
528: local #2
529: "NPCBoss"
530: Func(2,1): GetObjProperty
531: if false goto 536
magicLevel += 2;
532: global #2
533: 2L
534: +=
535: #
var index_elem := index_cfg[loot_index];
536: decl local #4
537: local #3
538: global #3
539: [] 1
540: :=
541: #
if( !index_elem )
542: local #4
543: if true goto 557
PrintTextAbove( container, "Error - loot-index.cfg elem ["+loot_index+"] does n
544: local #2
545: "Error - loot-index.cfg elem ["
546: global #3
547: +
548: "] does not exist."
549: +
550: 3L
551: 1000L
552: 0L
553: Func(2,8): PrintTextAbove
554: #
return 0;
555: 0L
556: return
foreach line in GetConfigStringArray( index_elem, "Item" )
557: local #4
558: "Item"
559: Func(5,2): GetConfigStringArray
560: initforeach @612
var parsed := Loot_ParseString( line );
561: decl local #0
562: local #5
563: makelocal
564: jmp userfunc @729
565: :=
566: #
var i;
567: decl local #1
568: #
for( i:=1; i<= parsed.amount; i+=1 )
569: local #9
570: 1L
571: :=
572: #
573: local #9
574: local #8
575: get member id 'amount' (13)
576: <=
577: if false goto 608
var creation := Loot_CreateItem( container, parsed, magicLevel );
578: decl local #0
579: local #2
580: local #8
581: global #2
582: makelocal
583: jmp userfunc @1128
584: :=
585: #
if( creation.errortext )
586: local #10
587: get member 'errortext'
588: if false goto 599
PrintTextAbove( container, "Error -->"+creation.errortext );
589: local #2
590: "Error -->"
591: local #10
592: get member 'errortext'
593: +
594: 3L
595: 1000L
596: 0L
597: Func(2,8): PrintTextAbove
598: #
SleepMS(5);
599: 5L
600: Func(3,3): Sleepms
601: #
602: leave block(1)
603: local #9
604: 1L
605: +=
606: #
607: goto573
SleepMS(2);
608: 2L
609: Func(3,3): Sleepms
610: #
611: leave block(2)
612: stepforeach @561
613: leave block(3)
foreach line in GetConfigStringArray( index_elem, "Stack" )
614: local #4
615: "Stack"
616: Func(5,2): GetConfigStringArray
617: initforeach @649
var parsed := Loot_ParseString( line );
618: decl local #0
619: local #5
620: makelocal
621: jmp userfunc @729
622: :=
623: #
var creation := Loot_CreateItem( container, parsed, magicLevel );
624: decl local #1
625: local #2
626: local #8
627: global #2
628: makelocal
629: jmp userfunc @1128
630: :=
631: #
if( creation.errortext )
632: local #9
633: get member 'errortext'
634: if false goto 645
PrintTextAbove( container, "Error -->"+creation.errortext );
635: local #2
636: "Error -->"
637: local #9
638: get member 'errortext'
639: +
640: 3L
641: 1000L
642: 0L
643: Func(2,8): PrintTextAbove
644: #
SleepMS(2);
645: 2L
646: Func(3,3): Sleepms
647: #
648: leave block(2)
649: stepforeach @618
650: leave block(3)
foreach line in GetConfigStringArray( index_elem, "Random" )
651: local #4
652: "Random"
653: Func(5,2): GetConfigStringArray
654: initforeach @706
var parsed := Loot_ParseString( line );
655: decl local #0
656: local #5
657: makelocal
658: jmp userfunc @729
659: :=
660: #
var i;
661: decl local #1
662: #
for( i:=1; i<= parsed.amount; i+=1 )
663: local #9
664: 1L
665: :=
666: #
667: local #9
668: local #8
669: get member id 'amount' (13)
670: <=
671: if false goto 702
var creation := Loot_CreateRandom( container, parsed, magicLevel );
672: decl local #0
673: local #2
674: local #8
675: global #2
676: makelocal
677: jmp userfunc @1236
678: :=
679: #
if( creation.errortext )
680: local #10
681: get member 'errortext'
682: if false goto 693
PrintTextAbove( container, "Error -->"+creation.errortext );
683: local #2
684: "Error -->"
685: local #10
686: get member 'errortext'
687: +
688: 3L
689: 1000L
690: 0L
691: Func(2,8): PrintTextAbove
692: #
SleepMS(5);
693: 5L
694: Func(3,3): Sleepms
695: #
696: leave block(1)
697: local #9
698: 1L
699: +=
700: #
701: goto667
SleepMS(2);
702: 2L
703: Func(3,3): Sleepms
704: #
705: leave block(2)
706: stepforeach @655
707: leave block(3)
foreach line in GetConfigStringArray( index_elem, "Group" )
708: local #4
709: "Group"
710: Func(5,2): GetConfigStringArray
711: initforeach @725
if( line != loot_index )
712: local #5
713: global #3
714: <>
715: if false goto 722
Loot_Generate( container, line );
716: local #2
717: local #5
718: 0L
719: makelocal
720: jmp userfunc @454
721: #
SleepMS(2);
722: 2L
723: Func(3,3): Sleepms
724: #
725: stepforeach @712
726: leave block(3)
return 1;
727: 1L
728: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 206
function Loot_ParseString( line )
729: pop param 'line'
line := SplitWords( CStr( line ));
730: local #0
731: Func(0,4): CStr
732: " "
733: Func(0,7): SplitWords
734: local0 := 
var amount := RandomDiceRoll( CStr( line[1] ));
735: decl local #1
736: local #0
737: 1L
738: [] 1
739: Func(0,4): CStr
740: Func(4,0): RandomDiceRoll
741: :=
742: #
if( !amount )
743: local #1
744: if true goto 747
amount := 1;
745: 1L
746: local1 := 
if( RandomDiceRoll( "1d100" ) <= 10 )
747: "1d100"
748: Func(4,0): RandomDiceRoll
749: 10L
750: <=
751: if false goto 756
amount *= 2;
752: local #1
753: 2L
754: *=
755: #
var name := CStr( line[2] );
756: decl local #2
757: local #0
758: 2L
759: [] 1
760: Func(0,4): CStr
761: :=
762: #
var objtype;
763: decl local #3
764: #
if( GetObjTypeByName( name ))
765: local #2
766: Func(2,15): GetObjtypeByName
767: if false goto 772
objtype := GetObjTypeByName( name );
768: local #2
769: Func(2,15): GetObjtypeByName
770: local3 := 
771: goto775
objtype := CInt( name );
772: local #2
773: Func(0,1): CInt
774: local3 := 
var chance := CDbl( line[3] );
775: decl local #4
776: local #0
777: 3L
778: [] 1
779: Func(0,2): CDbl
780: :=
781: #
if( !chance )
782: local #4
783: if true goto 786
chance := 100.0;
784: 100LF
785: local4 := 
var result := struct;
786: decl local #5
787: struct
788: :=
789: #
result.+name := name;
790: local #5
791: "name"
792: .+
793: local #2
794: := #
result.+objtype := objtype;
795: local #5
796: "objtype"
797: .+
798: local #3
799: := #
result.+chance := chance;
800: local #5
801: "chance"
802: .+
803: local #4
804: := #
result.+amount := amount;
805: local #5
806: "amount"
807: .+
808: local #1
809: := #
return result;
810: local #5
811: return
c:/ZH099/pkg/systems/merchants/include/swindler.inc, Line 48
function SetPrice( npc, item )
812: pop param 'item'
813: pop param 'npc'
var itemdesc := ReadConfigFile( ":*:itemdesc" ),
814: decl local #2
815: ":*:itemdesc"
816: Func(5,0): ReadConfigFile
817: :=
818: #
819: decl local #3
820: local #2
821: local #0
822: get member id 'objtype' (4)
823: [] 1
824: :=
825: #
if( cfg_elem.errortext )
826: local #3
827: get member 'errortext'
828: if false goto 847
AI_Speak( npc, "Error reading itemdesc entry for <"+item.objtype+"> -->"+cfg_el
829: local #1
830: "Error reading itemdesc entry for <"
831: local #0
832: get member id 'objtype' (4)
833: +
834: "> -->"
835: +
836: local #3
837: get member 'errortext'
838: +
839: "default"
840: 0L
841: 0L
842: makelocal
843: jmp userfunc @325
844: #
return 0;
845: 0L
846: return
var item_price := CInt( cfg_elem.VendorSellsFor );
847: decl local #4
848: local #3
849: get member 'VendorSellsFor'
850: Func(0,1): CInt
851: :=
852: #
if( !item_price )
853: local #4
854: if true goto 860
DestroyItem( item );
855: local #0
856: Func(2,17): DestroyItem
857: #
return 0;
858: 0L
859: return
item.sellprice := RandomDiceRoll( item_price+"d5000+"+( item_price * 10 ));
860: local #0
861: local #4
862: "d5000+"
863: +
864: local #4
865: 10L
866: *
867: +
868: Func(4,0): RandomDiceRoll
869: set member id 'sellprice' (23) #
return 1;
870: 1L
871: return
c:/ZH099/pkg/systems/areas/include/managment.inc, Line 17
function A_IsIn( object, option, obj_prop := 0 )
872: pop param 'obj_prop'
873: pop param 'option'
874: pop param 'object'
if( object.multi )
875: local #2
876: get member id 'multi' (12)
877: if false goto 880
return 0;
878: 0L
879: return
var get_main_prop := GetGlobalProperty( "Areas_"+option );
880: decl local #3
881: "Areas_"
882: local #1
883: +
884: Func(2,3): GetGlobalProperty
885: :=
886: #
if( obj_prop )
887: local #0
888: if false goto 895
get_main_prop := GetObjProperty( object, "Areas_"+option );
889: local #2
890: "Areas_"
891: local #1
892: +
893: Func(2,1): GetObjProperty
894: local3 := 
if( !get_main_prop )
895: local #3
896: if true goto 899
return 0;
897: 0L
898: return
var areas := ListAreasByType();
899: decl local #4
900: makelocal
901: jmp userfunc @1104
902: :=
903: #
foreach area_name in areas
904: local #4
905: initforeach @962
var area := GetAreaSettings( area_name ),
906: decl local #0
907: local #5
908: makelocal
909: jmp userfunc @1085
910: :=
911: #
912: decl local #1
913: local #8
914: get member 'Min_X'
915: Func(0,1): CInt
916: :=
917: #
918: decl local #2
919: local #8
920: get member 'Max_X'
921: Func(0,1): CInt
922: :=
923: #
924: decl local #3
925: local #8
926: get member 'Min_Y'
927: Func(0,1): CInt
928: :=
929: #
930: decl local #4
931: local #8
932: get member 'Max_Y'
933: Func(0,1): CInt
934: :=
935: #
936: decl local #5
937: local #8
938: get member id 'realm' (112)
939: Func(0,4): CStr
940: :=
941: #
if( CInt( get_main_prop[area_name] ))
942: local #3
943: local #5
944: [] 1
945: Func(0,1): CInt
946: if false goto 958
if( A_IsInBox( object, MinX, MaxX, MinY, MaxY, Realm ))
947: local #2
948: local #9
949: local #10
950: local #11
951: local #12
952: local #13
953: makelocal
954: jmp userfunc @966
955: if false goto 958
return 1;
956: 1L
957: return
SleepMS(5);
958: 5L
959: Func(3,3): Sleepms
960: #
961: leave block(6)
962: stepforeach @906
963: leave block(3)
return 0;
964: 0L
965: return
c:/ZH099/pkg/systems/areas/include/areas.inc, Line 59
function A_IsInBox( byref object, byref x1, byref x2, byref y1, byref y2, byref
966: pop param byref 'realm'
967: pop param byref 'y2'
968: pop param byref 'y1'
969: pop param byref 'x2'
970: pop param byref 'x1'
971: pop param byref 'object'
if( object.realm == realm )
972: local #5
973: get member id 'realm' (112)
974: local #0
975: ==
976: if false goto 999
if( object.x >= x1 && object.x <= x2 && object.y >= y1 && object.y <= y2 )
977: local #5
978: get member id 'x' (0)
979: local #4
980: >=
981: local #5
982: get member id 'x' (0)
983: local #3
984: <=
985: &&
986: local #5
987: get member id 'y' (1)
988: local #2
989: >=
990: &&
991: local #5
992: get member id 'y' (1)
993: local #1
994: <=
995: &&
996: if false goto 999
return 1;
997: 1L
998: return
return 0;
999: 0L
1000: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 61
function CP_GetStorageAreaContainer( container_id, storage_area_name:=0, create
1001: pop param 'create'
1002: pop param 'storage_area_name'
1003: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
1004: local #1
1005: !
1006: local #1
1007: error
1008: ==
1009: ||
1010: if false goto 1013
storage_area_name := CP_DEFAULT_AREA;
1011: "World Bank"
1012: local1 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
1013: decl local #3
1014: "[Root Container] "
1015: local #2
1016: +
1017: :=
1018: #
var storage_area := FindStorageArea( storage_area_name );
1019: decl local #4
1020: local #1
1021: Func(12,0): FindStorageArea
1022: :=
1023: #
if( !storage_area )
1024: local #4
1025: if true goto 1036
if( !create )
1026: local #0
1027: if true goto 1031
return storage_area; // Will be an error
1028: local #4
1029: return
1030: goto1036
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
1031: local #2
1032: local #1
1033: makelocal
1034: jmp userfunc @1968
1035: return
var root_container := FindRootItemInStorageArea( storage_area, container_name )
1036: decl local #5
1037: local #4
1038: local #3
1039: Func(12,1): FindRootItemInStorageArea
1040: :=
1041: #
if( !root_container && create )
1042: local #5
1043: !
1044: local #0
1045: &&
1046: if false goto 1053
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
1047: local #2
1048: local #1
1049: makelocal
1050: jmp userfunc @1968
1051: return
1052: goto1055
return root_container;
1053: local #5
1054: return
1055: 0L
1056: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 49
function CP_GetStorageContainerForMobile( mobile, storage_area_name:=0, create:
1057: pop param 'create'
1058: pop param 'storage_area_name'
1059: pop param 'mobile'
if(( !storage_area_name ) || ( storage_area_name == error ))
1060: local #1
1061: !
1062: local #1
1063: error
1064: ==
1065: ||
1066: if false goto 1069
storage_area_name := CP_DEFAULT_AREA;
1067: "World Bank"
1068: local1 := 
var container_id := CP_GetMobileContainerID( mobile );
1069: decl local #3
1070: local #2
1071: makelocal
1072: jmp userfunc @2014
1073: :=
1074: #
var root_container := CP_GetStorageAreaContainer( container_id, storage_area_na
1075: decl local #4
1076: local #3
1077: local #1
1078: local #0
1079: makelocal
1080: jmp userfunc @1001
1081: :=
1082: #
return root_container;
1083: local #4
1084: return
c:/ZH099/pkg/systems/areas/include/areas.inc, Line 49
function GetAreaSettings( area_name )
1085: pop param 'area_name'
var cfg_area := GetAreasCfgElem( area_name );
1086: decl local #1
1087: local #0
1088: 0L
1089: makelocal
1090: jmp userfunc @2057
1091: :=
1092: #
if( cfg_area.errortext )
1093: local #1
1094: get member 'errortext'
1095: if false goto 1102
SysLog( "Error::GetAreaSettings() -->"+cfg_area.errortext );
1096: "Error::GetAreaSettings() -->"
1097: local #1
1098: get member 'errortext'
1099: +
1100: Func(3,0): SysLog
1101: #
return cfg_area;
1102: local #1
1103: return
c:/ZH099/pkg/systems/areas/include/areas.inc, Line 39
function ListAreasByType()
var cfg_elem := GetAreasCfgElem( "Settings" );
1104: decl local #0
1105: "Settings"
1106: 0L
1107: makelocal
1108: jmp userfunc @2057
1109: :=
1110: #
var cfg_areas := GetConfigStringArray( cfg_elem, "AreaName" );
1111: decl local #1
1112: local #0
1113: "AreaName"
1114: Func(5,2): GetConfigStringArray
1115: :=
1116: #
if( cfg_areas.errortext )
1117: local #1
1118: get member 'errortext'
1119: if false goto 1126
SysLog( "Error::ListAreasByType() -->"+cfg_areas.errortext );
1120: "Error::ListAreasByType() -->"
1121: local #1
1122: get member 'errortext'
1123: +
1124: Func(3,0): SysLog
1125: #
return cfg_areas;
1126: local #1
1127: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 128
function Loot_CreateItem( container, parsed, magicLevel )
1128: pop param 'magicLevel'
1129: pop param 'parsed'
1130: pop param 'container'
var item;
1131: decl local #3
1132: #
if( Loot_ChanceCheck( parsed ))
1133: local #1
1134: makelocal
1135: jmp userfunc @2236
1136: if false goto 1234
var graphic := GetObjTypeGraphic( parsed.objtype );
1137: decl local #0
1138: local #1
1139: get member id 'objtype' (4)
1140: makelocal
1141: jmp userfunc @2186
1142: :=
1143: #
var stackable := IU_GetTileInfo( graphic ).Stackable;
1144: decl local #1
1145: local #4
1146: makelocal
1147: jmp userfunc @2220
1148: get member id 'stackable' (134)
1149: :=
1150: #
if( stackable )
1151: local #5
1152: if false goto 1181
item := CreateItemInContainer( container, parsed.objtype, parsed.amount );
1153: local #2
1154: local #1
1155: get member id 'objtype' (4)
1156: local #1
1157: get member id 'amount' (13)
1158: Func(2,14): CreateItemInContainer
1159: local3 := 
if( item.errortext )
1160: local #3
1161: get member 'errortext'
1162: if false goto 1180
PrintTextAbove( container, "Error - Could not create ["+parsed.name+"] ->"+item
1163: local #2
1164: "Error - Could not create ["
1165: local #1
1166: get member id 'name' (3)
1167: +
1168: "] ->"
1169: +
1170: local #3
1171: get member 'errortext'
1172: +
1173: 3L
1174: 1000L
1175: 0L
1176: Func(2,8): PrintTextAbove
1177: #
return 0;
1178: 0L
1179: return
1180: goto1233
item := CreateItemInContainer( container, parsed.name );
1181: local #2
1182: local #1
1183: get member id 'name' (3)
1184: 1L
1185: Func(2,14): CreateItemInContainer
1186: local3 := 
if( item.errortext )
1187: local #3
1188: get member 'errortext'
1189: if false goto 1207
PrintTextAbove( container, "Error - Could not create ["+parsed.name+"] ->"+item
1190: local #2
1191: "Error - Could not create ["
1192: local #1
1193: get member id 'name' (3)
1194: +
1195: "] ->"
1196: +
1197: local #3
1198: get member 'errortext'
1199: +
1200: 3L
1201: 1000L
1202: 0L
1203: Func(2,8): PrintTextAbove
1204: #
return 0;
1205: 0L
1206: return
var is_magic := MagicAllowedandType( parsed.name );
1207: decl local #0
1208: local #1
1209: get member id 'name' (3)
1210: makelocal
1211: jmp userfunc @1347
1212: :=
1213: #
if( is_magic )
1214: local #6
1215: if false goto 1232
Apply_Effect( item, is_magic, magicLevel );
1216: local #3
1217: local #6
1218: local #0
1219: makelocal
1220: jmp userfunc @1462
1221: #
if( RandomDiceRoll( "1d10" == 5 ))
1222: "1d10"
1223: 5L
1224: ==
1225: Func(4,0): RandomDiceRoll
1226: if false goto 1232
SetObjProperty( item, "Cursed", 1 );
1227: local #3
1228: "Cursed"
1229: 1L
1230: Func(2,2): SetObjProperty
1231: #
1232: leave block(1)
1233: leave block(2)
return 1;
1234: 1L
1235: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 161
function Loot_CreateRandom( container, parsed, magicLevel )
1236: pop param 'magicLevel'
1237: pop param 'parsed'
1238: pop param 'container'
var groups_cfg := ReadConfigFile( ":loot:loot-groups" );
1239: decl local #3
1240: ":loot:loot-groups"
1241: Func(5,0): ReadConfigFile
1242: :=
1243: #
if( groups_cfg.errortext )
1244: local #3
1245: get member 'errortext'
1246: if false goto 1259
PrintTextAbove( container, "Error - Could not open loot-groups.cfg -> "+groups_
1247: local #2
1248: "Error - Could not open loot-groups.cfg -> "
1249: local #3
1250: get member 'errortext'
1251: +
1252: 3L
1253: 1000L
1254: 0L
1255: Func(2,8): PrintTextAbove
1256: #
return 0;
1257: 0L
1258: return
var groups_elem := groups_cfg[parsed.name];
1259: decl local #4
1260: local #3
1261: local #1
1262: get member id 'name' (3)
1263: [] 1
1264: :=
1265: #
if( !groups_elem )
1266: local #4
1267: if true goto 1282
PrintTextAbove( container, "Error - loot-groups.cfg elem ["+parsed.name+"] does
1268: local #2
1269: "Error - loot-groups.cfg elem ["
1270: local #1
1271: get member id 'name' (3)
1272: +
1273: "] does not exist."
1274: +
1275: 3L
1276: 1000L
1277: 0L
1278: Func(2,8): PrintTextAbove
1279: #
return 0;
1280: 0L
1281: return
var items := GetConfigStringArray( groups_elem, "Item" );
1282: decl local #5
1283: local #4
1284: "Item"
1285: Func(5,2): GetConfigStringArray
1286: :=
1287: #
var randItem := items.RandomEntry();
1288: decl local #6
1289: local #5
1290: Call Method id randomentry (#101, 0 params)
1291: :=
1292: #
var elem := SplitWords( randItem );
1293: decl local #7
1294: local #6
1295: " "
1296: Func(0,7): SplitWords
1297: :=
1298: #
var item_chances := CDbl( elem[2] );
1299: decl local #8
1300: local #7
1301: 2L
1302: [] 1
1303: Func(0,2): CDbl
1304: :=
1305: #
if( !item_chances )
1306: local #8
1307: if true goto 1310
item_chances := 100;
1308: 100L
1309: local8 := 
var i;
1310: decl local #9
1311: #
for( i:=0; i<=5; i+=1 )
1312: local #9
1313: 0L
1314: :=
1315: #
1316: local #9
1317: 5L
1318: <=
1319: if false goto 1345
if( RandomDiceRoll( "1d100" ) <= item_chances )
1320: "1d100"
1321: Func(4,0): RandomDiceRoll
1322: local #8
1323: <=
1324: if false goto 1337
parsed.name := elem[1];
1325: local #1
1326: local #7
1327: 1L
1328: [] 1
1329: set member id 'name' (3) #
Loot_CreateItem( container, parsed, magicLevel );
1330: local #2
1331: local #1
1332: local #0
1333: makelocal
1334: jmp userfunc @1128
1335: #
break;
1336: goto1345
SleepMS(5);
1337: 5L
1338: Func(3,3): Sleepms
1339: #
1340: local #9
1341: 1L
1342: +=
1343: #
1344: goto1316
return 1;
1345: 1L
1346: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 241
function MagicAllowedandType( objname )
1347: pop param 'objname'
var magic_cfg := ReadConfigFile( ":loot:enchantable" );
1348: decl local #1
1349: ":loot:enchantable"
1350: Func(5,0): ReadConfigFile
1351: :=
1352: #
if( magic_cfg.errortext )
1353: local #1
1354: get member 'errortext'
1355: if false goto 1364
SysLog( "Error reading cfg file <loot:enchantable> -->"+magic_cfg.errortext );
1356: "Error reading cfg file <loot:enchantable> -->"
1357: local #1
1358: get member 'errortext'
1359: +
1360: Func(3,0): SysLog
1361: #
return 0;
1362: 0L
1363: return
var first_elem := FindConfigElem( magic_cfg, WEAPONS );
1364: decl local #2
1365: local #1
1366: "Weapons"
1367: Func(5,6): FindConfigElem
1368: :=
1369: #
var first_data := GetConfigInt( first_elem, objname );
1370: decl local #3
1371: local #2
1372: local #0
1373: Func(5,7): GetConfigInt
1374: :=
1375: #
if( first_data )
1376: local #3
1377: if false goto 1380
return WEAPONS;
1378: "Weapons"
1379: return
var second_elem := FindConfigElem( magic_cfg, ARMORS );
1380: decl local #4
1381: local #1
1382: "Armors"
1383: Func(5,6): FindConfigElem
1384: :=
1385: #
var second_data := GetConfigInt( second_elem, objname );
1386: decl local #5
1387: local #4
1388: local #0
1389: Func(5,7): GetConfigInt
1390: :=
1391: #
if( second_data )
1392: local #5
1393: if false goto 1396
return ARMORS;
1394: "Armors"
1395: return
var third_elem := FindConfigElem( magic_cfg, SHIELDS );
1396: decl local #6
1397: local #1
1398: "Shields"
1399: Func(5,6): FindConfigElem
1400: :=
1401: #
var third_data := GetConfigInt( third_elem, objname );
1402: decl local #7
1403: local #6
1404: local #0
1405: Func(5,7): GetConfigInt
1406: :=
1407: #
if( third_data )
1408: local #7
1409: if false goto 1412
return SHIELDS;
1410: "Shields"
1411: return
var fourth_elem := FindConfigElem( magic_cfg, CLOTHINGS );
1412: decl local #8
1413: local #1
1414: "Clothings"
1415: Func(5,6): FindConfigElem
1416: :=
1417: #
var fourth_data := GetConfigInt( fourth_elem, objname );
1418: decl local #9
1419: local #8
1420: local #0
1421: Func(5,7): GetConfigInt
1422: :=
1423: #
if( fourth_data )
1424: local #9
1425: if false goto 1428
return CLOTHINGS;
1426: "Clothings"
1427: return
var fifth_elem := FindConfigElem( magic_cfg, JEWELRY );
1428: decl local #10
1429: local #1
1430: "Jewelry"
1431: Func(5,6): FindConfigElem
1432: :=
1433: #
var fifth_data := GetConfigInt( fifth_elem, objname );
1434: decl local #11
1435: local #10
1436: local #0
1437: Func(5,7): GetConfigInt
1438: :=
1439: #
if( fifth_data )
1440: local #11
1441: if false goto 1444
return JEWELRY;
1442: "Jewelry"
1443: return
var sixth_elem := FindConfigElem( magic_cfg, PROFESSIONAL );
1444: decl local #12
1445: local #1
1446: "Professionnal"
1447: Func(5,6): FindConfigElem
1448: :=
1449: #
var sixth_data := GetConfigInt( sixth_elem, objname );
1450: decl local #13
1451: local #12
1452: local #0
1453: Func(5,7): GetConfigInt
1454: :=
1455: #
if( sixth_data )
1456: local #13
1457: if false goto 1460
return PROFESSIONAL;
1458: "Professionnal"
1459: return
return 0;
1460: 0L
1461: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 288
function Apply_Effect( item, magic, magicLevel )
1462: pop param 'magicLevel'
1463: pop param 'magic'
1464: pop param 'item'
var chances := CInt( RandomDiceRoll( "1d100" ) * magicLevel );
1465: decl local #3
1466: "1d100"
1467: Func(4,0): RandomDiceRoll
1468: local #0
1469: *
1470: Func(0,1): CInt
1471: :=
1472: #
case( magic )
1473: local #1
1474: casejmp
	"Weapons": @1475
	"Armors": @1499
	"Shields": @1532
	"Clothings": @1547
	"Jewelry": @1566
	"Professionnal": @1590
	default: @1605
if( chances < 200 )
1475: local #3
1476: 200L
1477: <
1478: if false goto 1484
ApplyHPMod( item );
1479: local #2
1480: makelocal
1481: jmp userfunc @1775
1482: #
1483: goto1497
elseif( chances < 500 )
1484: local #3
1485: 500L
1486: <
1487: if false goto 1493
ApplyDmgMod( item );
1488: local #2
1489: makelocal
1490: jmp userfunc @1693
1491: #
1492: goto1497
SetHitscript( item );
1493: local #2
1494: makelocal
1495: jmp userfunc @2254
1496: #
break;
1497: goto1498
1498: goto1605
if( chances < 300 )
1499: local #3
1500: 300L
1501: <
1502: if false goto 1508
ApplyHPMod( item );
1503: local #2
1504: makelocal
1505: jmp userfunc @1775
1506: #
1507: goto1530
elseif( chances < 500 )
1508: local #3
1509: 500L
1510: <
1511: if false goto 1517
ApplyARMod( item );
1512: local #2
1513: makelocal
1514: jmp userfunc @1611
1515: #
1516: goto1530
elseif( chances < 600 )
1517: local #3
1518: 600L
1519: <
1520: if false goto 1526
ApplyArSkillMod( item );
1521: local #2
1522: makelocal
1523: jmp userfunc @1642
1524: #
1525: goto1530
SetOnHitscript( item );
1526: local #2
1527: makelocal
1528: jmp userfunc @2472
1529: #
break;
1530: goto1531
1531: goto1605
if( chances < 200 )
1532: local #3
1533: 200L
1534: <
1535: if false goto 1541
ApplyHPMod( item );
1536: local #2
1537: makelocal
1538: jmp userfunc @1775
1539: #
1540: goto1545
ApplyARMod( item );
1541: local #2
1542: makelocal
1543: jmp userfunc @1611
1544: #
break;
1545: goto1546
1546: goto1605
if( chances < 400 )
1547: local #3
1548: 400L
1549: <
1550: if false goto 1556
ApplyMiscSkillMod( item );
1551: local #2
1552: makelocal
1553: jmp userfunc @1847
1554: #
1555: goto1560
ApplyMiscArMod( item );
1556: local #2
1557: makelocal
1558: jmp userfunc @1822
1559: #
AddRandomColor( item );
1560: local #2
1561: makelocal
1562: jmp userfunc @2770
1563: #
break;
1564: goto1565
1565: goto1605
if( chances < 400 )
1566: local #3
1567: 400L
1568: <
1569: if false goto 1575
ApplyMiscArMod( item );
1570: local #2
1571: makelocal
1572: jmp userfunc @1822
1573: #
1574: goto1588
elseif( chances < 600 )
1575: local #3
1576: 600L
1577: <
1578: if false goto 1584
ApplyMiscSkillMod( item );
1579: local #2
1580: makelocal
1581: jmp userfunc @1847
1582: #
1583: goto1588
ApplyEnchant( item );
1584: local #2
1585: makelocal
1586: jmp userfunc @1720
1587: #
break;
1588: goto1589
1589: goto1605
if( chances < 300 )
1590: local #3
1591: 300L
1592: <
1593: if false goto 1599
ApplyHPMod( item );
1594: local #2
1595: makelocal
1596: jmp userfunc @1775
1597: #
1598: goto1603
ApplyMiscSkillMod( item );
1599: local #2
1600: makelocal
1601: jmp userfunc @1847
1602: #
break;
1603: goto1604
1604: goto1605
AddName( item );
1605: local #2
1606: makelocal
1607: jmp userfunc @2706
1608: #
return 1;
1609: 1L
1610: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 81
function ApplyARMod( item )
1611: pop param 'item'
item.ar_mod := CInt( GetChanceLevel() * 5 );
1612: local #0
1613: makelocal
1614: jmp userfunc @2101
1615: 5L
1616: *
1617: Func(0,1): CInt
1618: set member id 'ar_mod' (31) #
if( RandomDiceRoll( "1d100" ) <= ( 10 * magicLevel ))
1619: "1d100"
1620: Func(4,0): RandomDiceRoll
1621: 10L
1622: global #2
1623: *
1624: <=
1625: if false goto 1640
if(( RandomDiceRoll( "1d100" )) <= 75 )
1626: "1d100"
1627: Func(4,0): RandomDiceRoll
1628: 75L
1629: <=
1630: if false goto 1636
ApplyHPMod( item );
1631: local #0
1632: makelocal
1633: jmp userfunc @1775
1634: #
1635: goto1640
ApplyArSkillMod( item );
1636: local #0
1637: makelocal
1638: jmp userfunc @1642
1639: #
return 1;
1640: 1L
1641: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 97
function ApplyArSkillMod( item )
1642: pop param 'item'
if( RandomDiceRoll( "1d1000" ) <= 5 )
1643: "1d1000"
1644: Func(4,0): RandomDiceRoll
1645: 5L
1646: <=
1647: if false goto 1654
ApplyStatMod( item );
1648: local #0
1649: makelocal
1650: jmp userfunc @1919
1651: #
return 1;
1652: 1L
1653: return
var skill_id;
1654: decl local #1
1655: #
case( RandomDiceRoll( "1d2" ))
1656: "1d2"
1657: Func(4,0): RandomDiceRoll
1658: casejmp
	1: @1659
	2: @1663
	default: @1666
skill_id := 26;  //Resisting Spells
1659: 26L
1660: local1 := 
break;
1661: goto1662
1662: goto1666
skill_id := 27;  //Tactics
1663: 27L
1664: local1 := 
break;
1665: goto1666
var skill_name := AP_SkillIdToAttributeName( skill_id );
1666: decl local #2
1667: local #1
1668: makelocal
1669: jmp userfunc @2841
1670: :=
1671: #
AddModifierToEquipment( item, skill_name, GetChanceLevel() );
1672: local #0
1673: local #2
1674: makelocal
1675: jmp userfunc @2101
1676: makelocal
1677: jmp userfunc @2659
1678: #
if( RandomDiceRoll( "1d100" ) <= CInt( 10 * magicLevel ))
1679: "1d100"
1680: Func(4,0): RandomDiceRoll
1681: 10L
1682: global #2
1683: *
1684: Func(0,1): CInt
1685: <=
1686: if false goto 1691
ApplyHPMod( item );
1687: local #0
1688: makelocal
1689: jmp userfunc @1775
1690: #
return 1;
1691: 1L
1692: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 126
function ApplyDmgMod( item )
1693: pop param 'item'
item.dmg_mod := CInt( GetChanceLevel() * 5 );
1694: local #0
1695: makelocal
1696: jmp userfunc @2101
1697: 5L
1698: *
1699: Func(0,1): CInt
1700: set member id 'dmg_mod' (91) #
if( RandomDiceRoll( "1d100" ) <= CInt( 10 * magicLevel ))
1701: "1d100"
1702: Func(4,0): RandomDiceRoll
1703: 10L
1704: global #2
1705: *
1706: Func(0,1): CInt
1707: <=
1708: if false goto 1718
if( RandomDiceRoll( "1d100" ) <= 75 )
1709: "1d100"
1710: Func(4,0): RandomDiceRoll
1711: 75L
1712: <=
1713: if false goto 1718
ApplyHPMod( item );
1714: local #0
1715: makelocal
1716: jmp userfunc @1775
1717: #
return 1;
1718: 1L
1719: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 180
function ApplyEnchant( item )
1720: pop param 'item'
var chances := CInt( RandomDiceRoll( "1d100" ) * magicLevel );
1721: decl local #1
1722: "1d100"
1723: Func(4,0): RandomDiceRoll
1724: global #2
1725: *
1726: Func(0,1): CInt
1727: :=
1728: #
if( chances < 500 )
1729: local #1
1730: 500L
1731: <
1732: if false goto 1738
ApplyProtection( item );
1733: local #0
1734: makelocal
1735: jmp userfunc @1883
1736: #
1737: goto1751
elseif( chances < 600 )
1738: local #1
1739: 600L
1740: <
1741: if false goto 1747
ApplyElementalProtection( item );
1742: local #0
1743: makelocal
1744: jmp userfunc @2878
1745: #
1746: goto1751
ApplyImmunity( item );
1747: local #0
1748: makelocal
1749: jmp userfunc @1789
1750: #
if( RandomDiceRoll( "1d100" ) <= CInt( 10 * magicLevel ))
1751: "1d100"
1752: Func(4,0): RandomDiceRoll
1753: 10L
1754: global #2
1755: *
1756: Func(0,1): CInt
1757: <=
1758: if false goto 1773
if( RandomDiceRoll( "1d100" ) <= 75 )
1759: "1d100"
1760: Func(4,0): RandomDiceRoll
1761: 75L
1762: <=
1763: if false goto 1769
ApplyMiscSkillMod( item );
1764: local #0
1765: makelocal
1766: jmp userfunc @1847
1767: #
1768: goto1773
ApplyMiscArMod( item );
1769: local #0
1770: makelocal
1771: jmp userfunc @1822
1772: #
return 1;
1773: 1L
1774: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 203
function ApplyHPMod( item )
1775: pop param 'item'
item.maxhp_mod := CInt( GetChanceLevel() * 10 );
1776: local #0
1777: makelocal
1778: jmp userfunc @2101
1779: 10L
1780: *
1781: Func(0,1): CInt
1782: set member id 'maxhp_mod' (89) #
item.hp := item.maxhp;
1783: local #0
1784: local #0
1785: get member id 'maxhp' (90)
1786: set member id 'hp' (88) #
return 1;
1787: 1L
1788: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 211
function ApplyImmunity( item )
1789: pop param 'item'
var chance_case := RandomDiceRoll( "1d3" ),
1790: decl local #1
1791: "1d3"
1792: Func(4,0): RandomDiceRoll
1793: :=
1794: #
1795: decl local #2
1796: makelocal
1797: jmp userfunc @2101
1798: :=
1799: #
1800: decl local #3
1801: #
case( chance_case )
1802: local #1
1803: casejmp
	1: @1804
	2: @1808
	3: @1812
	default: @1815
element := "PermSpellReflection";
1804: "PermSpellReflection"
1805: local3 := 
break;
1806: goto1807
1807: goto1815
element := "PermMagicProtection";
1808: "PermMagicProtection"
1809: local3 := 
break;
1810: goto1811
1811: goto1815
element := "PermPoisonProtection";
1812: "PermPoisonProtection"
1813: local3 := 
break;
1814: goto1815
SetObjProperty( item, element, level );
1815: local #0
1816: local #3
1817: local #2
1818: Func(2,2): SetObjProperty
1819: #
return 1;
1820: 1L
1821: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 233
function ApplyMiscArMod( item )
1822: pop param 'item'
var level := GetChanceLevel();
1823: decl local #1
1824: makelocal
1825: jmp userfunc @2101
1826: :=
1827: #
SetObjProperty( item, "ArBonus", level );
1828: local #0
1829: "ArBonus"
1830: local #1
1831: Func(2,2): SetObjProperty
1832: #
if( RandomDiceRoll( "1d100" ) <= CInt( 10 * magicLevel ))
1833: "1d100"
1834: Func(4,0): RandomDiceRoll
1835: 10L
1836: global #2
1837: *
1838: Func(0,1): CInt
1839: <=
1840: if false goto 1845
ApplyMiscSkillMod( item );
1841: local #0
1842: makelocal
1843: jmp userfunc @1847
1844: #
return 1;
1845: 1L
1846: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 247
function ApplyMiscSkillMod( item )
1847: pop param 'item'
if( RandomDiceRoll( "1d1000" ) <= magicLevel )
1848: "1d1000"
1849: Func(4,0): RandomDiceRoll
1850: global #2
1851: <=
1852: if false goto 1859
ApplyStatMod( item );
1853: local #0
1854: makelocal
1855: jmp userfunc @1919
1856: #
return 1;
1857: 1L
1858: return
var level := GetChanceLevel(),
1859: decl local #1
1860: makelocal
1861: jmp userfunc @2101
1862: :=
1863: #
1864: decl local #2
1865: "1d49-1"
1866: Func(4,0): RandomDiceRoll
1867: :=
1868: #
var skill_name := AP_SkillIdToAttributeName( skill_id );
1869: decl local #3
1870: local #2
1871: makelocal
1872: jmp userfunc @2841
1873: :=
1874: #
AddModifierToEquipment( item, skill_name, level );
1875: local #0
1876: local #3
1877: local #1
1878: makelocal
1879: jmp userfunc @2659
1880: #
return 1;
1881: 1L
1882: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 263
function ApplyProtection( item )
1883: pop param 'item'
var chance_case := RandomDiceRoll( "1d3" ),
1884: decl local #1
1885: "1d3"
1886: Func(4,0): RandomDiceRoll
1887: :=
1888: #
1889: decl local #2
1890: makelocal
1891: jmp userfunc @2101
1892: 5L
1893: *
1894: Func(0,1): CInt
1895: :=
1896: #
1897: decl local #3
1898: #
case( chance_case )
1899: local #1
1900: casejmp
	1: @1901
	2: @1905
	3: @1909
	default: @1912
element := "SpellReflection";
1901: "SpellReflection"
1902: local3 := 
break;
1903: goto1904
1904: goto1912
element := "MagicProtection";
1905: "MagicProtection"
1906: local3 := 
break;
1907: goto1908
1908: goto1912
element := "PoisonProtection";
1909: "PoisonProtection"
1910: local3 := 
break;
1911: goto1912
SetObjProperty( item, element, charges );
1912: local #0
1913: local #3
1914: local #2
1915: Func(2,2): SetObjProperty
1916: #
return 1;
1917: 1L
1918: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 285
function ApplyStatMod( item )
1919: pop param 'item'
var level := CInt( GetChanceLevel() * 5 );
1920: decl local #1
1921: makelocal
1922: jmp userfunc @2101
1923: 5L
1924: *
1925: Func(0,1): CInt
1926: :=
1927: #
case( RandomDiceRoll( "1d3" ))
1928: "1d3"
1929: Func(4,0): RandomDiceRoll
1930: casejmp
	1: @1931
	2: @1939
	3: @1947
	default: @1954
AddModifierToEquipment( item, "Strength", level );
1931: local #0
1932: "Strength"
1933: local #1
1934: makelocal
1935: jmp userfunc @2659
1936: #
break;
1937: goto1938
1938: goto1954
AddModifierToEquipment( item, "Dexterity", level );
1939: local #0
1940: "Dexterity"
1941: local #1
1942: makelocal
1943: jmp userfunc @2659
1944: #
break;
1945: goto1946
1946: goto1954
AddModifierToEquipment( item, "Intelligence", level );
1947: local #0
1948: "Intelligence"
1949: local #1
1950: makelocal
1951: jmp userfunc @2659
1952: #
break;
1953: goto1954
if( RandomDiceRoll( "1d100" ) <= CInt( 2 * magicLevel ))
1954: "1d100"
1955: Func(4,0): RandomDiceRoll
1956: 2L
1957: global #2
1958: *
1959: Func(0,1): CInt
1960: <=
1961: if false goto 1966
ApplyHPMod( item );
1962: local #0
1963: makelocal
1964: jmp userfunc @1775
1965: #
return 1;
1966: 1L
1967: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 86
function CP_CreateStorageAreaContainer( container_id, storage_area_name:=0 )
1968: pop param 'storage_area_name'
1969: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
1970: local #0
1971: !
1972: local #0
1973: error
1974: ==
1975: ||
1976: if false goto 1979
storage_area_name := CP_DEFAULT_AREA;
1977: "World Bank"
1978: local0 := 
var storage_area := FindStorageArea( storage_area_name );
1979: decl local #2
1980: local #0
1981: Func(12,0): FindStorageArea
1982: :=
1983: #
if( !storage_area )
1984: local #2
1985: if true goto 1989
storage_area := CreateStorageArea( storage_area_name );
1986: local #0
1987: Func(12,2): CreateStorageArea
1988: local2 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
1989: decl local #3
1990: "[Root Container] "
1991: local #1
1992: +
1993: :=
1994: #
var root_container := CreateRootItemInStorageArea( storage_area, container_name
1995: decl local #4
1996: local #2
1997: local #3
1998: global #4
1999: Func(12,3): CreateRootItemInStorageArea
2000: :=
2001: #
if( root_container.errortext )
2002: local #4
2003: get member 'errortext'
2004: if false goto 2012
CP_StorageDebugMsg( "Error::CP_CreateStorageAreaContainer() - "+root_container.
2005: "Error::CP_CreateStorageAreaContainer() - "
2006: local #4
2007: get member 'errortext'
2008: +
2009: makelocal
2010: jmp userfunc @2034
2011: #
return root_container;
2012: local #4
2013: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 40
function CP_GetMobileContainerID( mobile )
2014: pop param 'mobile'
if( mobile.IsA( POLCLASS_CORPSE ))
2015: local #0
2016: 7L
2017: Call Method id isa (#0, 1 params)
2018: if false goto 2026
return "Owner="+Hex( mobile.ownerserial );
2019: "Owner="
2020: local #0
2021: get member id 'ownerserial' (124)
2022: Func(0,5): Hex
2023: +
2024: return
2025: goto2032
return "Owner="+Hex( mobile.serial );
2026: "Owner="
2027: local #0
2028: get member id 'serial' (6)
2029: Func(0,5): Hex
2030: +
2031: return
2032: 0L
2033: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 145
function CP_StorageDebugMsg( report_text )
2034: pop param 'report_text'
if( STORAGE_DEBUG )
2035: global #5
2036: if false goto 2055
var script_name := GetProcess( GetPid() ).name;
2037: decl local #0
2038: Func(3,2): GetPid
2039: Func(3,1): GetProcess
2040: get member id 'name' (3)
2041: :=
2042: #
LogToFile( "::log/storage.log", "["+script_name+"]: "+report_text, LOG_DATETIME
2043: "::log/storage.log"
2044: "["
2045: local #1
2046: +
2047: "]: "
2048: +
2049: local #0
2050: +
2051: 1L
2052: Func(9,0): LogToFile
2053: #
2054: leave block(1)
return 1;
2055: 1L
2056: return
c:/ZH099/pkg/systems/areas/include/areas.inc, Line 23
function GetAreasCfgElem( area_name, byref cfg_file:=0 )
2057: pop param byref 'cfg_file'
2058: pop param 'area_name'
if( !cfg_file )
2059: local #0
2060: if true goto 2064
cfg_file := GetAreasCfgFile();
2061: makelocal
2062: jmp userfunc @2085
2063: local0 := 
var cfg_elem := cfg_file[area_name];
2064: decl local #2
2065: local #0
2066: local #1
2067: [] 1
2068: :=
2069: #
if( cfg_elem.errortext )
2070: local #2
2071: get member 'errortext'
2072: if false goto 2083
SysLog( "Error::GetAreasCfgElem() - unable to find cfg elem ["+area_name+"] ->"
2073: "Error::GetAreasCfgElem() - unable to find cfg elem ["
2074: local #1
2075: +
2076: "] ->"
2077: +
2078: local #2
2079: get member 'errortext'
2080: +
2081: Func(3,0): SysLog
2082: #
return cfg_elem;
2083: local #2
2084: return
c:/ZH099/pkg/systems/areas/include/areas.inc, Line 15
function GetAreasCfgFile()
var cfg_file := ReadConfigFile( ":areas:areas" );
2085: decl local #0
2086: ":areas:areas"
2087: Func(5,0): ReadConfigFile
2088: :=
2089: #
if( cfg_file.errortext )
2090: local #0
2091: get member 'errortext'
2092: if false goto 2099
SysLog( "Error::GetAreasCfgFile() - Unable to open areas.cfg ->"+cfg_file.error
2093: "Error::GetAreasCfgFile() - Unable to open areas.cfg ->"
2094: local #0
2095: get member 'errortext'
2096: +
2097: Func(3,0): SysLog
2098: #
return cfg_file;
2099: local #0
2100: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 480
function GetChanceLevel()
var chances := CInt( RandomDiceRoll( "1d100" ) * magicLevel );
2101: decl local #0
2102: "1d100"
2103: Func(4,0): RandomDiceRoll
2104: global #2
2105: *
2106: Func(0,1): CInt
2107: :=
2108: #
case( magicLevel )
2109: global #2
2110: casejmp
	5: @2111
	6: @2122
	7: @2133
	default: @2144
if( chances < 100 )
2111: local #0
2112: 100L
2113: <
2114: if false goto 2120
chances += RandomDiceRoll( "1d400" );
2115: local #0
2116: "1d400"
2117: Func(4,0): RandomDiceRoll
2118: +=
2119: #
break;
2120: goto2121
2121: goto2145
if( chances < 200 )
2122: local #0
2123: 200L
2124: <
2125: if false goto 2131
chances += RandomDiceRoll( "1d300" );
2126: local #0
2127: "1d300"
2128: Func(4,0): RandomDiceRoll
2129: +=
2130: #
break;
2131: goto2132
2132: goto2145
if( chances < 300 )
2133: local #0
2134: 300L
2135: <
2136: if false goto 2142
chances += RandomDiceRoll( "1d200" );
2137: local #0
2138: "1d200"
2139: Func(4,0): RandomDiceRoll
2140: +=
2141: #
break;
2142: goto2143
2143: goto2145
break;
2144: goto2145
var level;
2145: decl local #1
2146: #
if( chances < 100 )
2147: local #0
2148: 100L
2149: <
2150: if false goto 2154
level := 1;
2151: 1L
2152: local1 := 
2153: goto2184
elseif( chances < 200 )
2154: local #0
2155: 200L
2156: <
2157: if false goto 2161
level := 2;
2158: 2L
2159: local1 := 
2160: goto2184
elseif( chances < 400 )
2161: local #0
2162: 400L
2163: <
2164: if false goto 2168
level := 3;
2165: 3L
2166: local1 := 
2167: goto2184
elseif( chances < 600 )
2168: local #0
2169: 600L
2170: <
2171: if false goto 2175
level := 4;
2172: 4L
2173: local1 := 
2174: goto2184
elseif( chances < 675 )
2175: local #0
2176: 675L
2177: <
2178: if false goto 2182
level := 5;
2179: 5L
2180: local1 := 
2181: goto2184
level := 6;
2182: 6L
2183: local1 := 
return level;
2184: local #1
2185: return
c:/ZH099/pkg/systems/itemUtils/include/itemdesc.inc, Line 33
function GetObjTypeGraphic( obj_type )
2186: pop param 'obj_type'
obj_type := CInt( obj_type );
2187: local #0
2188: Func(0,1): CInt
2189: local0 := 
var cfg_info := GetItemDescInfo( obj_type );
2190: decl local #1
2191: local #0
2192: makelocal
2193: jmp userfunc @2937
2194: :=
2195: #
if(( !cfg_info ) && ( obj_type >= 0x4000 ))
2196: local #1
2197: !
2198: local #0
2199: 16384L
2200: >=
2201: &&
2202: if false goto 2205
return cfg_info; // Contains an error
2203: local #1
2204: return
var graphic := CInt( cfg_info.Graphic );
2205: decl local #2
2206: local #1
2207: get member id 'graphic' (5)
2208: Func(0,1): CInt
2209: :=
2210: #
if( graphic )
2211: local #2
2212: if false goto 2216
return graphic;
2213: local #2
2214: return
2215: goto2218
return obj_type;
2216: local #0
2217: return
2218: 0L
2219: return
c:/ZH099/pkg/systems/itemUtils/include/itemInfo.inc, Line 6
function IU_GetTileInfo(graphic)
2220: pop param 'graphic'
var config := ReadConfigFile("::tiles");
2221: decl local #1
2222: "::tiles"
2223: Func(5,0): ReadConfigFile
2224: :=
2225: #
if ( !config )
2226: local #1
2227: if true goto 2230
return config; // Contains error
2228: local #1
2229: return
return config[Hex(CInt(graphic))];
2230: local #1
2231: local #0
2232: Func(0,1): CInt
2233: Func(0,5): Hex
2234: [] 1
2235: return
c:/ZH099/pkg/systems/loot/include/lootParser.inc, Line 197
function Loot_ChanceCheck( parsed )
2236: pop param 'parsed'
if( RandomDiceRoll( "1d1000" ) <= CInt( CDbl( parsed.chance ) * 10.0 ))
2237: "1d1000"
2238: Func(4,0): RandomDiceRoll
2239: local #0
2240: get member 'chance'
2241: Func(0,2): CDbl
2242: 10LF
2243: *
2244: Func(0,1): CInt
2245: <=
2246: if false goto 2250
return 1;
2247: 1L
2248: return
2249: goto2252
return 0;
2250: 0L
2251: return
2252: 0L
2253: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 309
function SetHitscript( item )
2254: pop param 'item'
var effects_cfg := ReadConfigFile( ":loot:effects_hit" ),
2255: decl local #1
2256: ":loot:effects_hit"
2257: Func(5,0): ReadConfigFile
2258: :=
2259: #
2260: decl local #2
2261: local #1
2262: Func(5,5): GetConfigIntKeys
2263: :=
2264: #
2265: decl local #3
2266: local #2
2267: Call Method id randomentry (#101, 0 params)
2268: :=
2269: #
2270: decl local #4
2271: local #1
2272: local #3
2273: [] 1
2274: :=
2275: #
if( cfg_entry.HitScriptType == "Greater" )
2276: local #4
2277: get member 'HitScriptType'
2278: "Greater"
2279: ==
2280: if false goto 2284
effect := effects_hit.RandomEntry();
2281: local #2
2282: Call Method id randomentry (#101, 0 params)
2283: local3 := 
if( cfg_entry.errortext )
2284: local #4
2285: get member 'errortext'
2286: if false goto 2289
return 0;
2287: 0L
2288: return
item.hitscript:= cfg_entry.hitscript;
2289: local #0
2290: local #4
2291: get member id 'hitscript' (94)
2292: set member id 'hitscript' (94) #
SetObjProperty( item, "HitScriptNumber", effect );
2293: local #0
2294: "HitScriptNumber"
2295: local #3
2296: Func(2,2): SetObjProperty
2297: #
var cprop := cfg_entry.CProp;
2298: decl local #5
2299: local #4
2300: get member 'CProp'
2301: :=
2302: #
if( cprop )
2303: local #5
2304: if false goto 2366
var power := CInt( cfg_entry.CPropVal );
2305: decl local #0
2306: local #4
2307: get member 'CPropVal'
2308: Func(0,1): CInt
2309: :=
2310: #
if( !power )
2311: local #6
2312: if true goto 2321
power := CInt(( RandomDiceRoll( "1d10" ) * magicLevel ) / 5 );
2313: "1d10"
2314: Func(4,0): RandomDiceRoll
2315: global #2
2316: *
2317: 5L
2318: /
2319: Func(0,1): CInt
2320: local6 := 
if( cprop == "PoisonLevel" )
2321: local #5
2322: "PoisonLevel"
2323: ==
2324: if false goto 2335
power /= 2;
2325: local #6
2326: 2L
2327: /=
2328: #
if( power > 6 )
2329: local #6
2330: 6L
2331: >
2332: if false goto 2335
power := 6;
2333: 6L
2334: local6 := 
if( power < 1 )
2335: local #6
2336: 1L
2337: <
2338: if false goto 2341
power := 1;
2339: 1L
2340: local6 := 
if( cprop == "Hits" || cprop == "Mana" || cprop == "Stamina" )
2341: local #5
2342: "Hits"
2343: ==
2344: local #5
2345: "Mana"
2346: ==
2347: ||
2348: local #5
2349: "Stamina"
2350: ==
2351: ||
2352: if false goto 2359
SetObjProperty( item, "DrainVital", cprop );
2353: local #0
2354: "DrainVital"
2355: local #5
2356: Func(2,2): SetObjProperty
2357: #
2358: goto2365
SetObjProperty( item, cprop, CInt( power ));
2359: local #0
2360: local #5
2361: local #6
2362: Func(0,1): CInt
2363: Func(2,2): SetObjProperty
2364: #
2365: leave block(1)
var type := cfg_entry.Type;
2366: decl local #6
2367: local #4
2368: get member 'Type'
2369: :=
2370: #
if( type )
2371: local #6
2372: if false goto 2378
SetObjProperty( item, "SlayType", type );
2373: local #0
2374: "SlayType"
2375: local #6
2376: Func(2,2): SetObjProperty
2377: #
var spell := cfg_entry.Spellid;
2378: decl local #7
2379: local #4
2380: get member 'Spellid'
2381: :=
2382: #
if( spell )
2383: local #7
2384: if false goto 2436
SetObjProperty( item, "HitWithSpell", spell );
2385: local #0
2386: "HitWithSpell"
2387: local #7
2388: Func(2,2): SetObjProperty
2389: #
var circle := CInt(( RandomDiceRoll( "1d100" ) * magicLevel ) / 100 ),
2390: decl local #0
2391: "1d100"
2392: Func(4,0): RandomDiceRoll
2393: global #2
2394: *
2395: 100L
2396: /
2397: Func(0,1): CInt
2398: :=
2399: #
2400: decl local #1
2401: local #4
2402: get member 'AsCircleMod'
2403: :=
2404: #
if( circle_mod )
2405: local #9
2406: if false goto 2411
circle += circle_mod;
2407: local #8
2408: local #9
2409: +=
2410: #
if( circle < 1 )
2411: local #8
2412: 1L
2413: <
2414: if false goto 2417
circle := 1;
2415: 1L
2416: local8 := 
SetObjProperty( item, "EffectCircle", circle );
2417: local #0
2418: "EffectCircle"
2419: local #8
2420: Func(2,2): SetObjProperty
2421: #
var chance_effect := CInt( RandomDiceRoll( "1d5+3" ) * magicLevel );
2422: decl local #2
2423: "1d5+3"
2424: Func(4,0): RandomDiceRoll
2425: global #2
2426: *
2427: Func(0,1): CInt
2428: :=
2429: #
SetObjProperty( item, "ChanceOfEffect", chance_effect );
2430: local #0
2431: "ChanceOfEffect"
2432: local #10
2433: Func(2,2): SetObjProperty
2434: #
2435: leave block(3)
if( cfg_entry.Place == "Prefix" )
2436: local #4
2437: get member 'Place'
2438: "Prefix"
2439: ==
2440: if false goto 2456
if( RandomDiceRoll( "1d10" ) <= magicLevel )
2441: "1d10"
2442: Func(4,0): RandomDiceRoll
2443: global #2
2444: <=
2445: if false goto 2455
if( RandomDiceRoll( "1d100" ) <= 75 )
2446: "1d100"
2447: Func(4,0): RandomDiceRoll
2448: 75L
2449: <=
2450: if false goto 2455
ApplyDmgMod( item );
2451: local #0
2452: makelocal
2453: jmp userfunc @1693
2454: #
2455: goto2470
if( RandomDiceRoll( "1d10" ) <= magicLevel )
2456: "1d10"
2457: Func(4,0): RandomDiceRoll
2458: global #2
2459: <=
2460: if false goto 2470
if( RandomDiceRoll( "1d100" ) <= 90 )
2461: "1d100"
2462: Func(4,0): RandomDiceRoll
2463: 90L
2464: <=
2465: if false goto 2470
ApplyHPMod( item );
2466: local #0
2467: makelocal
2468: jmp userfunc @1775
2469: #
return 1;
2470: 1L
2471: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 398
function SetOnHitscript( item )
2472: pop param 'item'
var OnEffects_cfg := ReadConfigFile( ":loot:effects_onhit" ),
2473: decl local #1
2474: ":loot:effects_onhit"
2475: Func(5,0): ReadConfigFile
2476: :=
2477: #
2478: decl local #2
2479: local #1
2480: Func(5,5): GetConfigIntKeys
2481: :=
2482: #
2483: decl local #3
2484: local #2
2485: Call Method id randomentry (#101, 0 params)
2486: :=
2487: #
2488: decl local #4
2489: local #3
2490: local #3
2491: [] 1
2492: :=
2493: #
if( cfg_entry.OnHitScriptType == "Greater" )
2494: local #4
2495: get member 'OnHitScriptType'
2496: "Greater"
2497: ==
2498: if false goto 2502
OnEffect := OnEffects_hit.RandomEntry();
2499: local #2
2500: Call Method id randomentry (#101, 0 params)
2501: local3 := 
if( cfg_entry.errortext )
2502: local #4
2503: get member 'errortext'
2504: if false goto 2507
return 0;
2505: 0L
2506: return
SetObjProperty( item, "OnHitScriptNumber", OnEffect );
2507: local #0
2508: "OnHitScriptNumber"
2509: local #3
2510: Func(2,2): SetObjProperty
2511: #
var cprop := cfg_entry.CProp;
2512: decl local #5
2513: local #4
2514: get member 'CProp'
2515: :=
2516: #
if( cprop )
2517: local #5
2518: if false goto 2573
var power := cfg_entry.CPropVal;
2519: decl local #0
2520: local #4
2521: get member 'CPropVal'
2522: :=
2523: #
if( !power )
2524: local #6
2525: if true goto 2566
power := CInt(( RandomDiceRoll( "1d10" ) * magicLevel ) / 6 );
2526: "1d10"
2527: Func(4,0): RandomDiceRoll
2528: global #2
2529: *
2530: 6L
2531: /
2532: Func(0,1): CInt
2533: local6 := 
var mult := cfg_entry.Multiplier;
2534: decl local #0
2535: local #4
2536: get member 'Multiplier'
2537: :=
2538: #
if( mult )
2539: local #7
2540: if false goto 2545
power *= mult;
2541: local #6
2542: local #7
2543: *=
2544: #
if( cprop == "PoisonLevel" )
2545: local #5
2546: "PoisonLevel"
2547: ==
2548: if false goto 2559
power /= 2;
2549: local #6
2550: 2L
2551: /=
2552: #
if( power > 6 )
2553: local #6
2554: 6L
2555: >
2556: if false goto 2559
power := 6;
2557: 6L
2558: local6 := 
if( power < 1 )
2559: local #6
2560: 1L
2561: <
2562: if false goto 2565
power := 1;
2563: 1L
2564: local6 := 
2565: leave block(1)
SetObjProperty( item, cprop, CInt( power ));
2566: local #0
2567: local #5
2568: local #6
2569: Func(0,1): CInt
2570: Func(2,2): SetObjProperty
2571: #
2572: leave block(1)
var type := cfg_entry.Type;
2573: decl local #6
2574: local #4
2575: get member 'Type'
2576: :=
2577: #
if( type )
2578: local #6
2579: if false goto 2585
SetObjProperty( item, "ProtectedType", type );
2580: local #0
2581: "ProtectedType"
2582: local #6
2583: Func(2,2): SetObjProperty
2584: #
var spell := cfg_entry.Spellid;
2585: decl local #7
2586: local #4
2587: get member 'Spellid'
2588: :=
2589: #
if( spell )
2590: local #7
2591: if false goto 2643
SetObjProperty( item, "HitWithSpell", spell );
2592: local #0
2593: "HitWithSpell"
2594: local #7
2595: Func(2,2): SetObjProperty
2596: #
var circle := CInt(( RandomDiceRoll( "1d100" ) * magicLevel ) / 100 ),
2597: decl local #0
2598: "1d100"
2599: Func(4,0): RandomDiceRoll
2600: global #2
2601: *
2602: 100L
2603: /
2604: Func(0,1): CInt
2605: :=
2606: #
2607: decl local #1
2608: local #4
2609: get member 'AsCircleMod'
2610: :=
2611: #
if( circle_mod )
2612: local #9
2613: if false goto 2618
circle += circle_mod;
2614: local #8
2615: local #9
2616: +=
2617: #
if( circle < 1 )
2618: local #8
2619: 1L
2620: <
2621: if false goto 2624
circle := 1;
2622: 1L
2623: local8 := 
SetObjProperty( item, "EffectCircle", circle );
2624: local #0
2625: "EffectCircle"
2626: local #8
2627: Func(2,2): SetObjProperty
2628: #
var chance_effect := CInt( RandomDiceRoll( "1d5+3" ) * magicLevel );
2629: decl local #2
2630: "1d5+3"
2631: Func(4,0): RandomDiceRoll
2632: global #2
2633: *
2634: Func(0,1): CInt
2635: :=
2636: #
SetObjProperty( item, "ChanceOfEffect", chance_effect );
2637: local #0
2638: "ChanceOfEffect"
2639: local #10
2640: Func(2,2): SetObjProperty
2641: #
2642: leave block(3)
if( RandomDiceRoll( "1d10+1" ) <= magicLevel )
2643: "1d10+1"
2644: Func(4,0): RandomDiceRoll
2645: global #2
2646: <=
2647: if false goto 2657
if( RandomDiceRoll( "1d100" ) <= 90 )
2648: "1d100"
2649: Func(4,0): RandomDiceRoll
2650: 90L
2651: <=
2652: if false goto 2657
ApplyHPMod( item );
2653: local #0
2654: makelocal
2655: jmp userfunc @1775
2656: #
return 1;
2657: 1L
2658: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 126
function AddModifierToEquipment( item, attrib_name, modifier )
2659: pop param 'modifier'
2660: pop param 'attrib_name'
2661: pop param 'item'
var cstm_mods := GetObjProperty( item, "AttribMods" );
2662: decl local #3
2663: local #2
2664: "AttribMods"
2665: Func(2,1): GetObjProperty
2666: :=
2667: #
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
2668: local #3
2669: Func(0,6): TypeOf
2670: Func(0,0): Lower
2671: "dictionary"
2672: <>
2673: if false goto 2676
cstm_mods := dictionary;
2674: dictionary
2675: local3 := 
modifier := CDbl( modifier );
2676: local #0
2677: Func(0,2): CDbl
2678: local0 := 
if( modifier == 0.0 )
2679: local #0
2680: 0LF
2681: ==
2682: if false goto 2688
return error{"errortext":="No modifier value was set."};
2683: error
2684: "No modifier value was set."
2685: addmember-assign(errortext)
2686: return
2687: goto2697
elseif( !AP_GetAttributeCfgElem( attrib_name ))
2688: local #1
2689: 0L
2690: makelocal
2691: jmp userfunc @2797
2692: if true goto 2697
return error{"errortext":="That is not a valid attribute name."};
2693: error
2694: "That is not a valid attribute name."
2695: addmember-assign(errortext)
2696: return
cstm_mods[attrib_name] := modifier;
2697: local #3
2698: local #1
2699: local #0
2700: [] := (1) #
return SetObjProperty( item, "AttribMods", cstm_mods );
2701: local #2
2702: "AttribMods"
2703: local #3
2704: Func(2,2): SetObjProperty
2705: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 50
function AddName( item )
2706: pop param 'item'
var old_desc := item.desc;
2707: decl local #1
2708: local #0
2709: get member id 'desc' (19)
2710: :=
2711: #
if( old_desc[1] == "a" || old_desc[1] == "an" )
2712: local #1
2713: 1L
2714: [] 1
2715: "a"
2716: ==
2717: local #1
2718: 1L
2719: [] 1
2720: "an"
2721: ==
2722: ||
2723: if false goto 2751
var space := Find( item.desc, " ", 1 );
2724: decl local #0
2725: local #0
2726: get member id 'desc' (19)
2727: " "
2728: 1L
2729: Func(0,8): Find
2730: :=
2731: #
var newname := old_desc[space + 1, Len( item.desc )];
2732: decl local #1
2733: local #1
2734: local #2
2735: 1L
2736: +
2737: local #0
2738: get member id 'desc' (19)
2739: Func(0,3): Len
2740: [,]
2741: :=
2742: #
SetName( item, "a magic "+newname );
2743: local #0
2744: "a magic "
2745: local #3
2746: +
2747: Func(2,13): SetName
2748: #
2749: leave block(2)
2750: goto2757
SetName( item, "magic "+old_desc );
2751: local #0
2752: "magic "
2753: local #1
2754: +
2755: Func(2,13): SetName
2756: #
if( GetObjProperty( item, "IsGMItem" ))
2757: local #0
2758: "IsGMItem"
2759: Func(2,1): GetObjProperty
2760: if false goto 2763
return 0;
2761: 0L
2762: return
SetObjProperty( item, "UnIDedMagicalItem", 1 );
2763: local #0
2764: "UnIDedMagicalItem"
2765: 1L
2766: Func(2,2): SetObjProperty
2767: #
return 1;
2768: 1L
2769: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 70
function AddRandomColor( item )
2770: pop param 'item'
SetObjProperty( item, "Undyeable", 1 );
2771: local #0
2772: "Undyeable"
2773: 1L
2774: Func(2,2): SetObjProperty
2775: #
if( !GetObjProperty( item, "EnchantColor" ))
2776: local #0
2777: "EnchantColor"
2778: Func(2,1): GetObjProperty
2779: if true goto 2795
var color := RandomDiceRoll( "1d"+MAX_COLOR+"+1" );
2780: decl local #0
2781: "1d"
2782: 1000L
2783: +
2784: "+1"
2785: +
2786: Func(4,0): RandomDiceRoll
2787: :=
2788: #
SetObjProperty( item, "EnchantColor", color );
2789: local #0
2790: "EnchantColor"
2791: local #1
2792: Func(2,2): SetObjProperty
2793: #
2794: leave block(1)
return 1;
2795: 1L
2796: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 33
function AP_GetAttributeCfgElem( attribute_name, byref cfg_file:=0 )
2797: pop param byref 'cfg_file'
2798: pop param 'attribute_name'
if( !cfg_file )
2799: local #0
2800: if true goto 2804
cfg_file := AP_GetAttributesCfgFile();
2801: makelocal
2802: jmp userfunc @2825
2803: local0 := 
var cfg_elem := cfg_file[attribute_name];
2804: decl local #2
2805: local #0
2806: local #1
2807: [] 1
2808: :=
2809: #
if( cfg_elem.errortext )
2810: local #2
2811: get member 'errortext'
2812: if false goto 2823
SysLog( "Error::AP_GetAttributeCfgElem() - unable to find cfg elem ["+attribute
2813: "Error::AP_GetAttributeCfgElem() - unable to find cfg elem ["
2814: local #1
2815: +
2816: "] ->"
2817: +
2818: local #2
2819: get member 'errortext'
2820: +
2821: Func(3,0): SysLog
2822: #
return cfg_elem;
2823: local #2
2824: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 25
function AP_GetAttributesCfgFile()
var cfg_file := ReadConfigFile( ":attributes:attributes" );
2825: decl local #0
2826: ":attributes:attributes"
2827: Func(5,0): ReadConfigFile
2828: :=
2829: #
if( cfg_file.errortext )
2830: local #0
2831: get member 'errortext'
2832: if false goto 2839
SysLog( "Error::AP_GetAttributesCfgFile() - Unable to open attributes.cfg ->"+c
2833: "Error::AP_GetAttributesCfgFile() - Unable to open attributes.cfg ->"
2834: local #0
2835: get member 'errortext'
2836: +
2837: Func(3,0): SysLog
2838: #
return cfg_file;
2839: local #0
2840: return
c:/ZH099/pkg/systems/attributes/include/attributes_ex.inc, Line 9
function AP_SkillIdToAttributeName( skill_number )
2841: pop param 'skill_number'
var skills_cfg := ReadConfigFile( ":attributes:uoskills" );
2842: decl local #1
2843: ":attributes:uoskills"
2844: Func(5,0): ReadConfigFile
2845: :=
2846: #
if( skills_cfg.errortext )
2847: local #1
2848: get member 'errortext'
2849: if false goto 2856
SysLog( "Error::AP_IDToAttributeName() - Unable to open :attributes:uoskills.cf
2850: "Error::AP_IDToAttributeName() - Unable to open :attributes:uoskills.cfg ->"
2851: local #1
2852: get member 'errortext'
2853: +
2854: Func(3,0): SysLog
2855: #
var cfg_elem := skills_cfg[skill_number];
2856: decl local #2
2857: local #1
2858: local #0
2859: [] 1
2860: :=
2861: #
if( cfg_elem.errortext )
2862: local #2
2863: get member 'errortext'
2864: if false goto 2875
SysLog( "Error::AP_IDToAttributeName() - unable to find cfg elem ["+skill_numbe
2865: "Error::AP_IDToAttributeName() - unable to find cfg elem ["
2866: local #0
2867: +
2868: "] ->"
2869: +
2870: local #2
2871: get member 'errortext'
2872: +
2873: Func(3,0): SysLog
2874: #
return cfg_elem.Attribute;
2875: local #2
2876: get member id 'attribute' (92)
2877: return
c:/ZH099/pkg/systems/loot/include/loot_effects.inc, Line 139
function ApplyElementalProtection( item )
2878: pop param 'item'
var chance_case := RandomDiceRoll( "1d9" ),
2879: decl local #1
2880: "1d9"
2881: Func(4,0): RandomDiceRoll
2882: :=
2883: #
2884: decl local #2
2885: makelocal
2886: jmp userfunc @2101
2887: :=
2888: #
2889: decl local #3
2890: #
case( chance_case )
2891: local #1
2892: casejmp
	1: @2893
	2: @2897
	3: @2901
	4: @2905
	5: @2909
	6: @2913
	7: @2917
	8: @2921
	9: @2925
	default: @2930
element := "FireProtection";
2893: "FireProtection"
2894: local3 := 
break;
2895: goto2896
2896: goto2930
element := "WaterProtection";
2897: "WaterProtection"
2898: local3 := 
break;
2899: goto2900
2900: goto2930
element := "AirProtection";
2901: "AirProtection"
2902: local3 := 
break;
2903: goto2904
2904: goto2930
element := "EarthProtection";
2905: "EarthProtection"
2906: local3 := 
break;
2907: goto2908
2908: goto2930
element := "NecroProtection";
2909: "NecroProtection"
2910: local3 := 
break;
2911: goto2912
2912: goto2930
element := "HolyProtection";
2913: "HolyProtection"
2914: local3 := 
break;
2915: goto2916
2916: goto2930
element := "HealingIncrease";
2917: "HealingIncrease"
2918: local3 := 
break;
2919: goto2920
2920: goto2930
element := "PhysicalProtection";
2921: "PhysicalProtection"
2922: local3 := 
break;
2923: goto2924
2924: goto2930
element := "FreeAction";
2925: "FreeAction"
2926: local3 := 
level := 1;
2927: 1L
2928: local2 := 
break;
2929: goto2930
SetObjProperty( item, element, level );
2930: local #0
2931: local #3
2932: local #2
2933: Func(2,2): SetObjProperty
2934: #
return 1;
2935: 1L
2936: return
c:/ZH099/pkg/systems/itemUtils/include/itemdesc.inc, Line 23
function GetItemDescInfo( obj_type )
2937: pop param 'obj_type'
var item_cfg := GetItemDescCfgFile( "*" );
2938: decl local #1
2939: "*"
2940: makelocal
2941: jmp userfunc @2952
2942: :=
2943: #
if( !item_cfg )
2944: local #1
2945: if true goto 2948
return item_cfg; // Contains an error;
2946: local #1
2947: return
return item_cfg[obj_type];
2948: local #1
2949: local #0
2950: [] 1
2951: return
c:/ZH099/pkg/systems/itemUtils/include/itemdesc.inc, Line 11
function GetItemDescCfgFile( package:="" )
2952: pop param 'package'
var file_name := ":"+package+":itemdesc";
2953: decl local #1
2954: ":"
2955: local #0
2956: +
2957: ":itemdesc"
2958: +
2959: :=
2960: #
var item_cfg := ReadConfigFile( file_name );
2961: decl local #2
2962: local #1
2963: Func(5,0): ReadConfigFile
2964: :=
2965: #
if( item_cfg.errortext )
2966: local #2
2967: get member 'errortext'
2968: if false goto 2980
return error{"errortext":="Unable to open ["+file_name+"] ->"+item_cfg.errortex
2969: error
2970: "Unable to open ["
2971: local #1
2972: +
2973: "] ->"
2974: +
2975: local #2
2976: get member 'errortext'
2977: +
2978: addmember-assign(errortext)
2979: return
return item_cfg;
2980: local #2
2981: return
