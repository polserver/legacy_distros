c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
0: decl global #0
1: 0L
2: :=
3: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\dealer.src, Line 17
program BrainNerve( params )
4: get arg 'params'
var npc		:= params[1];
5: decl local #1
6: local #0
7: 1L
8: [] 1
9: :=
10: #
var event	:= params[3];
11: decl local #2
12: local #0
13: 3L
14: [] 1
15: :=
16: #
params := 0; // Not needed anymore.
17: 0L
18: local0 := 
setupDealer( npc );
19: local #1
20: makelocal
21: jmp userfunc @127
22: #
var text := Lower( event.text ),
23: decl local #3
24: local #2
25: get member 'text'
26: Func(0,0): Lower
27: :=
28: #
29: decl local #4
30: local #2
31: get member 'source'
32: :=
33: #
if( source.hidden )
34: local #4
35: get member id 'hidden' (32)
36: if false goto 40
return 0;
37: 0L
38: progend
39: goto59
elseif( source.dead )
40: local #4
41: get member id 'dead' (39)
42: if false goto 46
return 0;
43: 0L
44: progend
45: goto59
elseif( source.IsA( POLCLASS_NPC ))
46: local #4
47: 4L
48: Call Method id isa (#0, 1 params)
49: if false goto 53
return 0;
50: 0L
51: progend
52: goto59
elseif( !CheckLineOfSight( npc, source ))
53: local #1
54: local #4
55: Func(2,5): CheckLineOfSight
56: if true goto 59
return 0;
57: 0L
58: progend
ProcessSpeech( npc, source, text );
59: local #1
60: local #4
61: local #3
62: makelocal
63: jmp userfunc @69
64: #
return 1;
65: 1L
66: progend
67: leave block(5)
68: progend
C:\ZH099\pkg\systems\brainAI\scripts\listen\dealer.src, Line 47
function ProcessSpeech( npc, source, text )
69: pop param 'text'
70: pop param 'source'
71: pop param 'npc'
if( text["help"] )
72: local #0
73: "help"
74: [] 1
75: if false goto 98
AI_Speak( npc, "I will obey the following orders:" );
76: local #2
77: "I will obey the following orders:"
78: "default"
79: 0L
80: 0L
81: makelocal
82: jmp userfunc @199
83: #
Sleep(2);
84: 2L
85: Func(3,6): Sleep
86: #
AI_Speak( npc, "poker" );
87: local #2
88: "poker"
89: "default"
90: 0L
91: 0L
92: makelocal
93: jmp userfunc @199
94: #
return 1;
95: 1L
96: return
97: goto125
elseif( text["poker"] )
98: local #0
99: "poker"
100: [] 1
101: if false goto 125
var start := start_script( ":pokerTable:dealer/startup", {npc, source} );
102: decl local #0
103: ":pokerTable:dealer/startup"
104: array
105: local #2
106: init{}
107: local #1
108: init{}
109: Func(3,3): Start_Script
110: :=
111: #
if( start.errortext )
112: local #3
113: get member 'errortext'
114: if false goto 124
SendSysMessage( source, "Error cannot start script <:pokerTable:dealer/startup>
115: local #1
116: "Error cannot start script <:pokerTable:dealer/startup> -->"
117: local #3
118: get member 'errortext'
119: +
120: 3L
121: 1000L
122: Func(2,6): SendSysMessage
123: #
124: leave block(1)
return 1;
125: 1L
126: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\dealer.src, Line 64
function setupDealer( npc )
127: pop param 'npc'
var g_datafile := DFOpenDataFile( ":pokerTable:pokerTable", DF_CREATE );
128: decl local #1
129: ":pokerTable:pokerTable"
130: 1L
131: 0L
132: makelocal
133: jmp userfunc @305
134: :=
135: #
var data_elem := DFFindElement( g_datafile, "Table "+npc.serial, DF_CREATE );
136: decl local #2
137: local #1
138: "Table "
139: local #0
140: get member id 'serial' (6)
141: +
142: 1L
143: makelocal
144: jmp userfunc @243
145: :=
146: #
var table_info := array{};
147: decl local #3
148: array
149: :=
150: #
data_elem.SetProp( "Seats", table_info );
151: local #2
152: "Seats"
153: local #3
154: Call Method id setprop (#36, 2 params)
155: #
var tableSpec := struct;
156: decl local #4
157: struct
158: :=
159: #
tableSpec.+small_blind := CInt( GetObjProperty( npc, "small_blind" ));
160: local #4
161: "small_blind"
162: .+
163: local #0
164: "small_blind"
165: Func(2,2): GetObjProperty
166: Func(0,2): CInt
167: := #
tableSpec.+big_blind := CInt( GetObjProperty( npc, "big_blind" ));
168: local #4
169: "big_blind"
170: .+
171: local #0
172: "big_blind"
173: Func(2,2): GetObjProperty
174: Func(0,2): CInt
175: := #
tableSpec.+min_buyIn := CInt( GetObjProperty( npc, "min_buyIn" ));
176: local #4
177: "min_buyIn"
178: .+
179: local #0
180: "min_buyIn"
181: Func(2,2): GetObjProperty
182: Func(0,2): CInt
183: := #
tableSpec.+max_buyIn := CInt( GetObjProperty( npc, "max_buyIn" ));
184: local #4
185: "max_buyIn"
186: .+
187: local #0
188: "max_buyIn"
189: Func(2,2): GetObjProperty
190: Func(0,2): CInt
191: := #
data_elem.SetProp( "Specifications", tableSpec );
192: local #2
193: "Specifications"
194: local #4
195: Call Method id setprop (#36, 2 params)
196: #
return 1;
197: 1L
198: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
199: pop param 'no_wake'
200: pop param 'do_event'
201: pop param 'text_type'
202: pop param 'text'
203: pop param 'npc'
var ev		:= struct;
204: decl local #5
205: struct
206: :=
207: #
ev.+type	:= NPCEVENT_SPEAK;
208: local #5
209: "type"
210: .+
211: 10485765L
212: := #
ev.+text	:= text;
213: local #5
214: "text"
215: .+
216: local #3
217: := #
ev.+texttype	:= text_type;
218: local #5
219: "texttype"
220: .+
221: local #2
222: := #
ev.+doevent	:= do_event;
223: local #5
224: "doevent"
225: .+
226: local #1
227: := #
ev.+WakeUp	:= no_wake;
228: local #5
229: "WakeUp"
230: .+
231: local #0
232: := #
ev.+process	:= GetProcess( GetPid() );
233: local #5
234: "process"
235: .+
236: Func(3,4): GetPid
237: Func(3,1): GetProcess
238: := #
return SendEvent( npc, ev );
239: local #4
240: local #5
241: Func(2,3): SendEvent
242: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
243: pop param 'create'
244: pop param 'elem_name'
245: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
246: decl local #3
247: local #2
248: local #1
249: Func(0,3): CStr
250: Call Method id findelement (#72, 1 params)
251: :=
252: #
if ( !temp && create )
253: local #3
254: !
255: local #0
256: &&
257: if false goto 275
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
258: "Debug::DFFindElement() - Creating elem: "
259: local #1
260: Func(0,3): CStr
261: +
262: makelocal
263: jmp userfunc @361
264: #
file_ref.CreateElement(CStr(elem_name));
265: local #2
266: local #1
267: Func(0,3): CStr
268: Call Method id createelement (#71, 1 params)
269: #
temp := file_ref.FindElement(CStr(elem_name));
270: local #2
271: local #1
272: Func(0,3): CStr
273: Call Method id findelement (#72, 1 params)
274: local3 := 
if ( temp )
275: local #3
276: if false goto 280
return temp;
277: local #3
278: return
279: goto303
elseif (create)
280: local #0
281: if false goto 303
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
282: decl local #0
283: error
284: "Error::DFFindElement() - Could not open data elem ["
285: local #1
286: +
287: "] - "
288: +
289: local #3
290: get member 'errortext'
291: +
292: addmember-assign(errortext)
293: :=
294: #
DF_OutPut(errmsg.errortext);
295: local #4
296: get member 'errortext'
297: makelocal
298: jmp userfunc @361
299: #
return errmsg;
300: local #4
301: return
302: leave block(1)
303: 0L
304: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
305: pop param 'flags'
306: pop param 'create'
307: pop param 'file_name'
var data_file := OpenDataFile(file_name);
308: decl local #3
309: local #2
310: Func(7,0): OpenDataFile
311: :=
312: #
if ( (!data_file) && (create) )
313: local #3
314: !
315: local #1
316: &&
317: if false goto 331
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
318: "Debug::DFOpenDataFile() - Creating data file: "
319: local #2
320: +
321: makelocal
322: jmp userfunc @361
323: #
CreateDataFile(file_name, flags);
324: local #2
325: local #0
326: Func(7,1): CreateDataFile
327: #
data_file := OpenDataFile(file_name);
328: local #2
329: Func(7,0): OpenDataFile
330: local3 := 
if ( data_file )
331: local #3
332: if false goto 336
return data_file;
333: local #3
334: return
335: goto359
elseif ( create )
336: local #1
337: if false goto 359
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
338: decl local #0
339: error
340: "Error::DFOpenDataFile() - Could not open "
341: local #2
342: +
343: " : "
344: +
345: local #3
346: get member 'errortext'
347: +
348: addmember-assign(errortext)
349: :=
350: #
DF_OutPut(errmsg.errortext);
351: local #4
352: get member 'errortext'
353: makelocal
354: jmp userfunc @361
355: #
return errmsg;
356: local #4
357: return
358: leave block(1)
359: 0L
360: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
361: pop param 'text'
if ( DF_DEBUG_MODE )
362: global #0
363: if false goto 382
var script_name := GetProcess(GetPid()).name;
364: decl local #0
365: Func(3,4): GetPid
366: Func(3,1): GetProcess
367: get member id 'name' (3)
368: :=
369: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
370: "::log/dataFile.log"
371: "["
372: local #1
373: +
374: "]: "
375: +
376: local #0
377: +
378: 1L
379: Func(5,0): LogToFile
380: #
381: leave block(1)
return 1;
382: 1L
383: return
