c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 35
var container_type	:= "BankBox";
0: decl global #0
1: "BankBox"
2: :=
3: #
var STORAGE_DEBUG	:= 1;
4: decl global #1
5: 1L
6: :=
7: #
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 16
program BrainNerve( params )
use os;
8: get arg 'params'
var npc		:= params[1];
9: decl local #1
10: local #0
11: 1L
12: [] 1
13: :=
14: #
var event	:= params[3];
15: decl local #2
16: local #0
17: 3L
18: [] 1
19: :=
20: #
params := 0; // Not needed anymore.
21: 0L
22: local0 := 
var text := Lower( event.text ),
23: decl local #3
24: local #2
25: get member 'text'
26: Func(0,0): Lower
27: :=
28: #
29: decl local #4
30: local #2
31: get member 'source'
32: :=
33: #
if( source.hidden )
34: local #4
35: get member id 'hidden' (32)
36: if false goto 40
return 0;
37: 0L
38: progend
39: goto52
elseif( source.dead )
40: local #4
41: get member id 'dead' (39)
42: if false goto 46
return 0;
43: 0L
44: progend
45: goto52
elseif( source.IsA( POLCLASS_NPC ))
46: local #4
47: 4L
48: Call Method id isa (#0, 1 params)
49: if false goto 52
return 0;
50: 0L
51: progend
AI_Turn( npc, source, NETURN_TOWARD );
52: local #1
53: local #4
54: 1L
55: 0L
56: makelocal
57: jmp userfunc @69
58: #
ProcessSpeech( npc, source, text );
59: local #1
60: local #4
61: local #3
62: makelocal
63: jmp userfunc @107
64: #
return 1;
65: 1L
66: progend
67: leave block(5)
68: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 165
function AI_Turn( npc, object, direction:=NETURN_TOWARD, no_wake:=NOWAKE )
69: pop param 'no_wake'
70: pop param 'direction'
71: pop param 'object'
72: pop param 'npc'
var ev		:= struct;
73: decl local #4
74: struct
75: :=
76: #
ev.+type	:= NPCEVENT_TURN;
77: local #4
78: "type"
79: .+
80: 10485766L
81: := #
ev.+source	:= object;
82: local #4
83: "source"
84: .+
85: local #2
86: := #
ev.+direction	:= direction;
87: local #4
88: "direction"
89: .+
90: local #1
91: := #
ev.+WakeUp	:= no_wake;
92: local #4
93: "WakeUp"
94: .+
95: local #0
96: := #
ev.+process	:= GetProcess( GetPid() );
97: local #4
98: "process"
99: .+
100: Func(3,4): GetPid
101: Func(3,1): GetProcess
102: := #
return SendEvent( npc, ev );
103: local #3
104: local #4
105: Func(2,3): SendEvent
106: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 43
function ProcessSpeech( npc, source, text )
107: pop param 'text'
108: pop param 'source'
109: pop param 'npc'
var bank_region := GetObjProperty( npc, "StorageArea" );
110: decl local #3
111: local #2
112: "StorageArea"
113: Func(2,2): GetObjProperty
114: :=
115: #
if( !bank_region )
116: local #3
117: if true goto 120
bank_region := CP_DEFAULT_AREA;
118: "World Bank"
119: local3 := 
var bank_box := CP_GetStorageContainerForMobile( source, bank_region, CP_CREATE
120: decl local #4
121: local #1
122: local #3
123: 1L
124: makelocal
125: jmp userfunc @445
126: :=
127: #
if( text["help"] )
128: local #0
129: "help"
130: [] 1
131: if false goto 154
AI_Speak( npc, "I will obey the following orders:" );
132: local #2
133: "I will obey the following orders:"
134: "default"
135: 0L
136: 0L
137: makelocal
138: jmp userfunc @282
139: #
Sleep(2);
140: 2L
141: Func(3,6): Sleep
142: #
AI_Speak( npc, "bank - box - withdraw - check - balance" );
143: local #2
144: "bank - box - withdraw - check - balance"
145: "default"
146: 0L
147: 0L
148: makelocal
149: jmp userfunc @282
150: #
return 1;
151: 1L
152: return
153: goto239
elseif( text["bank"] || text["box"] )
154: local #0
155: "bank"
156: [] 1
157: local #0
158: "box"
159: [] 1
160: ||
161: if false goto 199
AI_Turn( npc, source, NETURN_TOWARD );
162: local #2
163: local #1
164: 1L
165: 0L
166: makelocal
167: jmp userfunc @69
168: #
if( RandomInt( 100 ) > 98 )
169: 100L
170: Func(4,0): RandomInt
171: 98L
172: >
173: if false goto 194
var start := start_script( ":accounts:mailSystem/verifyEmail", source );
174: decl local #0
175: ":accounts:mailSystem/verifyEmail"
176: local #1
177: Func(3,3): Start_Script
178: :=
179: #
if( start.errortext )
180: local #5
181: get member 'errortext'
182: if false goto 192
SendSysMessage( source, "Error cannot start script <:accounts:mailSystem/verify
183: local #1
184: "Error cannot start script <:accounts:mailSystem/verifyEmail> -->"
185: local #5
186: get member 'errortext'
187: +
188: 3L
189: 1000L
190: Func(2,8): SendSysMessage
191: #
192: leave block(1)
193: goto198
SendOpenSpecialContainer( source, bank_box );
194: local #1
195: local #4
196: Func(2,9): SendOpenSpecialContainer
197: #
198: goto239
elseif( text["withdraw "] )
199: local #0
200: "withdraw "
201: [] 1
202: if false goto 211
WithdrawGold( npc, source, bank_box, text );
203: local #2
204: local #1
205: local #4
206: local #0
207: makelocal
208: jmp userfunc @241
209: #
210: goto239
elseif( text["check "] )
211: local #0
212: "check "
213: [] 1
214: if false goto 230
var amount := FindAmountInSpeech( "check", text );
215: decl local #0
216: "check"
217: local #0
218: makelocal
219: jmp userfunc @473
220: :=
221: #
CheckGoldAmount( npc, bank_box, amount );
222: local #2
223: local #4
224: local #5
225: makelocal
226: jmp userfunc @385
227: #
228: leave block(1)
229: goto239
elseif( text["balance"] )
230: local #0
231: "balance"
232: [] 1
233: if false goto 239
BalanceGold( npc, bank_box );
234: local #2
235: local #4
236: makelocal
237: jmp userfunc @326
238: #
return 1;
239: 1L
240: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 80
function WithdrawGold( npc, mobile, bank_box, byref text )
241: pop param byref 'text'
242: pop param 'bank_box'
243: pop param 'mobile'
244: pop param 'npc'
var amount := FindAmountInSpeech( "withdrawl", text );
245: decl local #4
246: "withdrawl"
247: local #0
248: makelocal
249: jmp userfunc @473
250: :=
251: #
if( !CheckGoldAmount( npc, bank_box, amount ))
252: local #3
253: local #1
254: local #4
255: makelocal
256: jmp userfunc @385
257: if true goto 260
return 0;
258: 0L
259: return
if( ConsumeSubstance( bank_box, GetObjTypeByName( "GoldCoin" ), amount ))
260: local #1
261: "GoldCoin"
262: Func(2,11): GetObjtypeByName
263: local #4
264: Func(2,10): ConsumeSubstance
265: if false goto 272
CreateItemInBackPack( mobile, "GoldCoin", amount );
266: local #2
267: "GoldCoin"
268: local #4
269: Func(2,12): CreateItemInBackpack
270: #
271: goto280
SendSysMessage( mobile, "Error: Unable to consume gold from bank box." );
272: local #2
273: "Error: Unable to consume gold from bank box."
274: 3L
275: 1000L
276: Func(2,8): SendSysMessage
277: #
return 0;
278: 0L
279: return
return 1;
280: 1L
281: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
282: pop param 'no_wake'
283: pop param 'do_event'
284: pop param 'text_type'
285: pop param 'text'
286: pop param 'npc'
var ev		:= struct;
287: decl local #5
288: struct
289: :=
290: #
ev.+type	:= NPCEVENT_SPEAK;
291: local #5
292: "type"
293: .+
294: 10485765L
295: := #
ev.+text	:= text;
296: local #5
297: "text"
298: .+
299: local #3
300: := #
ev.+texttype	:= text_type;
301: local #5
302: "texttype"
303: .+
304: local #2
305: := #
ev.+doevent	:= do_event;
306: local #5
307: "doevent"
308: .+
309: local #1
310: := #
ev.+WakeUp	:= no_wake;
311: local #5
312: "WakeUp"
313: .+
314: local #0
315: := #
ev.+process	:= GetProcess( GetPid() );
316: local #5
317: "process"
318: .+
319: Func(3,4): GetPid
320: Func(3,1): GetProcess
321: := #
return SendEvent( npc, ev );
322: local #4
323: local #5
324: Func(2,3): SendEvent
325: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 113
function BalanceGold( npc, bank_box )
326: pop param 'bank_box'
327: pop param 'npc'
var money := 0;
328: decl local #2
329: 0L
330: :=
331: #
foreach item in EnumerateItemsInContainer( bank_box )
332: local #0
333: 0L
334: Func(2,5): EnumerateItemsInContainer
335: initforeach @356
if( item.objtype == 0xEED || item.objtype == 0xEEE || item.objtype == 0xEEF )
336: local #3
337: get member id 'objtype' (4)
338: 3821L
339: ==
340: local #3
341: get member id 'objtype' (4)
342: 3822L
343: ==
344: ||
345: local #3
346: get member id 'objtype' (4)
347: 3823L
348: ==
349: ||
350: if false goto 356
money += item.amount;
351: local #2
352: local #3
353: get member id 'amount' (13)
354: +=
355: #
356: stepforeach @336
357: leave block(3)
if( money > 0 )
358: local #2
359: 0L
360: >
361: if false goto 375
AI_Speak( npc, "Thy current bank balance is "+money+" gold." );
362: local #1
363: "Thy current bank balance is "
364: local #2
365: +
366: " gold."
367: +
368: "default"
369: 0L
370: 0L
371: makelocal
372: jmp userfunc @282
373: #
374: goto383
AI_Speak( npc, "You have no gold in thy bank box." );
375: local #1
376: "You have no gold in thy bank box."
377: "default"
378: 0L
379: 0L
380: makelocal
381: jmp userfunc @282
382: #
return 1;
383: 1L
384: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 97
function CheckGoldAmount( npc, bank_box, amount )
385: pop param 'amount'
386: pop param 'bank_box'
387: pop param 'npc'
var properties := dictionary{"objtype"->GetObjTypeByName( "GoldCoin" )};
388: decl local #3
389: dictionary
390: "objtype"
391: "GoldCoin"
392: Func(2,11): GetObjtypeByName
393: add dictionary member
394: :=
395: #
var total_gold := AmountInContainer( bank_box, properties );
396: decl local #4
397: local #1
398: local #3
399: makelocal
400: jmp userfunc @500
401: :=
402: #
if( amount == 0 )
403: local #0
404: 0L
405: ==
406: if false goto 418
AI_Speak( npc, "Everyone has atleast zero gold!" );
407: local #2
408: "Everyone has atleast zero gold!"
409: "default"
410: 0L
411: 0L
412: makelocal
413: jmp userfunc @282
414: #
return 0;
415: 0L
416: return
417: goto443
elseif( amount > total_gold )
418: local #0
419: local #4
420: >
421: if false goto 433
AI_Speak( npc, "You do not have that much gold in your box." );
422: local #2
423: "You do not have that much gold in your box."
424: "default"
425: 0L
426: 0L
427: makelocal
428: jmp userfunc @282
429: #
return 0;
430: 0L
431: return
432: goto443
AI_Speak( npc, "You have enough gold." );
433: local #2
434: "You have enough gold."
435: "default"
436: 0L
437: 0L
438: makelocal
439: jmp userfunc @282
440: #
return 1;
441: 1L
442: return
443: 0L
444: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 49
function CP_GetStorageContainerForMobile( mobile, storage_area_name:=0, create:
445: pop param 'create'
446: pop param 'storage_area_name'
447: pop param 'mobile'
if(( !storage_area_name ) || ( storage_area_name == error ))
448: local #1
449: !
450: local #1
451: error
452: ==
453: ||
454: if false goto 457
storage_area_name := CP_DEFAULT_AREA;
455: "World Bank"
456: local1 := 
var container_id := CP_GetMobileContainerID( mobile );
457: decl local #3
458: local #2
459: makelocal
460: jmp userfunc @550
461: :=
462: #
var root_container := CP_GetStorageAreaContainer( container_id, storage_area_na
463: decl local #4
464: local #3
465: local #1
466: local #0
467: makelocal
468: jmp userfunc @570
469: :=
470: #
return root_container;
471: local #4
472: return
C:\ZH099\pkg\systems\brainAI\scripts\listen\banker.src, Line 131
function FindAmountInSpeech( key, text )
473: pop param 'text'
474: pop param 'key'
var key_pos := Find( text, key, 1 );
475: decl local #2
476: local #0
477: local #1
478: 1L
479: Func(0,4): Find
480: :=
481: #
text[1, ( key_pos+Len( key ))] := "";
482: local #0
483: 1L
484: local #2
485: local #1
486: Func(0,5): Len
487: +
488: ""
489: [,] :=
490: #
text := SplitWords( text );
491: local #0
492: " "
493: Func(0,6): SplitWords
494: local0 := 
return CInt( text[1] );
495: local #0
496: 1L
497: [] 1
498: Func(0,2): CInt
499: return
c:/ZH099/pkg/items/containers/include/containers.inc, Line 9
function AmountInContainer( container, properties )
500: pop param 'properties'
501: pop param 'container'
if( Lower( TypeOf( properties )) != "dictionary" )
502: local #0
503: Func(0,1): TypeOf
504: Func(0,0): Lower
505: "dictionary"
506: <>
507: if false goto 512
return error{"errortext":="Property list must be a dictionary."};
508: error
509: "Property list must be a dictionary."
510: addmember-assign(errortext)
511: return
var amount := 0;
512: decl local #2
513: 0L
514: :=
515: #
foreach item in ( EnumerateItemsInContainer( container ))
516: local #1
517: 0L
518: Func(2,5): EnumerateItemsInContainer
519: initforeach @546
foreach property in ( properties.Keys() )
520: local #0
521: Call Method id keys (#56, 0 params)
522: initforeach @536
if( item.Get_Member( property ) != properties[property] )
523: local #3
524: local #6
525: Call Method id get_member (#2, 1 params)
526: local #0
527: local #6
528: [] 1
529: <>
530: if false goto 533
continue MAIN;
531: leave block(3)
532: goto546
SleepMS(2);
533: 2L
534: Func(3,2): Sleepms
535: #
536: stepforeach @523
537: leave block(3)
amount += item.amount;
538: local #2
539: local #3
540: get member id 'amount' (13)
541: +=
542: #
SleepMS(2);
543: 2L
544: Func(3,2): Sleepms
545: #
546: stepforeach @520
547: leave block(3)
return amount;
548: local #2
549: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 40
function CP_GetMobileContainerID( mobile )
550: pop param 'mobile'
if( mobile.IsA( POLCLASS_CORPSE ))
551: local #0
552: 7L
553: Call Method id isa (#0, 1 params)
554: if false goto 562
return "Owner="+Hex( mobile.ownerserial );
555: "Owner="
556: local #0
557: get member id 'ownerserial' (124)
558: Func(0,3): Hex
559: +
560: return
561: goto568
return "Owner="+Hex( mobile.serial );
562: "Owner="
563: local #0
564: get member id 'serial' (6)
565: Func(0,3): Hex
566: +
567: return
568: 0L
569: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 61
function CP_GetStorageAreaContainer( container_id, storage_area_name:=0, create
570: pop param 'create'
571: pop param 'storage_area_name'
572: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
573: local #1
574: !
575: local #1
576: error
577: ==
578: ||
579: if false goto 582
storage_area_name := CP_DEFAULT_AREA;
580: "World Bank"
581: local1 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
582: decl local #3
583: "[Root Container] "
584: local #2
585: +
586: :=
587: #
var storage_area := FindStorageArea( storage_area_name );
588: decl local #4
589: local #1
590: Func(7,0): FindStorageArea
591: :=
592: #
if( !storage_area )
593: local #4
594: if true goto 605
if( !create )
595: local #0
596: if true goto 600
return storage_area; // Will be an error
597: local #4
598: return
599: goto605
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
600: local #2
601: local #1
602: makelocal
603: jmp userfunc @626
604: return
var root_container := FindRootItemInStorageArea( storage_area, container_name )
605: decl local #5
606: local #4
607: local #3
608: Func(7,1): FindRootItemInStorageArea
609: :=
610: #
if( !root_container && create )
611: local #5
612: !
613: local #0
614: &&
615: if false goto 622
return CP_CreateStorageAreaContainer( container_id, storage_area_name );
616: local #2
617: local #1
618: makelocal
619: jmp userfunc @626
620: return
621: goto624
return root_container;
622: local #5
623: return
624: 0L
625: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 86
function CP_CreateStorageAreaContainer( container_id, storage_area_name:=0 )
626: pop param 'storage_area_name'
627: pop param 'container_id'
if(( !storage_area_name ) || ( storage_area_name == error ))
628: local #0
629: !
630: local #0
631: error
632: ==
633: ||
634: if false goto 637
storage_area_name := CP_DEFAULT_AREA;
635: "World Bank"
636: local0 := 
var storage_area := FindStorageArea( storage_area_name );
637: decl local #2
638: local #0
639: Func(7,0): FindStorageArea
640: :=
641: #
if( !storage_area )
642: local #2
643: if true goto 647
storage_area := CreateStorageArea( storage_area_name );
644: local #0
645: Func(7,2): CreateStorageArea
646: local2 := 
var container_name := CP_DEFAULT_PREFIX + container_id;
647: decl local #3
648: "[Root Container] "
649: local #1
650: +
651: :=
652: #
var root_container := CreateRootItemInStorageArea( storage_area, container_name
653: decl local #4
654: local #2
655: local #3
656: global #0
657: Func(7,3): CreateRootItemInStorageArea
658: :=
659: #
if( root_container.errortext )
660: local #4
661: get member 'errortext'
662: if false goto 670
CP_StorageDebugMsg( "Error::CP_CreateStorageAreaContainer() - "+root_container.
663: "Error::CP_CreateStorageAreaContainer() - "
664: local #4
665: get member 'errortext'
666: +
667: makelocal
668: jmp userfunc @672
669: #
return root_container;
670: local #4
671: return
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 145
function CP_StorageDebugMsg( report_text )
672: pop param 'report_text'
if( STORAGE_DEBUG )
673: global #1
674: if false goto 693
var script_name := GetProcess( GetPid() ).name;
675: decl local #0
676: Func(3,4): GetPid
677: Func(3,1): GetProcess
678: get member id 'name' (3)
679: :=
680: #
LogToFile( "::log/storage.log", "["+script_name+"]: "+report_text, LOG_DATETIME
681: "::log/storage.log"
682: "["
683: local #1
684: +
685: "]: "
686: +
687: local #0
688: +
689: 1L
690: Func(5,0): LogToFile
691: #
692: leave block(1)
return 1;
693: 1L
694: return
