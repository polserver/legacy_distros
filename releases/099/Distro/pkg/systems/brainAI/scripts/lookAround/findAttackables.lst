c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @162
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\lookAround\findAttackables.src, Line 25
program BrainNerve( params )
include ":classes:classes";
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var nerve_name	:= params[2];
18: decl local #2
19: local #0
20: 2L
21: [] 1
22: :=
23: #
var nsettings	:= params[3];
24: decl local #3
25: local #0
26: 3L
27: [] 1
28: :=
29: #
var scripts	:= params[4];
30: decl local #4
31: local #0
32: 4L
33: [] 1
34: :=
35: #
params := 0; // Not needed anymore.
36: 0L
37: local0 := 
while( npc )
38: local #1
39: if false goto 84
if( !npc.opponent && !npc.master )
40: local #1
41: get member id 'opponent' (120)
42: !
43: local #1
44: get member id 'master' (63)
45: !
46: &&
47: if false goto 75
if( NPC_LoadWatchList( npc ).Size() < 1 )
48: local #1
49: makelocal
50: jmp userfunc @299
51: Call Method id size (#48, 0 params)
52: 1L
53: <
54: if false goto 62
return AI_EndNerve( npc, nerve_name );
55: local #1
56: local #2
57: 0L
58: makelocal
59: jmp userfunc @130
60: progend
61: goto74
if( !FindOpponent( npc, nsettings, scripts ))
62: local #1
63: local #3
64: local #4
65: makelocal
66: jmp userfunc @206
67: if true goto 74
return AI_EndNerve( npc, nerve_name );
68: local #1
69: local #2
70: 0L
71: makelocal
72: jmp userfunc @130
73: progend
74: goto75
AI_ClearThoughts( npc, CLR_NERVE );
75: local #1
76: 2L
77: makelocal
78: jmp userfunc @88
79: #
Sleep(1);
80: 1L
81: Func(3,7): Sleep
82: #
83: goto38
return 1;
84: 1L
85: progend
86: leave block(5)
87: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
88: pop param 'flags'
89: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
90: decl local #2
91: local #0
92: 1L
93: &
94: :=
95: #
var nerve	:= flags & CLR_NERVE;
96: decl local #3
97: local #0
98: 2L
99: &
100: :=
101: #
var both	:= flags & CLR_BOTH;
102: decl local #4
103: local #0
104: 3L
105: &
106: :=
107: #
if( both || brain )
108: local #4
109: local #2
110: ||
111: if false goto 118
brain := NPC.process;
112: local #1
113: get member id 'process' (64)
114: local2 := 
brain.clear_event_queue();
115: local #2
116: Call Method id clear_event_queue (#78, 0 params)
117: #
if( both || nerve )
118: local #4
119: local #3
120: ||
121: if false goto 128
nerve := GetProcess( GetPid() );
122: Func(3,4): GetPid
123: Func(3,1): GetProcess
124: local3 := 
nerve.clear_event_queue();
125: local #3
126: Call Method id clear_event_queue (#78, 0 params)
127: #
return 1;
128: 1L
129: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 64
function AI_EndNerve( npc, nerve_name, no_wake:=NOWAKE )
130: pop param 'no_wake'
131: pop param 'nerve_name'
132: pop param 'npc'
var ev		:= struct;
133: decl local #3
134: struct
135: :=
136: #
ev.+type	:= NPCEVENT_ENDNERVE;
137: local #3
138: "type"
139: .+
140: 10485775L
141: := #
ev.+name	:= nerve_name;
142: local #3
143: "name"
144: .+
145: local #1
146: := #
ev.+WakeUp	:= no_wake;
147: local #3
148: "WakeUp"
149: .+
150: local #0
151: := #
ev.+process	:= GetProcess( GetPid() );
152: local #3
153: "process"
154: .+
155: Func(3,4): GetPid
156: Func(3,1): GetProcess
157: := #
return SendEvent( npc, ev );
158: local #2
159: local #3
160: Func(2,3): SendEvent
161: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
162: pop param byref 'cfg_file'
163: pop param 'elem_name'
if( !cfg_file )
164: local #0
165: if true goto 169
cfg_file := Classes_GetSettingsCfgFile();
166: makelocal
167: jmp userfunc @190
168: local0 := 
var elem := cfg_file[elem_name];
169: decl local #2
170: local #0
171: local #1
172: [] 1
173: :=
174: #
if( elem.errortext )
175: local #2
176: get member 'errortext'
177: if false goto 188
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
178: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
179: local #1
180: +
181: "] ->"
182: +
183: local #2
184: get member 'errortext'
185: +
186: Func(3,0): SysLog
187: #
return elem;
188: local #2
189: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
190: decl local #0
191: ":classes:settings"
192: Func(5,0): ReadConfigFile
193: :=
194: #
if( cfg.errortext )
195: local #0
196: get member 'errortext'
197: if false goto 204
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
198: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
199: local #0
200: get member 'errortext'
201: +
202: Func(3,0): SysLog
203: #
return cfg;
204: local #0
205: return
C:\ZH099\pkg\systems\brainAI\scripts\lookAround\findAttackables.src, Line 54
function FindOpponent( npc, byref settings, byref scripts )
206: pop param byref 'scripts'
207: pop param byref 'settings'
208: pop param 'npc'
var attack_list := array;
209: decl local #3
210: array
211: :=
212: #
foreach mobile in ( ListMobilesNearLocationEx( npc.x, npc.y, npc.z, CInt( setti
213: local #2
214: get member id 'x' (0)
215: local #2
216: get member id 'y' (1)
217: local #2
218: get member id 'z' (2)
219: local #1
220: "AreaSize"
221: [] 1
222: Func(0,2): CInt
223: 3L
224: local #2
225: get member id 'realm' (112)
226: Func(2,10): ListMobilesNearLocationEx
227: initforeach @257
SleepMS(2);
228: 2L
229: Func(3,2): Sleepms
230: #
if( !CheckLineOfSight( npc, mobile ))
231: local #2
232: local #4
233: Func(2,11): CheckLineOfSight
234: if true goto 237
continue;
235: goto257
236: goto253
elseif( !NPC_IsInWatchList( npc, mobile ))
237: local #2
238: local #4
239: makelocal
240: jmp userfunc @280
241: if true goto 244
continue;
242: goto257
243: goto253
elseif( mobile.hidden )
244: local #4
245: get member id 'hidden' (32)
246: if false goto 253
if( !DetectHidden( npc, mobile ))
247: local #2
248: local #4
249: makelocal
250: jmp userfunc @348
251: if true goto 253
continue;
252: goto257
attack_list.Append( mobile );
253: local #3
254: local #4
255: Call Method id append (#52, 1 params)
256: #
257: stepforeach @228
258: leave block(3)
if( attack_list.Size() > 0 )
259: local #3
260: Call Method id size (#48, 0 params)
261: 0L
262: >
263: if false goto 278
var victim := attack_list.RandomEntry();
264: decl local #0
265: local #3
266: Call Method id randomentry (#101, 0 params)
267: :=
268: #
AI_Attack( npc, victim );
269: local #2
270: local #4
271: 1L
272: makelocal
273: jmp userfunc @316
274: #
return victim;
275: local #4
276: return
277: leave block(1)
return 0;
278: 0L
279: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 70
function NPC_IsInWatchList( npc, mobile )
280: pop param 'mobile'
281: pop param 'npc'
if( mobile.IsA( POLCLASS_MOBILE ))
282: local #0
283: 3L
284: Call Method id isa (#0, 1 params)
285: if false goto 289
mobile := mobile.serial;
286: local #0
287: get member id 'serial' (6)
288: local0 := 
var watch_dict := NPC_LoadWatchList( npc );
289: decl local #2
290: local #1
291: makelocal
292: jmp userfunc @299
293: :=
294: #
return watch_dict.Exists( mobile );
295: local #2
296: local #0
297: Call Method id exists (#55, 1 params)
298: return
c:/ZH099/pkg/systems/brainAI/include/npcWatchList.inc, Line 23
function NPC_LoadWatchList( npc )
299: pop param 'npc'
var watch_dict := GetObjProperty( npc, "#WatchList" );
300: decl local #1
301: local #0
302: "#WatchList"
303: Func(2,2): GetObjProperty
304: :=
305: #
if( Lower( TypeOf( watch_dict )) != "dictionary" )
306: local #1
307: Func(0,1): TypeOf
308: Func(0,0): Lower
309: "dictionary"
310: <>
311: if false goto 314
watch_dict := dictionary;
312: dictionary
313: local1 := 
return watch_dict;
314: local #1
315: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 34
function AI_Attack( npc, opponent, no_wake:=WAKEUP )
316: pop param 'no_wake'
317: pop param 'opponent'
318: pop param 'npc'
var ev		:= struct;
319: decl local #3
320: struct
321: :=
322: #
ev.+type	:= SYSEVENT_ENGAGED;
323: local #3
324: "type"
325: .+
326: 2L
327: := #
ev.+source	:= opponent;
328: local #3
329: "source"
330: .+
331: local #1
332: := #
ev.+WakeUp	:= no_wake;
333: local #3
334: "WakeUp"
335: .+
336: local #0
337: := #
ev.+process	:= GetProcess( GetPid() );
338: local #3
339: "process"
340: .+
341: Func(3,4): GetPid
342: Func(3,1): GetProcess
343: := #
return SendEvent( npc, ev );
344: local #2
345: local #3
346: Func(2,3): SendEvent
347: return
c:/ZH099/pkg/skills/thief/detecthidden/include/detectHidden.inc, Line 12
function DetectHidden( mobile, hider )
348: pop param 'hider'
349: pop param 'mobile'
if( !hider.hidden )
350: local #0
351: get member id 'hidden' (32)
352: if true goto 355
return 1; //Already revealed.
353: 1L
354: return
var mobile_skill := AP_GetSkill( mobile, DETECTING_HIDDEN ),
355: decl local #2
356: local #1
357: "DetectingHidden"
358: makelocal
359: jmp userfunc @432
360: :=
361: #
362: decl local #3
363: local #0
364: "Hiding"
365: makelocal
366: jmp userfunc @432
367: :=
368: #
mobile_skill *= ClasseBonus( mobile, THIEF );
369: local #2
370: local #1
371: "IsThief"
372: makelocal
373: jmp userfunc @462
374: *=
375: #
hider_skill *= ClasseBonus( hider, THIEF );
376: local #3
377: local #0
378: "IsThief"
379: makelocal
380: jmp userfunc @462
381: *=
382: #
if( mobile.IsA( POLCLASS_NPC ))
383: local #1
384: 4L
385: Call Method id isa (#0, 1 params)
386: if false goto 395
if( !mobile_skill )
387: local #2
388: if true goto 391
return 0;
389: 0L
390: return
mobile_skill *= 2;
391: local #2
392: 2L
393: *=
394: #
var chance := CInt( mobile_skill - hider_skill );
395: decl local #4
396: local #2
397: local #3
398: -
399: Func(0,2): CInt
400: :=
401: #
if( chance < 0 )
402: local #4
403: 0L
404: <
405: if false goto 408
chance := 5;
406: 5L
407: local4 := 
if( RandomInt( 100 ) > chance && !mobile.multi )
408: 100L
409: Func(4,2): RandomInt
410: local #4
411: >
412: local #1
413: get member id 'multi' (12)
414: !
415: &&
416: if false goto 419
return 0;
417: 0L
418: return
hider.hidden := 0;
419: local #0
420: 0L
421: set member id 'hidden' (32) #
PrintTextAbovePrivate( hider, "You have been discovered!", hider );
422: local #0
423: "You have been discovered!"
424: local #0
425: 3L
426: 1000L
427: 0L
428: Func(2,9): PrintTextAbovePrivate
429: #
return 1;
430: 1L
431: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
432: pop param 'skill_name'
433: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
434: local #1
435: local #0
436: makelocal
437: jmp userfunc @453
438: local #1
439: local #0
440: makelocal
441: jmp userfunc @444
442: +
443: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
444: pop param 'skill_name'
445: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
446: local #1
447: local #0
448: Func(7,1): GetAttributeTemporaryMod
449: Func(0,3): CDbl
450: 10LF
451: /
452: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
453: pop param 'skill_name'
454: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
455: local #1
456: local #0
457: Func(7,0): GetAttributeBaseValue
458: Func(0,3): CDbl
459: 10LF
460: /
461: return
c:/ZH099/pkg/systems/classes/include/classes.inc, Line 28
function ClasseBonus( mobile, classe )
462: pop param 'classe'
463: pop param 'mobile'
var level := CInt( GetObjProperty( mobile, classe ));
464: decl local #2
465: local #1
466: local #0
467: Func(2,2): GetObjProperty
468: Func(0,2): CInt
469: :=
470: #
if( level )
471: local #2
472: if false goto 482
return CDbl( settings.BonusLevel * level ) + 1;
473: global #0
474: get member 'BonusLevel'
475: local #2
476: *
477: Func(0,3): CDbl
478: 1L
479: +
480: return
481: goto484
return 1;
482: 1L
483: return
484: 0L
485: return
