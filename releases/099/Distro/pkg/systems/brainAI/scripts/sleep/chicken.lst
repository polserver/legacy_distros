c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @291
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\sleep\chicken.src, Line 25
program BrainNerve( params )
use cfgfile;
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var nerve_name	:= params[2];
18: decl local #2
19: local #0
20: 2L
21: [] 1
22: :=
23: #
params := 0; // Not needed anymore.
24: 0L
25: local0 := 
foreach nerve in ( LoadNerves( npc ))
26: local #1
27: makelocal
28: jmp userfunc @335
29: initforeach @49
if( nerve.flags & NF_CONTINUE_ON_SLEEP )
30: local #3
31: get member 'flags'
32: 1L
33: &
34: if false goto 37
continue;
35: goto49
36: goto46
elseif( _nerve_iter != nerve_name )
37: local #5
38: local #2
39: <>
40: if false goto 46
StopNerve( npc, _nerve_iter );
41: local #1
42: local #5
43: makelocal
44: jmp userfunc @352
45: #
SleepMS(2);
46: 2L
47: Func(3,3): Sleepms
48: #
49: stepforeach @30
50: leave block(3)
AP_RefreshVitals( npc );
51: local #1
52: makelocal
53: jmp userfunc @254
54: #
while( npc )
55: local #1
56: if false goto 145
var next_lay := CInt( GetObjProperty( npc, "#NextLay" ));
57: decl local #0
58: local #1
59: "#NextLay"
60: Func(2,1): GetObjProperty
61: Func(0,1): CInt
62: :=
63: #
if( next_lay < POLCore().systime )
64: local #3
65: Func(2,8): POLCore
66: get member 'systime'
67: <
68: if false goto 96
CreateItemAtLocation( npc.x, npc.y, npc.z, "egg", 1, npc.realm );
69: local #1
70: get member id 'x' (0)
71: local #1
72: get member id 'y' (1)
73: local #1
74: get member id 'z' (2)
75: "egg"
76: 1L
77: local #1
78: get member id 'realm' (112)
79: Func(2,9): CreateItemAtLocation
80: #
next_lay := POLCore().systime + (( RandomInt( 30 )+1 )*60 );
81: Func(2,8): POLCore
82: get member 'systime'
83: 30L
84: Func(4,2): RandomInt
85: 1L
86: +
87: 60L
88: *
89: +
90: local3 := 
SetObjProperty( npc, "#NextLay", next_lay );
91: local #1
92: "#NextLay"
93: local #3
94: Func(2,2): SetObjProperty
95: #
Sleep( RandomInt(5)+1 );
96: 5L
97: Func(4,2): RandomInt
98: 1L
99: +
100: Func(3,6): Sleep
101: #
var hiding := AP_GetSkill( npc, HIDING );
102: decl local #1
103: local #1
104: "Hiding"
105: makelocal
106: jmp userfunc @224
107: :=
108: #
if( hiding && !npc.hidden )
109: local #4
110: local #1
111: get member id 'hidden' (32)
112: !
113: &&
114: if false goto 119
npc.hidden := 1;
115: local #1
116: 1L
117: set member id 'hidden' (32) #
118: goto138
elseif( !npc.hidden && !npc.paralyzed && !GetObjProperty( npc, "Stay" ))
119: local #1
120: get member id 'hidden' (32)
121: !
122: local #1
123: get member id 'paralyzed' (35)
124: !
125: &&
126: local #1
127: "Stay"
128: Func(2,1): GetObjProperty
129: !
130: &&
131: if false goto 138
AI_Wander( npc, NOWAKE );
132: local #1
133: 0L
134: 0L
135: makelocal
136: jmp userfunc @191
137: #
AI_ClearThoughts( npc, CLR_NERVE );
138: local #1
139: 2L
140: makelocal
141: jmp userfunc @149
142: #
143: leave block(2)
144: goto55
return 1;
145: 1L
146: progend
147: leave block(3)
148: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
149: pop param 'flags'
150: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
151: decl local #2
152: local #0
153: 1L
154: &
155: :=
156: #
var nerve	:= flags & CLR_NERVE;
157: decl local #3
158: local #0
159: 2L
160: &
161: :=
162: #
var both	:= flags & CLR_BOTH;
163: decl local #4
164: local #0
165: 3L
166: &
167: :=
168: #
if( both || brain )
169: local #4
170: local #2
171: ||
172: if false goto 179
brain := NPC.process;
173: local #1
174: get member id 'process' (64)
175: local2 := 
brain.clear_event_queue();
176: local #2
177: Call Method id clear_event_queue (#78, 0 params)
178: #
if( both || nerve )
179: local #4
180: local #3
181: ||
182: if false goto 189
nerve := GetProcess( GetPid() );
183: Func(3,2): GetPid
184: Func(3,1): GetProcess
185: local3 := 
nerve.clear_event_queue();
186: local #3
187: Call Method id clear_event_queue (#78, 0 params)
188: #
return 1;
189: 1L
190: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 200
function AI_Wander( npc, loop:=0, no_wake:=NOWAKE )
191: pop param 'no_wake'
192: pop param 'loop'
193: pop param 'npc'
var ev		:= struct;
194: decl local #3
195: struct
196: :=
197: #
ev.+type	:= NPCEVENT_WANDER;
198: local #3
199: "type"
200: .+
201: 10485782L
202: := #
ev.+WakeUp	:= no_wake;
203: local #3
204: "WakeUp"
205: .+
206: local #0
207: := #
ev.+loop	:= CInt( loop );
208: local #3
209: "loop"
210: .+
211: local #1
212: Func(0,1): CInt
213: := #
ev.+process	:= GetProcess( GetPid() );
214: local #3
215: "process"
216: .+
217: Func(3,2): GetPid
218: Func(3,1): GetProcess
219: := #
return SendEvent( npc, ev );
220: local #2
221: local #3
222: Func(2,6): SendEvent
223: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
224: pop param 'skill_name'
225: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
226: local #1
227: local #0
228: makelocal
229: jmp userfunc @245
230: local #1
231: local #0
232: makelocal
233: jmp userfunc @236
234: +
235: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
236: pop param 'skill_name'
237: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
238: local #1
239: local #0
240: Func(8,1): GetAttributeTemporaryMod
241: Func(0,2): CDbl
242: 10LF
243: /
244: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
245: pop param 'skill_name'
246: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
247: local #1
248: local #0
249: Func(8,0): GetAttributeBaseValue
250: Func(0,2): CDbl
251: 10LF
252: /
253: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 74
function AP_RefreshVitals( mobile )
254: pop param 'mobile'
var vital_cfg := ReadConfigFile( ":attributes:vitals" );
255: decl local #1
256: ":attributes:vitals"
257: Func(6,0): ReadConfigFile
258: :=
259: #
foreach elem_name in GetConfigStringKeys( vital_cfg )
260: local #1
261: Func(6,4): GetConfigStringKeys
262: initforeach @275
AP_SetVital( mobile, elem_name, AP_GetVitalMaximumValue( mobile, elem_name ));
263: local #0
264: local #2
265: local #0
266: local #2
267: makelocal
268: jmp userfunc @397
269: makelocal
270: jmp userfunc @279
271: #
SleepMS(2);
272: 2L
273: Func(3,3): Sleepms
274: #
275: stepforeach @263
276: leave block(3)
return 1;
277: 1L
278: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 55
function AP_SetVital( mobile, vital_name, amount )
279: pop param 'amount'
280: pop param 'vital_name'
281: pop param 'mobile'
return SetVital( mobile, vital_name, CInt( CDbl( amount ) * 100.0 ));
282: local #2
283: local #1
284: local #0
285: Func(0,2): CDbl
286: 100LF
287: *
288: Func(0,1): CInt
289: Func(7,4): SetVital
290: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
291: pop param byref 'cfg_file'
292: pop param 'elem_name'
if( !cfg_file )
293: local #0
294: if true goto 298
cfg_file := Classes_GetSettingsCfgFile();
295: makelocal
296: jmp userfunc @319
297: local0 := 
var elem := cfg_file[elem_name];
298: decl local #2
299: local #0
300: local #1
301: [] 1
302: :=
303: #
if( elem.errortext )
304: local #2
305: get member 'errortext'
306: if false goto 317
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
307: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
308: local #1
309: +
310: "] ->"
311: +
312: local #2
313: get member 'errortext'
314: +
315: Func(3,0): SysLog
316: #
return elem;
317: local #2
318: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
319: decl local #0
320: ":classes:settings"
321: Func(6,0): ReadConfigFile
322: :=
323: #
if( cfg.errortext )
324: local #0
325: get member 'errortext'
326: if false goto 333
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
327: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
328: local #0
329: get member 'errortext'
330: +
331: Func(3,0): SysLog
332: #
return cfg;
333: local #0
334: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
335: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
336: decl local #1
337: local #0
338: "#NerveInfo"
339: Func(2,1): GetObjProperty
340: :=
341: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
342: local #1
343: Func(0,6): TypeOf
344: Func(0,0): Lower
345: "dictionary"
346: <>
347: if false goto 350
nerve_dict := dictionary;
348: dictionary
349: local1 := 
return nerve_dict;
350: local #1
351: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 119
function StopNerve( mobile, nerve_name )
352: pop param 'nerve_name'
353: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
354: decl local #2
355: local #1
356: makelocal
357: jmp userfunc @335
358: :=
359: #
if( nerve_dict.Exists( nerve_name ))
360: local #2
361: local #0
362: Call Method id exists (#55, 1 params)
363: if false goto 387
var process := GetNerveProcess( mobile, nerve_name );
364: decl local #0
365: local #1
366: local #0
367: makelocal
368: jmp userfunc @406
369: :=
370: #
if( process )
371: local #3
372: if false goto 376
process.Kill();
373: local #3
374: Call Method id kill (#75, 0 params)
375: #
nerve_dict.Erase( nerve_name );
376: local #2
377: local #0
378: Call Method id erase (#49, 1 params)
379: #
return SaveNerves( mobile, nerve_dict );
380: local #1
381: local #2
382: makelocal
383: jmp userfunc @436
384: return
385: leave block(1)
386: goto395
return error{"errortext" := "Error::StopNerve() - Invalid nerve name  ["+nerve_
387: error
388: "Error::StopNerve() - Invalid nerve name  ["
389: local #0
390: +
391: "]"
392: +
393: addmember-assign(errortext)
394: return
395: 0L
396: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
397: pop param 'vital_name'
398: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
399: local #1
400: local #0
401: Func(7,2): GetVitalMaximumValue
402: Func(0,2): CDbl
403: 100LF
404: /
405: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
406: pop param 'nerve_name'
407: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
408: decl local #2
409: local #1
410: makelocal
411: jmp userfunc @335
412: :=
413: #
if( nerve_dict.Exists( nerve_name ))
414: local #2
415: local #0
416: Call Method id exists (#55, 1 params)
417: if false goto 426
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
418: local #2
419: local #0
420: [] 1
421: get member id 'pid' (103)
422: Func(0,1): CInt
423: Func(3,1): GetProcess
424: return
425: goto434
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
426: error
427: "Error::GetNerveProcess() - Invalid nerve name  ["
428: local #0
429: +
430: "]"
431: +
432: addmember-assign(errortext)
433: return
434: 0L
435: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 44
function SaveNerves( mobile, nerve_dict )
436: pop param 'nerve_dict'
437: pop param 'mobile'
return SetObjProperty( mobile, "#NerveInfo", nerve_dict );
438: local #1
439: "#NerveInfo"
440: local #0
441: Func(2,2): SetObjProperty
442: return
