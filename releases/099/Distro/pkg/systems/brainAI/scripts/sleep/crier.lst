c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @204
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\sleep\crier.src, Line 15
program BrainNerve( params )
CONST SPEAK_DOEVENT_ENABLE			:= 0x1;
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var nerve_name	:= params[2];
18: decl local #2
19: local #0
20: 2L
21: [] 1
22: :=
23: #
params := 0; // Not needed anymore.
24: 0L
25: local0 := 
foreach nerve in ( LoadNerves( npc ))
26: local #1
27: makelocal
28: jmp userfunc @248
29: initforeach @49
if( nerve.flags & NF_CONTINUE_ON_SLEEP )
30: local #3
31: get member 'flags'
32: 1L
33: &
34: if false goto 37
continue;
35: goto49
36: goto46
elseif( _nerve_iter != nerve_name )
37: local #5
38: local #2
39: <>
40: if false goto 46
StopNerve( npc, _nerve_iter );
41: local #1
42: local #5
43: makelocal
44: jmp userfunc @315
45: #
SleepMS(2);
46: 2L
47: Func(3,3): Sleepms
48: #
49: stepforeach @30
50: leave block(3)
AP_RefreshVitals( npc );
51: local #1
52: makelocal
53: jmp userfunc @167
54: #
if( RandomInt(500) > 490 )
55: 500L
56: Func(4,2): RandomInt
57: 490L
58: >
59: if false goto 64
SpoutTheNews( npc );
60: local #1
61: makelocal
62: jmp userfunc @265
63: #
var hiding := AP_GetSkill( npc, HIDING );
64: decl local #3
65: local #1
66: "Hiding"
67: makelocal
68: jmp userfunc @137
69: :=
70: #
if( hiding && !npc.hidden )
71: local #3
72: local #1
73: get member id 'hidden' (32)
74: !
75: &&
76: if false goto 81
npc.hidden := 1;
77: local #1
78: 1L
79: set member id 'hidden' (32) #
80: goto100
elseif( !npc.hidden && !npc.paralyzed && !GetObjProperty( npc, "Stay" ))
81: local #1
82: get member id 'hidden' (32)
83: !
84: local #1
85: get member id 'paralyzed' (35)
86: !
87: &&
88: local #1
89: "Stay"
90: Func(2,1): GetObjProperty
91: !
92: &&
93: if false goto 100
AI_Wander( npc, NOWAKE );
94: local #1
95: 0L
96: 0L
97: makelocal
98: jmp userfunc @104
99: #
return 1;
100: 1L
101: progend
102: leave block(4)
103: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 200
function AI_Wander( npc, loop:=0, no_wake:=NOWAKE )
104: pop param 'no_wake'
105: pop param 'loop'
106: pop param 'npc'
var ev		:= struct;
107: decl local #3
108: struct
109: :=
110: #
ev.+type	:= NPCEVENT_WANDER;
111: local #3
112: "type"
113: .+
114: 10485782L
115: := #
ev.+WakeUp	:= no_wake;
116: local #3
117: "WakeUp"
118: .+
119: local #0
120: := #
ev.+loop	:= CInt( loop );
121: local #3
122: "loop"
123: .+
124: local #1
125: Func(0,1): CInt
126: := #
ev.+process	:= GetProcess( GetPid() );
127: local #3
128: "process"
129: .+
130: Func(3,2): GetPid
131: Func(3,1): GetProcess
132: := #
return SendEvent( npc, ev );
133: local #2
134: local #3
135: Func(2,6): SendEvent
136: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
137: pop param 'skill_name'
138: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
139: local #1
140: local #0
141: makelocal
142: jmp userfunc @158
143: local #1
144: local #0
145: makelocal
146: jmp userfunc @149
147: +
148: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
149: pop param 'skill_name'
150: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
151: local #1
152: local #0
153: Func(8,1): GetAttributeTemporaryMod
154: Func(0,2): CDbl
155: 10LF
156: /
157: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
158: pop param 'skill_name'
159: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
160: local #1
161: local #0
162: Func(8,0): GetAttributeBaseValue
163: Func(0,2): CDbl
164: 10LF
165: /
166: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 74
function AP_RefreshVitals( mobile )
167: pop param 'mobile'
var vital_cfg := ReadConfigFile( ":attributes:vitals" );
168: decl local #1
169: ":attributes:vitals"
170: Func(6,0): ReadConfigFile
171: :=
172: #
foreach elem_name in GetConfigStringKeys( vital_cfg )
173: local #1
174: Func(6,4): GetConfigStringKeys
175: initforeach @188
AP_SetVital( mobile, elem_name, AP_GetVitalMaximumValue( mobile, elem_name ));
176: local #0
177: local #2
178: local #0
179: local #2
180: makelocal
181: jmp userfunc @404
182: makelocal
183: jmp userfunc @192
184: #
SleepMS(2);
185: 2L
186: Func(3,3): Sleepms
187: #
188: stepforeach @176
189: leave block(3)
return 1;
190: 1L
191: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 55
function AP_SetVital( mobile, vital_name, amount )
192: pop param 'amount'
193: pop param 'vital_name'
194: pop param 'mobile'
return SetVital( mobile, vital_name, CInt( CDbl( amount ) * 100.0 ));
195: local #2
196: local #1
197: local #0
198: Func(0,2): CDbl
199: 100LF
200: *
201: Func(0,1): CInt
202: Func(7,4): SetVital
203: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
204: pop param byref 'cfg_file'
205: pop param 'elem_name'
if( !cfg_file )
206: local #0
207: if true goto 211
cfg_file := Classes_GetSettingsCfgFile();
208: makelocal
209: jmp userfunc @232
210: local0 := 
var elem := cfg_file[elem_name];
211: decl local #2
212: local #0
213: local #1
214: [] 1
215: :=
216: #
if( elem.errortext )
217: local #2
218: get member 'errortext'
219: if false goto 230
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
220: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
221: local #1
222: +
223: "] ->"
224: +
225: local #2
226: get member 'errortext'
227: +
228: Func(3,0): SysLog
229: #
return elem;
230: local #2
231: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
232: decl local #0
233: ":classes:settings"
234: Func(6,0): ReadConfigFile
235: :=
236: #
if( cfg.errortext )
237: local #0
238: get member 'errortext'
239: if false goto 246
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
240: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
241: local #0
242: get member 'errortext'
243: +
244: Func(3,0): SysLog
245: #
return cfg;
246: local #0
247: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
248: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
249: decl local #1
250: local #0
251: "#NerveInfo"
252: Func(2,1): GetObjProperty
253: :=
254: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
255: local #1
256: Func(0,6): TypeOf
257: Func(0,0): Lower
258: "dictionary"
259: <>
260: if false goto 263
nerve_dict := dictionary;
261: dictionary
262: local1 := 
return nerve_dict;
263: local #1
264: return
C:\ZH099\pkg\systems\brainAI\scripts\sleep\crier.src, Line 49
function SpoutTheNews( npc )
265: pop param 'npc'
var news := GetObjProperty( npc, "News" );
266: decl local #1
267: local #0
268: "News"
269: Func(2,1): GetObjProperty
270: :=
271: #
if( !news )
272: local #1
273: if true goto 284
AI_Speak( npc, "No news is good news!" );
274: local #0
275: "No news is good news!"
276: "default"
277: 0L
278: 0L
279: makelocal
280: jmp userfunc @360
281: #
return 0;
282: 0L
283: return
var i;
284: decl local #2
285: #
for( i:=1; i<=Len( news ); i+=1 )
286: local #2
287: 1L
288: :=
289: #
290: local #2
291: local #1
292: Func(0,3): Len
293: <=
294: if false goto 313
AI_Speak( npc, news[i] );
295: local #0
296: local #1
297: local #2
298: [] 1
299: "default"
300: 0L
301: 0L
302: makelocal
303: jmp userfunc @360
304: #
Sleep(2);
305: 2L
306: Func(3,6): Sleep
307: #
308: local #2
309: 1L
310: +=
311: #
312: goto290
return 1;
313: 1L
314: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 119
function StopNerve( mobile, nerve_name )
315: pop param 'nerve_name'
316: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
317: decl local #2
318: local #1
319: makelocal
320: jmp userfunc @248
321: :=
322: #
if( nerve_dict.Exists( nerve_name ))
323: local #2
324: local #0
325: Call Method id exists (#55, 1 params)
326: if false goto 350
var process := GetNerveProcess( mobile, nerve_name );
327: decl local #0
328: local #1
329: local #0
330: makelocal
331: jmp userfunc @413
332: :=
333: #
if( process )
334: local #3
335: if false goto 339
process.Kill();
336: local #3
337: Call Method id kill (#75, 0 params)
338: #
nerve_dict.Erase( nerve_name );
339: local #2
340: local #0
341: Call Method id erase (#49, 1 params)
342: #
return SaveNerves( mobile, nerve_dict );
343: local #1
344: local #2
345: makelocal
346: jmp userfunc @443
347: return
348: leave block(1)
349: goto358
return error{"errortext" := "Error::StopNerve() - Invalid nerve name  ["+nerve_
350: error
351: "Error::StopNerve() - Invalid nerve name  ["
352: local #0
353: +
354: "]"
355: +
356: addmember-assign(errortext)
357: return
358: 0L
359: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 139
function AI_Speak( npc, text, text_type:=SPEAK_TEXTTYPE_DEFAULT, do_event:=SPEA
360: pop param 'no_wake'
361: pop param 'do_event'
362: pop param 'text_type'
363: pop param 'text'
364: pop param 'npc'
var ev		:= struct;
365: decl local #5
366: struct
367: :=
368: #
ev.+type	:= NPCEVENT_SPEAK;
369: local #5
370: "type"
371: .+
372: 10485765L
373: := #
ev.+text	:= text;
374: local #5
375: "text"
376: .+
377: local #3
378: := #
ev.+texttype	:= text_type;
379: local #5
380: "texttype"
381: .+
382: local #2
383: := #
ev.+doevent	:= do_event;
384: local #5
385: "doevent"
386: .+
387: local #1
388: := #
ev.+WakeUp	:= no_wake;
389: local #5
390: "WakeUp"
391: .+
392: local #0
393: := #
ev.+process	:= GetProcess( GetPid() );
394: local #5
395: "process"
396: .+
397: Func(3,2): GetPid
398: Func(3,1): GetProcess
399: := #
return SendEvent( npc, ev );
400: local #4
401: local #5
402: Func(2,6): SendEvent
403: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
404: pop param 'vital_name'
405: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
406: local #1
407: local #0
408: Func(7,2): GetVitalMaximumValue
409: Func(0,2): CDbl
410: 100LF
411: /
412: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
413: pop param 'nerve_name'
414: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
415: decl local #2
416: local #1
417: makelocal
418: jmp userfunc @248
419: :=
420: #
if( nerve_dict.Exists( nerve_name ))
421: local #2
422: local #0
423: Call Method id exists (#55, 1 params)
424: if false goto 433
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
425: local #2
426: local #0
427: [] 1
428: get member id 'pid' (103)
429: Func(0,1): CInt
430: Func(3,1): GetProcess
431: return
432: goto441
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
433: error
434: "Error::GetNerveProcess() - Invalid nerve name  ["
435: local #0
436: +
437: "]"
438: +
439: addmember-assign(errortext)
440: return
441: 0L
442: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 44
function SaveNerves( mobile, nerve_dict )
443: pop param 'nerve_dict'
444: pop param 'mobile'
return SetObjProperty( mobile, "#NerveInfo", nerve_dict );
445: local #1
446: "#NerveInfo"
447: local #0
448: Func(2,2): SetObjProperty
449: return
