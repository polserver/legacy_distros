c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @299
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\sleep\sheep.src, Line 25
program BrainNerve( params )
use cfgfile;
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var nerve_name	:= params[2];
18: decl local #2
19: local #0
20: 2L
21: [] 1
22: :=
23: #
params := 0; // Not needed anymore.
24: 0L
25: local0 := 
foreach nerve in ( LoadNerves( npc ))
26: local #1
27: makelocal
28: jmp userfunc @343
29: initforeach @49
if( nerve.flags & NF_CONTINUE_ON_SLEEP )
30: local #3
31: get member 'flags'
32: 1L
33: &
34: if false goto 37
continue;
35: goto49
36: goto46
elseif( _nerve_iter != nerve_name )
37: local #5
38: local #2
39: <>
40: if false goto 46
StopNerve( npc, _nerve_iter );
41: local #1
42: local #5
43: makelocal
44: jmp userfunc @360
45: #
SleepMS(2);
46: 2L
47: Func(3,3): Sleepms
48: #
49: stepforeach @30
50: leave block(3)
AP_RefreshVitals( npc );
51: local #1
52: makelocal
53: jmp userfunc @262
54: #
while( npc )
55: local #1
56: if false goto 153
if( npc.graphic != 0xcf && npc.graphic != 0xcf ) // Detect the sheep has no woo
57: local #1
58: get member id 'graphic' (5)
59: 207L
60: <>
61: local #1
62: get member id 'graphic' (5)
63: 207L
64: <>
65: &&
66: if false goto 104
var regen := CInt( GetObjproperty( npc, "#RegrowWool" ));
67: decl local #0
68: local #1
69: "#RegrowWool"
70: Func(2,1): GetObjProperty
71: Func(0,1): CInt
72: :=
73: #
if( !regen )
74: local #3
75: if true goto 84
SetObjProperty( npc, "#RegrowWool", ReadGameClock()+300 );
76: local #1
77: "#RegrowWool"
78: Func(2,8): ReadGameClock
79: 300L
80: +
81: Func(2,2): SetObjProperty
82: #
83: goto103
elseif( regen < ReadGameClock() )
84: local #3
85: Func(2,8): ReadGameClock
86: <
87: if false goto 103
npc.graphic := 207;
88: local #1
89: 207L
90: set member id 'graphic' (5) #
EraseObjProperty( npc, "#RegrowWool" );
91: local #1
92: "#RegrowWool"
93: Func(2,9): EraseObjProperty
94: #
SetObjProperty( npc, "#Wool", RandomInt(20)+1 );
95: local #1
96: "#Wool"
97: 20L
98: Func(4,2): RandomInt
99: 1L
100: +
101: Func(2,2): SetObjProperty
102: #
103: leave block(1)
Sleep( RandomInt(5)+1 );
104: 5L
105: Func(4,2): RandomInt
106: 1L
107: +
108: Func(3,6): Sleep
109: #
var hiding := AP_GetSkill( npc, HIDING );
110: decl local #0
111: local #1
112: "Hiding"
113: makelocal
114: jmp userfunc @232
115: :=
116: #
if( hiding && !npc.hidden )
117: local #3
118: local #1
119: get member id 'hidden' (32)
120: !
121: &&
122: if false goto 127
npc.hidden := 1;
123: local #1
124: 1L
125: set member id 'hidden' (32) #
126: goto146
elseif( !npc.hidden && !npc.paralyzed && !GetObjProperty( npc, "Stay" ))
127: local #1
128: get member id 'hidden' (32)
129: !
130: local #1
131: get member id 'paralyzed' (35)
132: !
133: &&
134: local #1
135: "Stay"
136: Func(2,1): GetObjProperty
137: !
138: &&
139: if false goto 146
AI_Wander( npc, NOWAKE );
140: local #1
141: 0L
142: 0L
143: makelocal
144: jmp userfunc @199
145: #
AI_ClearThoughts( npc, CLR_NERVE );
146: local #1
147: 2L
148: makelocal
149: jmp userfunc @157
150: #
151: leave block(1)
152: goto55
return 1;
153: 1L
154: progend
155: leave block(3)
156: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 45
function AI_ClearThoughts( npc, flags )
157: pop param 'flags'
158: pop param 'npc'
var brain	:= flags & CLR_BRAIN;
159: decl local #2
160: local #0
161: 1L
162: &
163: :=
164: #
var nerve	:= flags & CLR_NERVE;
165: decl local #3
166: local #0
167: 2L
168: &
169: :=
170: #
var both	:= flags & CLR_BOTH;
171: decl local #4
172: local #0
173: 3L
174: &
175: :=
176: #
if( both || brain )
177: local #4
178: local #2
179: ||
180: if false goto 187
brain := NPC.process;
181: local #1
182: get member id 'process' (64)
183: local2 := 
brain.clear_event_queue();
184: local #2
185: Call Method id clear_event_queue (#78, 0 params)
186: #
if( both || nerve )
187: local #4
188: local #3
189: ||
190: if false goto 197
nerve := GetProcess( GetPid() );
191: Func(3,2): GetPid
192: Func(3,1): GetProcess
193: local3 := 
nerve.clear_event_queue();
194: local #3
195: Call Method id clear_event_queue (#78, 0 params)
196: #
return 1;
197: 1L
198: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 200
function AI_Wander( npc, loop:=0, no_wake:=NOWAKE )
199: pop param 'no_wake'
200: pop param 'loop'
201: pop param 'npc'
var ev		:= struct;
202: decl local #3
203: struct
204: :=
205: #
ev.+type	:= NPCEVENT_WANDER;
206: local #3
207: "type"
208: .+
209: 10485782L
210: := #
ev.+WakeUp	:= no_wake;
211: local #3
212: "WakeUp"
213: .+
214: local #0
215: := #
ev.+loop	:= CInt( loop );
216: local #3
217: "loop"
218: .+
219: local #1
220: Func(0,1): CInt
221: := #
ev.+process	:= GetProcess( GetPid() );
222: local #3
223: "process"
224: .+
225: Func(3,2): GetPid
226: Func(3,1): GetProcess
227: := #
return SendEvent( npc, ev );
228: local #2
229: local #3
230: Func(2,6): SendEvent
231: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
232: pop param 'skill_name'
233: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
234: local #1
235: local #0
236: makelocal
237: jmp userfunc @253
238: local #1
239: local #0
240: makelocal
241: jmp userfunc @244
242: +
243: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
244: pop param 'skill_name'
245: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
246: local #1
247: local #0
248: Func(8,1): GetAttributeTemporaryMod
249: Func(0,2): CDbl
250: 10LF
251: /
252: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
253: pop param 'skill_name'
254: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
255: local #1
256: local #0
257: Func(8,0): GetAttributeBaseValue
258: Func(0,2): CDbl
259: 10LF
260: /
261: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 74
function AP_RefreshVitals( mobile )
262: pop param 'mobile'
var vital_cfg := ReadConfigFile( ":attributes:vitals" );
263: decl local #1
264: ":attributes:vitals"
265: Func(6,0): ReadConfigFile
266: :=
267: #
foreach elem_name in GetConfigStringKeys( vital_cfg )
268: local #1
269: Func(6,4): GetConfigStringKeys
270: initforeach @283
AP_SetVital( mobile, elem_name, AP_GetVitalMaximumValue( mobile, elem_name ));
271: local #0
272: local #2
273: local #0
274: local #2
275: makelocal
276: jmp userfunc @405
277: makelocal
278: jmp userfunc @287
279: #
SleepMS(2);
280: 2L
281: Func(3,3): Sleepms
282: #
283: stepforeach @271
284: leave block(3)
return 1;
285: 1L
286: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 55
function AP_SetVital( mobile, vital_name, amount )
287: pop param 'amount'
288: pop param 'vital_name'
289: pop param 'mobile'
return SetVital( mobile, vital_name, CInt( CDbl( amount ) * 100.0 ));
290: local #2
291: local #1
292: local #0
293: Func(0,2): CDbl
294: 100LF
295: *
296: Func(0,1): CInt
297: Func(7,4): SetVital
298: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
299: pop param byref 'cfg_file'
300: pop param 'elem_name'
if( !cfg_file )
301: local #0
302: if true goto 306
cfg_file := Classes_GetSettingsCfgFile();
303: makelocal
304: jmp userfunc @327
305: local0 := 
var elem := cfg_file[elem_name];
306: decl local #2
307: local #0
308: local #1
309: [] 1
310: :=
311: #
if( elem.errortext )
312: local #2
313: get member 'errortext'
314: if false goto 325
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
315: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
316: local #1
317: +
318: "] ->"
319: +
320: local #2
321: get member 'errortext'
322: +
323: Func(3,0): SysLog
324: #
return elem;
325: local #2
326: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
327: decl local #0
328: ":classes:settings"
329: Func(6,0): ReadConfigFile
330: :=
331: #
if( cfg.errortext )
332: local #0
333: get member 'errortext'
334: if false goto 341
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
335: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
336: local #0
337: get member 'errortext'
338: +
339: Func(3,0): SysLog
340: #
return cfg;
341: local #0
342: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
343: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
344: decl local #1
345: local #0
346: "#NerveInfo"
347: Func(2,1): GetObjProperty
348: :=
349: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
350: local #1
351: Func(0,6): TypeOf
352: Func(0,0): Lower
353: "dictionary"
354: <>
355: if false goto 358
nerve_dict := dictionary;
356: dictionary
357: local1 := 
return nerve_dict;
358: local #1
359: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 119
function StopNerve( mobile, nerve_name )
360: pop param 'nerve_name'
361: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
362: decl local #2
363: local #1
364: makelocal
365: jmp userfunc @343
366: :=
367: #
if( nerve_dict.Exists( nerve_name ))
368: local #2
369: local #0
370: Call Method id exists (#55, 1 params)
371: if false goto 395
var process := GetNerveProcess( mobile, nerve_name );
372: decl local #0
373: local #1
374: local #0
375: makelocal
376: jmp userfunc @414
377: :=
378: #
if( process )
379: local #3
380: if false goto 384
process.Kill();
381: local #3
382: Call Method id kill (#75, 0 params)
383: #
nerve_dict.Erase( nerve_name );
384: local #2
385: local #0
386: Call Method id erase (#49, 1 params)
387: #
return SaveNerves( mobile, nerve_dict );
388: local #1
389: local #2
390: makelocal
391: jmp userfunc @444
392: return
393: leave block(1)
394: goto403
return error{"errortext" := "Error::StopNerve() - Invalid nerve name  ["+nerve_
395: error
396: "Error::StopNerve() - Invalid nerve name  ["
397: local #0
398: +
399: "]"
400: +
401: addmember-assign(errortext)
402: return
403: 0L
404: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
405: pop param 'vital_name'
406: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
407: local #1
408: local #0
409: Func(7,2): GetVitalMaximumValue
410: Func(0,2): CDbl
411: 100LF
412: /
413: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
414: pop param 'nerve_name'
415: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
416: decl local #2
417: local #1
418: makelocal
419: jmp userfunc @343
420: :=
421: #
if( nerve_dict.Exists( nerve_name ))
422: local #2
423: local #0
424: Call Method id exists (#55, 1 params)
425: if false goto 434
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
426: local #2
427: local #0
428: [] 1
429: get member id 'pid' (103)
430: Func(0,1): CInt
431: Func(3,1): GetProcess
432: return
433: goto442
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
434: error
435: "Error::GetNerveProcess() - Invalid nerve name  ["
436: local #0
437: +
438: "]"
439: +
440: addmember-assign(errortext)
441: return
442: 0L
443: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 44
function SaveNerves( mobile, nerve_dict )
444: pop param 'nerve_dict'
445: pop param 'mobile'
return SetObjProperty( mobile, "#NerveInfo", nerve_dict );
446: local #1
447: "#NerveInfo"
448: local #0
449: Func(2,2): SetObjProperty
450: return
