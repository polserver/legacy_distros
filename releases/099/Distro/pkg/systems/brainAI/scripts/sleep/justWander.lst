c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @195
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
C:\ZH099\pkg\systems\brainAI\scripts\sleep\justWander.src, Line 24
program BrainNerve( params )
CONST SPEAK_DOEVENT_ENABLE			:= 0x1;
11: get arg 'params'
var npc		:= params[1];
12: decl local #1
13: local #0
14: 1L
15: [] 1
16: :=
17: #
var nerve_name	:= params[2];
18: decl local #2
19: local #0
20: 2L
21: [] 1
22: :=
23: #
params := 0; // Not needed anymore.
24: 0L
25: local0 := 
foreach nerve in ( LoadNerves( npc ))
26: local #1
27: makelocal
28: jmp userfunc @239
29: initforeach @49
if( nerve.flags & NF_CONTINUE_ON_SLEEP )
30: local #3
31: get member 'flags'
32: 1L
33: &
34: if false goto 37
continue;
35: goto49
36: goto46
elseif( _nerve_iter != nerve_name )
37: local #5
38: local #2
39: <>
40: if false goto 46
StopNerve( npc, _nerve_iter );
41: local #1
42: local #5
43: makelocal
44: jmp userfunc @256
45: #
SleepMS(2);
46: 2L
47: Func(3,3): Sleepms
48: #
49: stepforeach @30
50: leave block(3)
AP_RefreshVitals( npc );
51: local #1
52: makelocal
53: jmp userfunc @158
54: #
var hiding := AP_GetSkill( npc, HIDING );
55: decl local #3
56: local #1
57: "Hiding"
58: makelocal
59: jmp userfunc @128
60: :=
61: #
if( hiding && !npc.hidden )
62: local #3
63: local #1
64: get member id 'hidden' (32)
65: !
66: &&
67: if false goto 72
npc.hidden := 1;
68: local #1
69: 1L
70: set member id 'hidden' (32) #
71: goto91
elseif( !npc.hidden && !npc.paralyzed && !GetObjProperty( npc, "Stay" ))
72: local #1
73: get member id 'hidden' (32)
74: !
75: local #1
76: get member id 'paralyzed' (35)
77: !
78: &&
79: local #1
80: "Stay"
81: Func(2,1): GetObjProperty
82: !
83: &&
84: if false goto 91
AI_Wander( npc, NOWAKE );
85: local #1
86: 0L
87: 0L
88: makelocal
89: jmp userfunc @95
90: #
return 1;
91: 1L
92: progend
93: leave block(4)
94: progend
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 200
function AI_Wander( npc, loop:=0, no_wake:=NOWAKE )
95: pop param 'no_wake'
96: pop param 'loop'
97: pop param 'npc'
var ev		:= struct;
98: decl local #3
99: struct
100: :=
101: #
ev.+type	:= NPCEVENT_WANDER;
102: local #3
103: "type"
104: .+
105: 10485782L
106: := #
ev.+WakeUp	:= no_wake;
107: local #3
108: "WakeUp"
109: .+
110: local #0
111: := #
ev.+loop	:= CInt( loop );
112: local #3
113: "loop"
114: .+
115: local #1
116: Func(0,1): CInt
117: := #
ev.+process	:= GetProcess( GetPid() );
118: local #3
119: "process"
120: .+
121: Func(3,2): GetPid
122: Func(3,1): GetProcess
123: := #
return SendEvent( npc, ev );
124: local #2
125: local #3
126: Func(2,6): SendEvent
127: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
128: pop param 'skill_name'
129: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
130: local #1
131: local #0
132: makelocal
133: jmp userfunc @149
134: local #1
135: local #0
136: makelocal
137: jmp userfunc @140
138: +
139: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
140: pop param 'skill_name'
141: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
142: local #1
143: local #0
144: Func(8,1): GetAttributeTemporaryMod
145: Func(0,2): CDbl
146: 10LF
147: /
148: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
149: pop param 'skill_name'
150: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
151: local #1
152: local #0
153: Func(8,0): GetAttributeBaseValue
154: Func(0,2): CDbl
155: 10LF
156: /
157: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 74
function AP_RefreshVitals( mobile )
158: pop param 'mobile'
var vital_cfg := ReadConfigFile( ":attributes:vitals" );
159: decl local #1
160: ":attributes:vitals"
161: Func(6,0): ReadConfigFile
162: :=
163: #
foreach elem_name in GetConfigStringKeys( vital_cfg )
164: local #1
165: Func(6,4): GetConfigStringKeys
166: initforeach @179
AP_SetVital( mobile, elem_name, AP_GetVitalMaximumValue( mobile, elem_name ));
167: local #0
168: local #2
169: local #0
170: local #2
171: makelocal
172: jmp userfunc @301
173: makelocal
174: jmp userfunc @183
175: #
SleepMS(2);
176: 2L
177: Func(3,3): Sleepms
178: #
179: stepforeach @167
180: leave block(3)
return 1;
181: 1L
182: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 55
function AP_SetVital( mobile, vital_name, amount )
183: pop param 'amount'
184: pop param 'vital_name'
185: pop param 'mobile'
return SetVital( mobile, vital_name, CInt( CDbl( amount ) * 100.0 ));
186: local #2
187: local #1
188: local #0
189: Func(0,2): CDbl
190: 100LF
191: *
192: Func(0,1): CInt
193: Func(7,4): SetVital
194: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
195: pop param byref 'cfg_file'
196: pop param 'elem_name'
if( !cfg_file )
197: local #0
198: if true goto 202
cfg_file := Classes_GetSettingsCfgFile();
199: makelocal
200: jmp userfunc @223
201: local0 := 
var elem := cfg_file[elem_name];
202: decl local #2
203: local #0
204: local #1
205: [] 1
206: :=
207: #
if( elem.errortext )
208: local #2
209: get member 'errortext'
210: if false goto 221
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
211: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
212: local #1
213: +
214: "] ->"
215: +
216: local #2
217: get member 'errortext'
218: +
219: Func(3,0): SysLog
220: #
return elem;
221: local #2
222: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
223: decl local #0
224: ":classes:settings"
225: Func(6,0): ReadConfigFile
226: :=
227: #
if( cfg.errortext )
228: local #0
229: get member 'errortext'
230: if false goto 237
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
231: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
232: local #0
233: get member 'errortext'
234: +
235: Func(3,0): SysLog
236: #
return cfg;
237: local #0
238: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 34
function LoadNerves( mobile )
239: pop param 'mobile'
var nerve_dict := GetObjProperty( mobile, "#NerveInfo" );
240: decl local #1
241: local #0
242: "#NerveInfo"
243: Func(2,1): GetObjProperty
244: :=
245: #
if ( Lower( TypeOf( nerve_dict )) != "dictionary" )
246: local #1
247: Func(0,6): TypeOf
248: Func(0,0): Lower
249: "dictionary"
250: <>
251: if false goto 254
nerve_dict := dictionary;
252: dictionary
253: local1 := 
return nerve_dict;
254: local #1
255: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 119
function StopNerve( mobile, nerve_name )
256: pop param 'nerve_name'
257: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
258: decl local #2
259: local #1
260: makelocal
261: jmp userfunc @239
262: :=
263: #
if( nerve_dict.Exists( nerve_name ))
264: local #2
265: local #0
266: Call Method id exists (#55, 1 params)
267: if false goto 291
var process := GetNerveProcess( mobile, nerve_name );
268: decl local #0
269: local #1
270: local #0
271: makelocal
272: jmp userfunc @310
273: :=
274: #
if( process )
275: local #3
276: if false goto 280
process.Kill();
277: local #3
278: Call Method id kill (#75, 0 params)
279: #
nerve_dict.Erase( nerve_name );
280: local #2
281: local #0
282: Call Method id erase (#49, 1 params)
283: #
return SaveNerves( mobile, nerve_dict );
284: local #1
285: local #2
286: makelocal
287: jmp userfunc @340
288: return
289: leave block(1)
290: goto299
return error{"errortext" := "Error::StopNerve() - Invalid nerve name  ["+nerve_
291: error
292: "Error::StopNerve() - Invalid nerve name  ["
293: local #0
294: +
295: "]"
296: +
297: addmember-assign(errortext)
298: return
299: 0L
300: return
c:/ZH099/pkg/systems/attributes/include/vitals.inc, Line 45
function AP_GetVitalMaximumValue( mobile, vital_name )
301: pop param 'vital_name'
302: pop param 'mobile'
return CDbl( GetVitalMaximumValue( mobile, vital_name )) / 100.0;
303: local #1
304: local #0
305: Func(7,2): GetVitalMaximumValue
306: Func(0,2): CDbl
307: 100LF
308: /
309: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 49
function GetNerveProcess( mobile, nerve_name )
310: pop param 'nerve_name'
311: pop param 'mobile'
var nerve_dict := LoadNerves( mobile );
312: decl local #2
313: local #1
314: makelocal
315: jmp userfunc @239
316: :=
317: #
if( nerve_dict.Exists( nerve_name ))
318: local #2
319: local #0
320: Call Method id exists (#55, 1 params)
321: if false goto 330
return GetProcess( CInt( nerve_dict[nerve_name].pid ));
322: local #2
323: local #0
324: [] 1
325: get member id 'pid' (103)
326: Func(0,1): CInt
327: Func(3,1): GetProcess
328: return
329: goto338
return error{"errortext" := "Error::GetNerveProcess() - Invalid nerve name  ["+
330: error
331: "Error::GetNerveProcess() - Invalid nerve name  ["
332: local #0
333: +
334: "]"
335: +
336: addmember-assign(errortext)
337: return
338: 0L
339: return
c:/ZH099/pkg/systems/brainAI/include/npcNerves.inc, Line 44
function SaveNerves( mobile, nerve_dict )
340: pop param 'nerve_dict'
341: pop param 'mobile'
return SetObjProperty( mobile, "#NerveInfo", nerve_dict );
342: local #1
343: "#NerveInfo"
344: local #0
345: Func(2,2): SetObjProperty
346: return
