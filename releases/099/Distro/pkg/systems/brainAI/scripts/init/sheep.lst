c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @130
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\init\sheep.src, Line 14
program BrainNerve( params )
include ":brainAI:npcCommands";
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var gsettings	:= params[2];
64: decl local #2
65: local #0
66: 2L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
NPC_SetupAmmo( npc );
72: local #1
73: makelocal
74: jmp userfunc @224
75: #
NPC_SetupBackPack( npc );
76: local #1
77: makelocal
78: jmp userfunc @292
79: #
NPC_SetupRandomEquipment( npc );
80: local #1
81: 0L
82: 0L
83: makelocal
84: jmp userfunc @472
85: #
NPC_SetupName( npc );
86: local #1
87: 0L
88: makelocal
89: jmp userfunc @330
90: #
NPC_SetupProtections( npc );
91: local #1
92: makelocal
93: jmp userfunc @429
94: #
gsettings["AreaSize"] *= 3;
95: local #2
96: "AreaSize"
97: [] 1
98: 3L
99: *=
100: #
NPC_SetAnchorInfos( npc, gsettings );
101: local #1
102: local #2
103: makelocal
104: jmp userfunc @174
105: #
var poss_graphic := array{0xcf, 0xcf};
106: decl local #3
107: array
108: 207L
109: init{}
110: 207L
111: init{}
112: :=
113: #
npc.graphic := poss_graphic.RandomEntry();
114: local #1
115: local #3
116: Call Method id randomentry (#101, 0 params)
117: set member id 'graphic' (5) #
SetObjProperty( npc, "#Whool", RandomInt(20)+1 );
118: local #1
119: "#Whool"
120: 20L
121: Func(8,2): RandomInt
122: 1L
123: +
124: Func(2,2): SetObjProperty
125: #
return 1;
126: 1L
127: progend
128: leave block(4)
129: progend
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
130: pop param byref 'cfg_file'
131: pop param 'elem_name'
if( !cfg_file )
132: local #0
133: if true goto 137
cfg_file := Classes_GetSettingsCfgFile();
134: makelocal
135: jmp userfunc @158
136: local0 := 
var elem := cfg_file[elem_name];
137: decl local #2
138: local #0
139: local #1
140: [] 1
141: :=
142: #
if( elem.errortext )
143: local #2
144: get member 'errortext'
145: if false goto 156
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
146: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
147: local #1
148: +
149: "] ->"
150: +
151: local #2
152: get member 'errortext'
153: +
154: Func(3,0): SysLog
155: #
return elem;
156: local #2
157: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
158: decl local #0
159: ":classes:settings"
160: Func(5,0): ReadConfigFile
161: :=
162: #
if( cfg.errortext )
163: local #0
164: get member 'errortext'
165: if false goto 172
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
166: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
167: local #0
168: get member 'errortext'
169: +
170: Func(3,0): SysLog
171: #
return cfg;
172: local #0
173: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
174: pop param 'gsettings'
175: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
176: decl local #2
177: local #1
178: "StartingPoint"
179: Func(2,1): GetObjProperty
180: :=
181: #
if( !starting_point )
182: local #2
183: if true goto 208
var location := struct;
184: decl local #0
185: struct
186: :=
187: #
location.+x := npc.x;
188: local #3
189: "x"
190: .+
191: local #1
192: get member id 'x' (0)
193: := #
location.+y := npc.y;
194: local #3
195: "y"
196: .+
197: local #1
198: get member id 'y' (1)
199: := #
starting_point := location;
200: local #3
201: local2 := 
SetObjProperty( npc, "StartingPoint", location );
202: local #1
203: "StartingPoint"
204: local #3
205: Func(2,2): SetObjProperty
206: #
207: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
208: local #1
209: local #2
210: get member id 'x' (0)
211: local #2
212: get member id 'y' (1)
213: local #0
214: "AreaSize"
215: [] 1
216: Func(0,1): CInt
217: 80L
218: 0L
219: makelocal
220: jmp userfunc @825
221: #
return 1;
222: 1L
223: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 55
function NPC_SetupAmmo( mobile )
224: pop param 'mobile'
var npc_elem := NPC_GetNPCConfig( mobile );
225: decl local #1
226: local #0
227: makelocal
228: jmp userfunc @1416
229: :=
230: #
if( npc_elem.MissileWeapon )
231: local #1
232: get member 'MissileWeapon'
233: if false goto 263
var weapon := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, npc_elem.Miss
234: decl local #0
235: local #0
236: get member id 'x' (0)
237: local #0
238: get member id 'y' (1)
239: local #0
240: get member id 'z' (2)
241: local #1
242: get member 'MissileWeapon'
243: 1L
244: local #0
245: get member id 'realm' (112)
246: Func(2,20): CreateItemAtLocation
247: :=
248: #
if( !EquipItem( mobile, weapon ))
249: local #0
250: local #2
251: Func(2,21): EquipItem
252: if true goto 258
DestroyItem( weapon );
253: local #2
254: Func(2,22): DestroyItem
255: #
return weapon;
256: local #2
257: return
weapon.newbie := 1;
258: local #2
259: 1L
260: set member id 'newbie' (25) #
261: leave block(1)
262: goto290
elseif( npc_elem.AmmoType )
263: local #1
264: get member 'AmmoType'
265: if false goto 290
if( CInt( npc_elem.AmmoAmount ) > 0 )
266: local #1
267: get member 'AmmoAmount'
268: Func(0,1): CInt
269: 0L
270: >
271: if false goto 290
var ammo := CreateItemInBackpack( mobile, npc_elem.AmmoType, CInt( npc_elem.Amm
272: decl local #0
273: local #0
274: local #1
275: get member 'AmmoType'
276: local #1
277: get member 'AmmoAmount'
278: Func(0,1): CInt
279: Func(2,26): CreateItemInBackpack
280: :=
281: #
if( !ammo )
282: local #2
283: if true goto 286
return ammo;
284: local #2
285: return
ammo.newbie := 1;
286: local #2
287: 1L
288: set member id 'newbie' (25) #
289: leave block(1)
return 1;
290: 1L
291: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
292: pop param 'mobile'
if( !mobile.backpack )
293: local #0
294: get member id 'backpack' (41)
295: if true goto 327
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
296: decl local #0
297: local #0
298: get member id 'x' (0)
299: local #0
300: get member id 'y' (1)
301: local #0
302: get member id 'z' (2)
303: "BackPack"
304: 1L
305: local #0
306: get member id 'realm' (112)
307: Func(2,20): CreateItemAtLocation
308: :=
309: #
var result := EquipItem( mobile, backpack );
310: decl local #1
311: local #0
312: local #1
313: Func(2,21): EquipItem
314: :=
315: #
if( !result )
316: local #2
317: if true goto 324
DestroyItem( backpack );
318: local #1
319: Func(2,22): DestroyItem
320: #
return result;
321: local #2
322: return
323: goto326
return backpack;
324: local #1
325: return
326: leave block(2)
return mobile.backpack;
327: local #0
328: get member id 'backpack' (41)
329: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 184
function NPC_SetupName( mobile, name_elem:=0 )
330: pop param 'name_elem'
331: pop param 'mobile'
if( !mobile.name["<random>"] )
332: local #1
333: get member id 'name' (3)
334: "<random>"
335: [] 1
336: if true goto 340
return 1;
337: 1L
338: return
339: goto357
elseif( !name_elem )
340: local #0
341: if true goto 357
var npc_elem := NPC_GetNPCConfig( mobile );
342: decl local #0
343: local #1
344: makelocal
345: jmp userfunc @1416
346: :=
347: #
name_elem := npc_elem.NameTemplate;
348: local #2
349: get member 'NameTemplate'
350: local0 := 
if( name_elem.errortext )
351: local #0
352: get member 'errortext'
353: if false goto 356
return name_elem;
354: local #0
355: return
356: leave block(1)
var npc_names := ReadConfigFile( ":brainAI:names" );
357: decl local #2
358: ":brainAI:names"
359: Func(5,0): ReadConfigFile
360: :=
361: #
if( !npc_names[name_elem] )
362: local #2
363: local #0
364: [] 1
365: if true goto 374
return error{"errortext" := "There is no elem ["+name_elem+"] in NAMES.CFG"};
366: error
367: "There is no elem ["
368: local #0
369: +
370: "] in NAMES.CFG"
371: +
372: addmember-assign(errortext)
373: return
var name_list := GetConfigStringArray( npc_names[name_elem], "Name" );
374: decl local #3
375: local #2
376: local #0
377: [] 1
378: "Name"
379: Func(5,2): GetConfigStringArray
380: :=
381: #
if ( name_list.Size() < 1 )
382: local #3
383: Call Method id size (#48, 0 params)
384: 1L
385: <
386: if false goto 395
return error{"errortext":="No names were found in the ["+name_elem+"] elem for 
387: error
388: "No names were found in the ["
389: local #0
390: +
391: "] elem for names.cfg"
392: +
393: addmember-assign(errortext)
394: return
var my_name := mobile.name;
395: decl local #4
396: local #1
397: get member id 'name' (3)
398: :=
399: #
while( my_name["<random>"] )
400: local #4
401: "<random>"
402: [] 1
403: if false goto 423
var replacement := name_list[RandomInt( name_list.Size() )+1];
404: decl local #0
405: local #3
406: local #3
407: Call Method id size (#48, 0 params)
408: Func(8,2): RandomInt
409: 1L
410: +
411: [] 1
412: :=
413: #
my_name["<random>"] := replacement;
414: local #4
415: "<random>"
416: local #5
417: [] := (1) #
SleepMS(2);
418: 2L
419: Func(3,3): Sleepms
420: #
421: leave block(1)
422: goto400
SetName( mobile, my_name );
423: local #1
424: local #4
425: Func(2,14): SetName
426: #
return my_name;
427: local #4
428: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 218
function NPC_SetupProtections( npc )
429: pop param 'npc'
var possibles := GetProtections(),
430: decl local #1
431: makelocal
432: jmp userfunc @888
433: :=
434: #
435: decl local #2
436: local #0
437: makelocal
438: jmp userfunc @875
439: :=
440: #
foreach protection in possibles
441: local #1
442: initforeach @463
var level := GetObjProperty( npc, protection );
443: decl local #0
444: local #0
445: local #3
446: Func(2,1): GetObjProperty
447: :=
448: #
if( level )
449: local #6
450: if false goto 459
protections[protection] := level;
451: local #2
452: local #3
453: local #6
454: [] := (1) #
EraseObjProperty( npc, protection );
455: local #0
456: local #3
457: Func(2,13): EraseObjProperty
458: #
SleepMS(5);
459: 5L
460: Func(3,3): Sleepms
461: #
462: leave block(1)
463: stepforeach @443
464: leave block(3)
SetMobileProtections( npc, protections );
465: local #0
466: local #2
467: makelocal
468: jmp userfunc @818
469: #
return 1;
470: 1L
471: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 82
function NPC_SetupRandomEquipment( mobile, elem_name:=0, flags:=EQUIP_NOGENDER 
472: pop param 'flags'
473: pop param 'elem_name'
474: pop param 'mobile'
if( !elem_name )
475: local #1
476: if true goto 487
var npc_elem := NPC_GetNPCConfig( mobile );
477: decl local #0
478: local #2
479: makelocal
480: jmp userfunc @1416
481: :=
482: #
elem_name := npc_elem.EquipTemplate;
483: local #3
484: get member 'EquipTemplate'
485: local1 := 
486: leave block(1)
var index_cfg := ReadConfigFile( ":equipment:equipIndex" );
487: decl local #3
488: ":equipment:equipIndex"
489: Func(5,0): ReadConfigFile
490: :=
491: #
if( index_cfg.errortext )
492: local #3
493: get member 'errortext'
494: if false goto 502
return error{"errortext":="Could not open equipIndex.cfg -> "+index_cfg.errorte
495: error
496: "Could not open equipIndex.cfg -> "
497: local #3
498: get member 'errortext'
499: +
500: addmember-assign(errortext)
501: return
var group_cfg := ReadConfigFile( ":equipment:equipGroups" );
502: decl local #4
503: ":equipment:equipGroups"
504: Func(5,0): ReadConfigFile
505: :=
506: #
if( group_cfg.errortext )
507: local #4
508: get member 'errortext'
509: if false goto 517
return error{"errortext":="Could not open equipGroups.cfg -> "+group_cfg.errort
510: error
511: "Could not open equipGroups.cfg -> "
512: local #4
513: get member 'errortext'
514: +
515: addmember-assign(errortext)
516: return
var index_elem := index_cfg[elem_Name];
517: decl local #5
518: local #3
519: local #1
520: [] 1
521: :=
522: #
if( !index_elem )
523: local #5
524: if true goto 533
return error{"errortext":="equipIndex.cfg elem ["+index_elem+"] does not exist.
525: error
526: "equipIndex.cfg elem ["
527: local #5
528: +
529: "] does not exist."
530: +
531: addmember-assign(errortext)
532: return
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipGroup" ))
533: local #5
534: "EquipGroup"
535: Func(5,3): GetConfigStringDictionary
536: initforeach @690
SleepMS(5);
537: 5L
538: Func(3,3): Sleepms
539: #
if( RandomDiceRoll( "1d100+1" ) <= CInt( entry ))
540: "1d100+1"
541: Func(8,0): RandomDiceRoll
542: local #6
543: Func(0,1): CInt
544: <=
545: if false goto 690
var group_elem := group_cfg[CStr( _entry_iter )];
546: decl local #0
547: local #4
548: local #8
549: Func(0,4): CStr
550: [] 1
551: :=
552: #
if( !group_elem )
553: local #9
554: if true goto 568
PrintTextAbove( mobile, "equipGroups.cfg elem ["+_entry_iter+"] does not exist.
555: local #2
556: "equipGroups.cfg elem ["
557: local #8
558: +
559: "] does not exist."
560: +
561: 3L
562: 1000L
563: 0L
564: Func(2,5): PrintTextAbove
565: #
continue;
566: leave block(1)
567: goto690
var item_list := array{};
568: decl local #1
569: array
570: :=
571: #
if( !flags )
572: local #0
573: if true goto 588
var temp := GetConfigStringArray( group_elem, "Item" );
574: decl local #0
575: local #9
576: "Item"
577: Func(5,2): GetConfigStringArray
578: :=
579: #
if( temp )
580: local #11
581: if false goto 586
item_list += temp;
582: local #10
583: local #11
584: +=
585: #
586: leave block(1)
587: goto623
elseif( flags & EQUIP_MALE )
588: local #0
589: 1L
590: &
591: if false goto 606
var temp := GetConfigStringArray( group_elem, "Male" );
592: decl local #0
593: local #9
594: "Male"
595: Func(5,2): GetConfigStringArray
596: :=
597: #
if( temp )
598: local #11
599: if false goto 604
item_list += temp;
600: local #10
601: local #11
602: +=
603: #
604: leave block(1)
605: goto623
elseif( flags & EQUIP_FEMALE )
606: local #0
607: 2L
608: &
609: if false goto 623
var temp := GetConfigStringArray( group_elem, "Female" );
610: decl local #0
611: local #9
612: "Female"
613: Func(5,2): GetConfigStringArray
614: :=
615: #
if( temp )
616: local #11
617: if false goto 622
item_list += temp;
618: local #10
619: local #11
620: +=
621: #
622: leave block(1)
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, item_list.Rando
623: decl local #2
624: local #2
625: get member id 'x' (0)
626: local #2
627: get member id 'y' (1)
628: local #2
629: get member id 'z' (2)
630: local #10
631: Call Method id randomentry (#101, 0 params)
632: 1L
633: local #2
634: get member id 'realm' (112)
635: Func(2,20): CreateItemAtLocation
636: :=
637: #
if( item.errortext )
638: local #11
639: get member 'errortext'
640: if false goto 658
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
641: local #2
642: "Error could not create <"
643: local #8
644: +
645: "> -->"
646: +
647: local #11
648: get member 'errortext'
649: +
650: 3L
651: 1000L
652: 0L
653: Func(2,5): PrintTextAbove
654: #
continue;
655: leave block(3)
656: goto690
657: goto679
elseif( !EquipItem( mobile, item ))
658: local #2
659: local #11
660: Func(2,21): EquipItem
661: if true goto 679
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
662: local #2
663: "Unable to equip - "
664: local #11
665: get member id 'desc' (19)
666: +
667: " - destroying."
668: +
669: 3L
670: 1000L
671: 0L
672: Func(2,5): PrintTextAbove
673: #
DestroyItem( item );
674: local #11
675: Func(2,22): DestroyItem
676: #
continue;
677: leave block(3)
678: goto690
SetObjProperty( item, "NoLoot", 1 );
679: local #11
680: "NoLoot"
681: 1L
682: Func(2,2): SetObjProperty
683: #
IDItem( mobile, item );
684: local #2
685: local #11
686: makelocal
687: jmp userfunc @926
688: #
689: leave block(3)
690: stepforeach @537
691: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipItem" ))
692: local #5
693: "EquipItem"
694: Func(5,3): GetConfigStringDictionary
695: initforeach @769
SleepMS(5);
696: 5L
697: Func(3,3): Sleepms
698: #
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, _entry_iter, 1,
699: decl local #0
700: local #2
701: get member id 'x' (0)
702: local #2
703: get member id 'y' (1)
704: local #2
705: get member id 'z' (2)
706: local #8
707: 1L
708: local #2
709: get member id 'realm' (112)
710: Func(2,20): CreateItemAtLocation
711: :=
712: #
if( item.errortext )
713: local #9
714: get member 'errortext'
715: if false goto 733
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
716: local #2
717: "Error could not create <"
718: local #8
719: +
720: "> -->"
721: +
722: local #9
723: get member 'errortext'
724: +
725: 3L
726: 1000L
727: 0L
728: Func(2,5): PrintTextAbove
729: #
continue;
730: leave block(1)
731: goto769
732: goto754
elseif( !EquipItem( mobile, item ))
733: local #2
734: local #9
735: Func(2,21): EquipItem
736: if true goto 754
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
737: local #2
738: "Unable to equip - "
739: local #9
740: get member id 'desc' (19)
741: +
742: " - destroying."
743: +
744: 3L
745: 1000L
746: 0L
747: Func(2,5): PrintTextAbove
748: #
DestroyItem( item );
749: local #9
750: Func(2,22): DestroyItem
751: #
continue;
752: leave block(1)
753: goto769
item.color := CInt( entry );
754: local #9
755: local #6
756: Func(0,1): CInt
757: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
758: local #9
759: "NoLoot"
760: 1L
761: Func(2,2): SetObjProperty
762: #
IDItem( mobile, item );
763: local #2
764: local #9
765: makelocal
766: jmp userfunc @926
767: #
768: leave block(1)
769: stepforeach @696
770: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipMount" ))
771: local #5
772: "EquipMount"
773: Func(5,3): GetConfigStringDictionary
774: initforeach @814
SleepMS(5);
775: 5L
776: Func(3,3): Sleepms
777: #
var item := MP_Mount( mobile, _entry_iter );
778: decl local #0
779: local #2
780: local #8
781: makelocal
782: jmp userfunc @1038
783: :=
784: #
if( item.errortext )
785: local #9
786: get member 'errortext'
787: if false goto 804
PrintTextAbove( mobile, "Error could not mount <"+_entry_iter+"> -->"+item.erro
788: local #2
789: "Error could not mount <"
790: local #8
791: +
792: "> -->"
793: +
794: local #9
795: get member 'errortext'
796: +
797: 3L
798: 1000L
799: 0L
800: Func(2,5): PrintTextAbove
801: #
continue;
802: leave block(1)
803: goto814
item.color := CInt( entry );
804: local #9
805: local #6
806: Func(0,1): CInt
807: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
808: local #9
809: "NoLoot"
810: 1L
811: Func(2,2): SetObjProperty
812: #
813: leave block(1)
814: stepforeach @775
815: leave block(3)
return 1;
816: 1L
817: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 49
function SetMobileProtections( mobile, protections )
818: pop param 'protections'
819: pop param 'mobile'
return SetObjProperty( mobile, "Protections", protections );
820: local #1
821: "Protections"
822: local #0
823: Func(2,2): SetObjProperty
824: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
825: pop param 'no_wake'
826: pop param 'percent_subtract'
827: pop param 'distance_start'
828: pop param 'y'
829: pop param 'x'
830: pop param 'npc'
var ev		:= struct;
831: decl local #6
832: struct
833: :=
834: #
ev.+type	:= NPCEVENT_ANCHOR;
835: local #6
836: "type"
837: .+
838: 10485781L
839: := #
ev.+x		:= x;
840: local #6
841: "x"
842: .+
843: local #4
844: := #
ev.+y		:= y;
845: local #6
846: "y"
847: .+
848: local #3
849: := #
ev.+distance	:= distance_start;
850: local #6
851: "distance"
852: .+
853: local #2
854: := #
ev.+percent	:= percent_subtract;
855: local #6
856: "percent"
857: .+
858: local #1
859: := #
ev.+WakeUp	:= no_wake;
860: local #6
861: "WakeUp"
862: .+
863: local #0
864: := #
ev.+process	:= GetProcess( GetPid() );
865: local #6
866: "process"
867: .+
868: Func(3,2): GetPid
869: Func(3,1): GetProcess
870: := #
return SendEvent( npc, ev );
871: local #5
872: local #6
873: Func(2,17): SendEvent
874: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 32
function GetObjProtections( mobile )
875: pop param 'mobile'
var protections := GetObjProperty( mobile, "Protections" );
876: decl local #1
877: local #0
878: "Protections"
879: Func(2,1): GetObjProperty
880: :=
881: #
if( !protections )
882: local #1
883: if true goto 886
protections := struct;
884: struct
885: local1 := 
return protections;
886: local #1
887: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 12
function GetProtections()
var protections := array{   "AirProtection",
888: decl local #0
889: array
890: "AirProtection"
891: init{}
892: "EarthProtection"
893: init{}
894: "FireProtection"
895: init{}
896: "WaterProtection"
897: init{}
898: "HolyProtection"
899: init{}
900: "NecroProtection"
901: init{}
902: "PoisonProtection"
903: init{}
904: "PermPoisonProtection"
905: init{}
906: "MagicProtection"
907: init{}
908: "PermMagicProtection"
909: init{}
910: "PhysicalProtection"
911: init{}
912: "SpellReflection"
913: init{}
914: "PermSpellReflection"
915: init{}
916: "FreeAction"
917: init{}
918: "HealingIncrease"
919: init{}
920: "AcidProtection"
921: init{}
922: :=
923: #
return protections;
924: local #0
925: return
c:/ZH099/pkg/skills/mage/itemid/include/itemID.inc, Line 16
function IDItem( mobile, item )
926: pop param 'item'
927: pop param 'mobile'
var charges := GetObjProperty( item, "Charges" ),
928: decl local #2
929: local #0
930: "Charges"
931: Func(2,1): GetObjProperty
932: :=
933: #
934: decl local #3
935: local #0
936: "ChanceOfEffect"
937: Func(2,1): GetObjProperty
938: :=
939: #
940: decl local #4
941: local #0
942: "PoisonLevel"
943: Func(2,1): GetObjProperty
944: :=
945: #
if( GetObjProperty( item, "UnIDedMagicalItem" ) ||
946: local #0
947: "UnIDedMagicalItem"
948: Func(2,1): GetObjProperty
949: local #0
950: "IsGMItem"
951: Func(2,1): GetObjProperty
952: ||
953: local #0
954: "EnchantColor"
955: Func(2,1): GetObjProperty
956: ||
957: if false goto 962
NameByEnchant( item );
958: local #0
959: makelocal
960: jmp userfunc @1151
961: #
if( item.container.IsA( POLCLASS_CORPSE ) && GetObjProperty( item.container, "n
962: local #0
963: get member id 'container' (15)
964: 7L
965: Call Method id isa (#0, 1 params)
966: local #0
967: get member id 'container' (15)
968: "npctemplate"
969: Func(2,1): GetObjProperty
970: &&
971: if false goto 981
PrintTextAbove( item.container, item.desc );
972: local #0
973: get member id 'container' (15)
974: local #0
975: get member id 'desc' (19)
976: 3L
977: 1000L
978: 0L
979: Func(2,5): PrintTextAbove
980: #
SendSysMessage( mobile, "It appears to be "+item.desc+"." );
981: local #1
982: "It appears to be "
983: local #0
984: get member id 'desc' (19)
985: +
986: "."
987: +
988: 3L
989: 1000L
990: Func(2,4): SendSysMessage
991: #
if( charges )
992: local #2
993: if false goto 1005
SendSysMessage( mobile, "There is "+charges+" charges left." );
994: local #1
995: "There is "
996: local #2
997: +
998: " charges left."
999: +
1000: 3L
1001: 1000L
1002: Func(2,4): SendSysMessage
1003: #
1004: goto1030
elseif( chance_effect )
1005: local #3
1006: if false goto 1018
SendSysMessage( mobile, "It has "+chance_effect+"% chances of effects," );
1007: local #1
1008: "It has "
1009: local #3
1010: +
1011: "% chances of effects,"
1012: +
1013: 3L
1014: 1000L
1015: Func(2,4): SendSysMessage
1016: #
1017: goto1030
elseif( poison_lvl )
1018: local #4
1019: if false goto 1030
SendSysMessage( mobile, "Cursed with poison level "+poison_lvl+"." );
1020: local #1
1021: "Cursed with poison level "
1022: local #4
1023: +
1024: "."
1025: +
1026: 3L
1027: 1000L
1028: Func(2,4): SendSysMessage
1029: #
SetObjProperty( item, "IDed", mobile.serial );
1030: local #0
1031: "IDed"
1032: local #1
1033: get member id 'serial' (6)
1034: Func(2,2): SetObjProperty
1035: #
return 1;
1036: 1L
1037: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 98
function MP_Mount( mobile, npc )
1038: pop param 'npc'
1039: pop param 'mobile'
mobile.graphic := 400 + mobile.gender;
1040: local #1
1041: 400L
1042: local #1
1043: get member id 'gender' (28)
1044: +
1045: set member id 'graphic' (5) #
var mount_piece := MP_GetMount( mobile );
1046: decl local #2
1047: local #1
1048: makelocal
1049: jmp userfunc @2147
1050: :=
1051: #
if( mount_piece )
1052: local #2
1053: if false goto 1058
return error{"errortext":="Mobile is already mounted."};
1054: error
1055: "Mobile is already mounted."
1056: addmember-assign(errortext)
1057: return
var mount_graphic := MP_GetMountGraphic( npc );
1058: decl local #3
1059: local #0
1060: makelocal
1061: jmp userfunc @2164
1062: :=
1063: #
if( !mount_graphic )
1064: local #3
1065: if true goto 1068
return mount_graphic;
1066: local #3
1067: return
mount_piece := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "MountPiece"
1068: local #1
1069: get member id 'x' (0)
1070: local #1
1071: get member id 'y' (1)
1072: local #1
1073: get member id 'z' (2)
1074: "MountPiece"
1075: 1L
1076: "britannia"
1077: Func(2,20): CreateItemAtLocation
1078: local2 := 
mount_piece.graphic := mount_graphic;
1079: local #2
1080: local #3
1081: set member id 'graphic' (5) #
mount_piece.color := npc.color;
1082: local #2
1083: local #0
1084: get member id 'color' (7)
1085: set member id 'color' (7) #
SetName( mount_piece, npc.name );
1086: local #2
1087: local #0
1088: get member id 'name' (3)
1089: Func(2,14): SetName
1090: #
SetObjProperty( mount_piece, "serial", npc.serial );
1091: local #2
1092: "serial"
1093: local #0
1094: get member id 'serial' (6)
1095: Func(2,2): SetObjProperty
1096: #
SetObjProperty( mount_piece, "color", npc.color );
1097: local #2
1098: "color"
1099: local #0
1100: get member id 'color' (7)
1101: Func(2,2): SetObjProperty
1102: #
var result := EquipItem( mobile, mount_piece );
1103: decl local #4
1104: local #1
1105: local #2
1106: Func(2,21): EquipItem
1107: :=
1108: #
if( !result )
1109: local #4
1110: if true goto 1117
DestroyItem( mount_piece );
1111: local #2
1112: Func(2,22): DestroyItem
1113: #
return result;
1114: local #4
1115: return
1116: goto1120
mount_piece.movable := 0;
1117: local #2
1118: 0L
1119: set member id 'movable' (20) #
mobile.facing := npc.facing;
1120: local #1
1121: local #0
1122: get member id 'facing' (9)
1123: set member id 'facing' (9) #
MoveObjectToLocation( npc, 5140, 1773, 0, "britannia", MOVEOBJECT_FORCELOCATION
1124: local #0
1125: 5140L
1126: 1773L
1127: 0L
1128: "britannia"
1129: 1073741824L
1130: Func(2,23): MoveObjectToLocation
1131: #
SetObjProperty( npc, "mounted", 1 );
1132: local #0
1133: "mounted"
1134: 1L
1135: Func(2,2): SetObjProperty
1136: #
SetObjProperty( npc, "MustSleep", mobile.serial );
1137: local #0
1138: "MustSleep"
1139: local #1
1140: get member id 'serial' (6)
1141: Func(2,2): SetObjProperty
1142: #
npc.hidden := 1;
1143: local #0
1144: 1L
1145: set member id 'hidden' (32) #
npc.frozen := 1;
1146: local #0
1147: 1L
1148: set member id 'frozen' (34) #
return mount_piece;
1149: local #2
1150: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 21
function NameByEnchant( item )
1151: pop param 'item'
EraseObjProperty( item, "UnIDedMagicalItem" );
1152: local #0
1153: "UnIDedMagicalItem"
1154: Func(2,13): EraseObjProperty
1155: #
var base_name := GetObjProperty( item, "BaseName" );
1156: decl local #1
1157: local #0
1158: "BaseName"
1159: Func(2,1): GetObjProperty
1160: :=
1161: #
if( !base_name )
1162: local #1
1163: if true goto 1183
var item_cfg := ReadConfigFile( ":*:itemdesc" ),
1164: decl local #0
1165: ":*:itemdesc"
1166: Func(5,0): ReadConfigFile
1167: :=
1168: #
1169: decl local #1
1170: local #2
1171: local #0
1172: get member id 'objtype' (4)
1173: [] 1
1174: get member id 'desc' (19)
1175: :=
1176: #
SetName( item, item_name );
1177: local #0
1178: local #3
1179: Func(2,14): SetName
1180: #
1181: leave block(2)
1182: goto1187
SetName( item, base_name );
1183: local #0
1184: local #1
1185: Func(2,14): SetName
1186: #
var enchanted_name := GetObjProperty( item, "Enchanted" );;
1187: decl local #2
1188: local #0
1189: "Enchanted"
1190: Func(2,1): GetObjProperty
1191: :=
1192: #
if( enchanted_name )
1193: local #2
1194: if false goto 1204
SetName( item, enchanted_name+" "+item.desc );
1195: local #0
1196: local #2
1197: " "
1198: +
1199: local #0
1200: get member id 'desc' (19)
1201: +
1202: Func(2,14): SetName
1203: #
var enchanted_color := GetObjProperty( item, "EnchantColor" );
1204: decl local #3
1205: local #0
1206: "EnchantColor"
1207: Func(2,1): GetObjProperty
1208: :=
1209: #
if( enchanted_color )
1210: local #3
1211: if false goto 1219
item.color := enchanted_color;
1212: local #0
1213: local #3
1214: set member id 'color' (7) #
EraseObjProperty( item, "EnchantColor" );
1215: local #0
1216: "EnchantColor"
1217: Func(2,13): EraseObjProperty
1218: #
var isGMItem := GetObjProperty( item, "IsGMItem" );
1219: decl local #4
1220: local #0
1221: "IsGMItem"
1222: Func(2,1): GetObjProperty
1223: :=
1224: #
if( isGMItem )
1225: local #4
1226: if false goto 1233
SetName( item, isGMItem );
1227: local #0
1228: local #4
1229: Func(2,14): SetName
1230: #
return 1;
1231: 1L
1232: return
var hitScript := GetObjProperty( item, "HitScriptNumber" );
1233: decl local #5
1234: local #0
1235: "HitScriptNumber"
1236: Func(2,1): GetObjProperty
1237: :=
1238: #
if( hitScript )
1239: local #5
1240: if false goto 1246
RenameByHitscript( item, hitScript );
1241: local #0
1242: local #5
1243: makelocal
1244: jmp userfunc @1575
1245: #
var onHitScript := GetObjProperty( item, "OnHitScriptNumber" );
1246: decl local #6
1247: local #0
1248: "OnHitScriptNumber"
1249: Func(2,1): GetObjProperty
1250: :=
1251: #
if( onHitScript )
1252: local #6
1253: if false goto 1259
RenameByOnHitscript( item, onHitScript );
1254: local #0
1255: local #6
1256: makelocal
1257: jmp userfunc @1700
1258: #
var dmg_mode := item.dmg_mod;
1259: decl local #7
1260: local #0
1261: get member id 'dmg_mod' (91)
1262: :=
1263: #
if( dmg_mode )
1264: local #7
1265: if false goto 1272
RenameByMod( item, "Damage", dmg_mode );
1266: local #0
1267: "Damage"
1268: local #7
1269: makelocal
1270: jmp userfunc @1661
1271: #
var ar_mode := item.ar_mod;
1272: decl local #8
1273: local #0
1274: get member id 'ar_mod' (31)
1275: :=
1276: #
if( ar_mode )
1277: local #8
1278: if false goto 1285
RenameByMod( item, "Ar", ar_mode );
1279: local #0
1280: "Ar"
1281: local #8
1282: makelocal
1283: jmp userfunc @1661
1284: #
var ar_bonus := GetObjProperty( item, "ArBonus" );
1285: decl local #9
1286: local #0
1287: "ArBonus"
1288: Func(2,1): GetObjProperty
1289: :=
1290: #
if( ar_bonus )
1291: local #9
1292: if false goto 1302
RenameByMod( item, "ArBonus", CInt( ar_bonus * 5 ));
1293: local #0
1294: "ArBonus"
1295: local #9
1296: 5L
1297: *
1298: Func(0,1): CInt
1299: makelocal
1300: jmp userfunc @1661
1301: #
var hp_mode := item.maxhp_mod;
1302: decl local #10
1303: local #0
1304: get member id 'maxhp_mod' (89)
1305: :=
1306: #
if( hp_mode )
1307: local #10
1308: if false goto 1318
RenameByMod( item, "MaxHP", CInt( hp_mode / 2 ));
1309: local #0
1310: "MaxHP"
1311: local #10
1312: 2L
1313: /
1314: Func(0,1): CInt
1315: makelocal
1316: jmp userfunc @1661
1317: #
var skill_mod := GetEquipmentModifiers( item );
1318: decl local #11
1319: local #0
1320: 4L
1321: makelocal
1322: jmp userfunc @2042
1323: :=
1324: #
if( skill_mod.Size() )
1325: local #11
1326: Call Method id size (#48, 0 params)
1327: if false goto 1349
var skill_keys := skill_mod.Keys();
1328: decl local #0
1329: local #11
1330: Call Method id keys (#56, 0 params)
1331: :=
1332: #
foreach modifier in skill_keys
1333: local #12
1334: initforeach @1346
RenameByAttriMod( item, modifier, skill_mod[modifier] );
1335: local #0
1336: local #13
1337: local #11
1338: local #13
1339: [] 1
1340: makelocal
1341: jmp userfunc @1535
1342: #
SleepMS(5);
1343: 5L
1344: Func(3,3): Sleepms
1345: #
1346: stepforeach @1335
1347: leave block(3)
1348: leave block(1)
foreach protection in immunities
1349: global #2
1350: initforeach @1369
var mobile_prot := GetObjProperty( item, protection );
1351: decl local #0
1352: local #0
1353: local #12
1354: Func(2,1): GetObjProperty
1355: :=
1356: #
if( mobile_prot )
1357: local #15
1358: if false goto 1365
RenameByImmunity( item, protection, mobile_prot );
1359: local #0
1360: local #12
1361: local #15
1362: makelocal
1363: jmp userfunc @1636
1364: #
SleepMS(5);
1365: 5L
1366: Func(3,3): Sleepms
1367: #
1368: leave block(1)
1369: stepforeach @1351
1370: leave block(3)
foreach prot in wardings
1371: global #3
1372: initforeach @1390
var charges := GetObjProperty( item, prot );
1373: decl local #0
1374: local #0
1375: local #12
1376: Func(2,1): GetObjProperty
1377: :=
1378: #
if( charges )
1379: local #15
1380: if false goto 1386
RenameByWardings( item, prot );
1381: local #0
1382: local #12
1383: makelocal
1384: jmp userfunc @1761
1385: #
SleepMS(5);
1386: 5L
1387: Func(3,3): Sleepms
1388: #
1389: leave block(1)
1390: stepforeach @1373
1391: leave block(3)
foreach mod in regenerations
1392: global #4
1393: initforeach @1412
var mobile_mod := GetObjProperty( item, mod );
1394: decl local #0
1395: local #0
1396: local #12
1397: Func(2,1): GetObjProperty
1398: :=
1399: #
if( mobile_mod )
1400: local #15
1401: if false goto 1408
RenameByImmunity( item, mod, mobile_mod );
1402: local #0
1403: local #12
1404: local #15
1405: makelocal
1406: jmp userfunc @1636
1407: #
SleepMS(5);
1408: 5L
1409: Func(3,3): Sleepms
1410: #
1411: leave block(1)
1412: stepforeach @1394
1413: leave block(3)
return 1;
1414: 1L
1415: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1416: pop param 'template'
if( !template.package )
1417: local #0
1418: get member 'package'
1419: if true goto 1424
template := NPC_ParseTemplateName( template );
1420: local #0
1421: makelocal
1422: jmp userfunc @1473
1423: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1424: decl local #1
1425: ":"
1426: local #0
1427: get member 'package'
1428: +
1429: ":npcdesc"
1430: +
1431: Func(5,0): ReadConfigFile
1432: :=
1433: #
if( npc_cfg.errortext )
1434: local #1
1435: get member 'errortext'
1436: if false goto 1449
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1437: error
1438: "Error::NPC_GetNPCConfig() - Could not open :"
1439: local #0
1440: get member 'package'
1441: +
1442: ":npcdesc ->"
1443: +
1444: local #1
1445: get member 'errortext'
1446: +
1447: addmember-assign(errortext)
1448: return
var cfg_elem := npc_cfg[template.template];
1449: decl local #2
1450: local #1
1451: local #0
1452: get member 'template'
1453: [] 1
1454: :=
1455: #
if( cfg_elem.errortext )
1456: local #2
1457: get member 'errortext'
1458: if false goto 1471
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1459: error
1460: "Error::NPC_GetNPCConfig() - Could not find elem ["
1461: local #0
1462: get member 'template'
1463: +
1464: "] ->"
1465: +
1466: local #2
1467: get member 'errortext'
1468: +
1469: addmember-assign(errortext)
1470: return
return cfg_elem;
1471: local #2
1472: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1473: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1474: local #0
1475: 4L
1476: Call Method id isa (#0, 1 params)
1477: if false goto 1481
template_name := template_name.npctemplate;
1478: local #0
1479: get member id 'npctemplate' (62)
1480: local0 := 
var colon_a := Find( template_name, ":", 1 );
1481: decl local #1
1482: local #0
1483: ":"
1484: 1L
1485: Func(0,8): Find
1486: :=
1487: #
var colon_b := Find( template_name, ":", 2 );
1488: decl local #2
1489: local #0
1490: ":"
1491: 2L
1492: Func(0,8): Find
1493: :=
1494: #
var parsed := struct{"package", "template"};
1495: decl local #3
1496: struct
1497: addmember(package)
1498: addmember(template)
1499: :=
1500: #
if( !colon_a || !colon_b )
1501: local #1
1502: !
1503: local #2
1504: !
1505: ||
1506: if false goto 1514
parsed.package := "";
1507: local #3
1508: ""
1509: set member 'package' #
parsed.template := template_name;
1510: local #3
1511: local #0
1512: set member 'template' #
1513: goto1533
parsed.package := template_name[colon_a+1, colon_b-2];
1514: local #3
1515: local #0
1516: local #1
1517: 1L
1518: +
1519: local #2
1520: 2L
1521: -
1522: [,]
1523: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1524: local #3
1525: local #0
1526: local #2
1527: 1L
1528: +
1529: local #0
1530: Func(0,3): Len
1531: [,]
1532: set member 'template' #
return parsed;
1533: local #3
1534: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 175
function RenameByAttriMod( item, attribute, value )
1535: pop param 'value'
1536: pop param 'attribute'
1537: pop param 'item'
if( !value )
1538: local #0
1539: if true goto 1542
return 0;
1540: 0L
1541: return
if( attribute in AP_ListAttributesByType( "Stat" ))
1542: local #1
1543: "Stat"
1544: makelocal
1545: jmp userfunc @1968
1546: in
1547: if false goto 1553
value := CInt( value / 5 );
1548: local #0
1549: 5L
1550: /
1551: Func(0,1): CInt
1552: local0 := 
var mod_elem := GetEnchantmentElem( item, attribute );
1553: decl local #3
1554: local #2
1555: local #1
1556: makelocal
1557: jmp userfunc @1993
1558: :=
1559: #
var name := CStr ( "Name"+value );
1560: decl local #4
1561: "Name"
1562: local #0
1563: +
1564: Func(0,4): CStr
1565: :=
1566: #
SetAdjective( item, mod_elem, name );
1567: local #2
1568: local #3
1569: local #4
1570: makelocal
1571: jmp userfunc @1778
1572: #
return 1;
1573: 1L
1574: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 118
function RenameByHitscript( item, hitScript )
1575: pop param 'hitScript'
1576: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_hit" );
1577: decl local #2
1578: ":loot:effects_hit"
1579: Func(5,0): ReadConfigFile
1580: :=
1581: #
if( enchantment_cfg.errortext )
1582: local #2
1583: get member 'errortext'
1584: if false goto 1597
PrintTextAbove( item, "Error reading config <:loot:effects_hit> -->"+enchantmen
1585: local #1
1586: "Error reading config <:loot:effects_hit> -->"
1587: local #2
1588: get member 'errortext'
1589: +
1590: 3L
1591: 1000L
1592: 0L
1593: Func(2,5): PrintTextAbove
1594: #
return 0;
1595: 0L
1596: return
var chant_elem := FindConfigElem( enchantment_cfg, hitScript );
1597: decl local #3
1598: local #2
1599: local #0
1600: Func(5,5): FindConfigElem
1601: :=
1602: #
if( chant_elem.errortext )
1603: local #3
1604: get member 'errortext'
1605: if false goto 1622
PrintTextAbove( item, "Error reading chant_elem <"+hitScript+"> -->"+chant_elem
1606: local #1
1607: "Error reading chant_elem <"
1608: local #0
1609: +
1610: "> -->"
1611: +
1612: local #3
1613: get member 'errortext'
1614: +
1615: 3L
1616: 1000L
1617: 0L
1618: Func(2,5): PrintTextAbove
1619: #
return 0;
1620: 0L
1621: return
SetAdjective( item, chant_elem, "Name" );
1622: local #1
1623: local #3
1624: "Name"
1625: makelocal
1626: jmp userfunc @1778
1627: #
SetObjProperty( item, "HitScript", chant_elem.HitScript );
1628: local #1
1629: "HitScript"
1630: local #3
1631: get member id 'hitscript' (94)
1632: Func(2,2): SetObjProperty
1633: #
return 1;
1634: 1L
1635: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 210
function RenameByImmunity( item, immunity, power )
1636: pop param 'power'
1637: pop param 'immunity'
1638: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1639: decl local #3
1640: local #2
1641: local #1
1642: makelocal
1643: jmp userfunc @1993
1644: :=
1645: #
var name := CStr( "Name"+power );
1646: decl local #4
1647: "Name"
1648: local #0
1649: +
1650: Func(0,4): CStr
1651: :=
1652: #
SetAdjective( item, immunity_elem, name );
1653: local #2
1654: local #3
1655: local #4
1656: makelocal
1657: jmp userfunc @1778
1658: #
return 1;
1659: 1L
1660: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 193
function RenameByMod( item, mod, value )
1661: pop param 'value'
1662: pop param 'mod'
1663: pop param 'item'
if( !value )
1664: local #0
1665: if true goto 1668
return 0;
1666: 0L
1667: return
var mod_elem := GetEnchantmentElem( item, mod );
1668: decl local #3
1669: local #2
1670: local #1
1671: makelocal
1672: jmp userfunc @1993
1673: :=
1674: #
var temp := CInt( value / 5 );
1675: decl local #4
1676: local #0
1677: 5L
1678: /
1679: Func(0,1): CInt
1680: :=
1681: #
if( temp )
1682: local #4
1683: if false goto 1698
var name := CStr( "Name"+temp );
1684: decl local #0
1685: "Name"
1686: local #4
1687: +
1688: Func(0,4): CStr
1689: :=
1690: #
SetAdjective( item, mod_elem, name );
1691: local #2
1692: local #3
1693: local #5
1694: makelocal
1695: jmp userfunc @1778
1696: #
1697: leave block(1)
return 1;
1698: 1L
1699: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 138
function RenameByOnHitscript( item, onHitScript )
1700: pop param 'onHitScript'
1701: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_onhit" );
1702: decl local #2
1703: ":loot:effects_onhit"
1704: Func(5,0): ReadConfigFile
1705: :=
1706: #
if( enchantment_cfg.errortext )
1707: local #2
1708: get member 'errortext'
1709: if false goto 1722
PrintTextAbove( item, "Error reading config <:loot:effects_onhit> -->"+enchantm
1710: local #1
1711: "Error reading config <:loot:effects_onhit> -->"
1712: local #2
1713: get member 'errortext'
1714: +
1715: 3L
1716: 1000L
1717: 0L
1718: Func(2,5): PrintTextAbove
1719: #
return 0;
1720: 0L
1721: return
var chant_elem := FindConfigElem( enchantment_cfg, onHitScript );
1722: decl local #3
1723: local #2
1724: local #0
1725: Func(5,5): FindConfigElem
1726: :=
1727: #
if( chant_elem.errortext )
1728: local #3
1729: get member 'errortext'
1730: if false goto 1747
PrintTextAbove( item, "Error reading chant_elem <"+onHitScript+"> -->"+chant_el
1731: local #1
1732: "Error reading chant_elem <"
1733: local #0
1734: +
1735: "> -->"
1736: +
1737: local #3
1738: get member 'errortext'
1739: +
1740: 3L
1741: 1000L
1742: 0L
1743: Func(2,5): PrintTextAbove
1744: #
return 0;
1745: 0L
1746: return
SetAdjective( item, chant_elem, "Name" );
1747: local #1
1748: local #3
1749: "Name"
1750: makelocal
1751: jmp userfunc @1778
1752: #
SetObjProperty( item, "OnHitScript", chant_elem.OnHitScript );
1753: local #1
1754: "OnHitScript"
1755: local #3
1756: get member id 'onhitscript' (96)
1757: Func(2,2): SetObjProperty
1758: #
return 1;
1759: 1L
1760: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 220
function RenameByWardings( item, immunity )
1761: pop param 'immunity'
1762: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1763: decl local #2
1764: local #1
1765: local #0
1766: makelocal
1767: jmp userfunc @1993
1768: :=
1769: #
SetAdjective( item, immunity_elem, "Name" );
1770: local #1
1771: local #2
1772: "Name"
1773: makelocal
1774: jmp userfunc @1778
1775: #
return 1;
1776: 1L
1777: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 229
function SetAdjective( item, elem, value )
1778: pop param 'value'
1779: pop param 'elem'
1780: pop param 'item'
var colorkey := "Color";
1781: decl local #3
1782: "Color"
1783: :=
1784: #
if( GetObjProperty( item, "Cursed" ))
1785: local #2
1786: "Cursed"
1787: Func(2,1): GetObjProperty
1788: if false goto 1797
value := "C"+value;
1789: "C"
1790: local #0
1791: +
1792: local0 := 
colorkey := "C"+colorkey;
1793: "C"
1794: local #3
1795: +
1796: local3 := 
var position := GetConfigString( elem, "Place" );
1797: decl local #4
1798: local #1
1799: "Place"
1800: Func(5,6): GetConfigString
1801: :=
1802: #
if( position.errortext )
1803: local #4
1804: get member 'errortext'
1805: if false goto 1818
PrintTextAbove( item, "Error reading position <Place> -->"+position.errortext )
1806: local #2
1807: "Error reading position <Place> -->"
1808: local #4
1809: get member 'errortext'
1810: +
1811: 3L
1812: 1000L
1813: 0L
1814: Func(2,5): PrintTextAbove
1815: #
return 0;
1816: 0L
1817: return
var adjective := GetConfigString( elem, value );
1818: decl local #5
1819: local #1
1820: local #0
1821: Func(5,6): GetConfigString
1822: :=
1823: #
if( adjective.errortext )
1824: local #5
1825: get member 'errortext'
1826: if false goto 1843
PrintTextAbove( item, "Error reading adjective <"+value+"> -->"+adjective.error
1827: local #2
1828: "Error reading adjective <"
1829: local #0
1830: +
1831: "> -->"
1832: +
1833: local #5
1834: get member 'errortext'
1835: +
1836: 3L
1837: 1000L
1838: 0L
1839: Func(2,5): PrintTextAbove
1840: #
return 0;
1841: 0L
1842: return
if( position == "Prefix" )
1843: local #4
1844: "Prefix"
1845: ==
1846: if false goto 1860
SetName( item, Lower( adjective+" "+TruncateArticle( item.desc )));
1847: local #2
1848: local #5
1849: " "
1850: +
1851: local #2
1852: get member id 'desc' (19)
1853: makelocal
1854: jmp userfunc @1897
1855: +
1856: Func(0,0): Lower
1857: Func(2,14): SetName
1858: #
1859: goto1872
SetName( item, Lower( TruncateArticle( item.desc )+" "+adjective ));
1860: local #2
1861: local #2
1862: get member id 'desc' (19)
1863: makelocal
1864: jmp userfunc @1897
1865: " "
1866: +
1867: local #5
1868: +
1869: Func(0,0): Lower
1870: Func(2,14): SetName
1871: #
SetName( item, AddArticle( item.desc ));
1872: local #2
1873: local #2
1874: get member id 'desc' (19)
1875: makelocal
1876: jmp userfunc @1935
1877: Func(2,14): SetName
1878: #
var color_elem := GetConfigString( elem, colorkey );
1879: decl local #6
1880: local #1
1881: local #3
1882: Func(5,6): GetConfigString
1883: :=
1884: #
var color_item := CInt( color_elem );
1885: decl local #7
1886: local #6
1887: Func(0,1): CInt
1888: :=
1889: #
if( color_item )
1890: local #7
1891: if false goto 1895
item.color := color_item;
1892: local #2
1893: local #7
1894: set member id 'color' (7) #
return 1;
1895: 1L
1896: return
c:/ZH099/scripts/include/string.inc, Line 22
function TruncateArticle( text )
1897: pop param 'text'
text := CStr(text);
1898: local #0
1899: Func(0,4): CStr
1900: local0 := 
var i := Len(text);
1901: decl local #1
1902: local #0
1903: Func(0,3): Len
1904: :=
1905: #
if ( Lower(text[1, 2]) == "a " )
1906: local #0
1907: 1L
1908: 2L
1909: [,]
1910: Func(0,0): Lower
1911: "a "
1912: ==
1913: if false goto 1920
text := text[3, i];
1914: local #0
1915: 3L
1916: local #1
1917: [,]
1918: local0 := 
1919: goto1933
elseif ( Lower(text[1, 3]) == "an " )
1920: local #0
1921: 1L
1922: 3L
1923: [,]
1924: Func(0,0): Lower
1925: "an "
1926: ==
1927: if false goto 1933
text := text[4, i];
1928: local #0
1929: 4L
1930: local #1
1931: [,]
1932: local0 := 
return text;
1933: local #0
1934: return
c:/ZH099/scripts/include/string.inc, Line 35
function AddArticle( text )
1935: pop param 'text'
var vowels := array{"a", "e", "i", "o", "u"};
1936: decl local #1
1937: array
1938: "a"
1939: init{}
1940: "e"
1941: init{}
1942: "i"
1943: init{}
1944: "o"
1945: init{}
1946: "u"
1947: init{}
1948: :=
1949: #
if ( Lower(text[1]) in vowels )
1950: local #0
1951: 1L
1952: [] 1
1953: Func(0,0): Lower
1954: local #1
1955: in
1956: if false goto 1962
text := "an "+text;
1957: "an "
1958: local #0
1959: +
1960: local0 := 
1961: goto1966
text := "a "+text;
1962: "a "
1963: local #0
1964: +
1965: local0 := 
return text;
1966: local #0
1967: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 69
function AP_ListAttributesByType( type:="" )
1968: pop param 'type'
if( !type )
1969: local #0
1970: if true goto 1980
var cfg_file := ReadConfigFile( ":attributes:attributes" );
1971: decl local #0
1972: ":attributes:attributes"
1973: Func(5,0): ReadConfigFile
1974: :=
1975: #
return GetConfigStringKeys( cfg_file );
1976: local #1
1977: Func(5,4): GetConfigStringKeys
1978: return
1979: leave block(1)
type := Lower( type );
1980: local #0
1981: Func(0,0): Lower
1982: local0 := 
var data_elem := AP_GetAttributeDataElem( "Categories" );
1983: decl local #1
1984: "Categories"
1985: makelocal
1986: jmp userfunc @2252
1987: :=
1988: #
return data_elem.GetProp( type );
1989: local #1
1990: local #0
1991: Call Method id getprop (#35, 1 params)
1992: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 158
function GetEnchantmentElem( item, elem )
1993: pop param 'elem'
1994: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:enchant_desc" );
1995: decl local #2
1996: ":loot:enchant_desc"
1997: Func(5,0): ReadConfigFile
1998: :=
1999: #
if( enchantment_cfg.errortext )
2000: local #2
2001: get member 'errortext'
2002: if false goto 2015
PrintTextAbove( item, "Error reading config <:loot:enchant_desc> -->"+enchantme
2003: local #1
2004: "Error reading config <:loot:enchant_desc> -->"
2005: local #2
2006: get member 'errortext'
2007: +
2008: 3L
2009: 1000L
2010: 0L
2011: Func(2,5): PrintTextAbove
2012: #
return 0;
2013: 0L
2014: return
var chant_elem := FindConfigElem( enchantment_cfg, elem );
2015: decl local #3
2016: local #2
2017: local #0
2018: Func(5,5): FindConfigElem
2019: :=
2020: #
if( chant_elem.errortext )
2021: local #3
2022: get member 'errortext'
2023: if false goto 2040
PrintTextAbove( item, "Error reading chant_elem <"+elem+"> -->"+chant_elem.erro
2024: local #1
2025: "Error reading chant_elem <"
2026: local #0
2027: +
2028: "> -->"
2029: +
2030: local #3
2031: get member 'errortext'
2032: +
2033: 3L
2034: 1000L
2035: 0L
2036: Func(2,5): PrintTextAbove
2037: #
return 0;
2038: 0L
2039: return
return chant_elem;
2040: local #3
2041: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 81
function GetEquipmentModifiers( item, flags:=EQUIP_CSTM_OR_ITEMDESC )
2042: pop param 'flags'
2043: pop param 'item'
var cstm_mods;
2044: decl local #2
2045: #
if( flags & EQUIP_CUSTOM_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2046: local #0
2047: 2L
2048: &
2049: local #0
2050: 4L
2051: &
2052: ||
2053: if false goto 2072
cstm_mods := GetObjProperty( item, "AttribMods" );
2054: local #1
2055: "AttribMods"
2056: Func(2,1): GetObjProperty
2057: local2 := 
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
2058: local #2
2059: Func(0,6): TypeOf
2060: Func(0,0): Lower
2061: "dictionary"
2062: <>
2063: if false goto 2066
cstm_mods := dictionary;
2064: dictionary
2065: local2 := 
if( flags & EQUIP_CSTM_OR_ITEMDESC )
2066: local #0
2067: 4L
2068: &
2069: if false goto 2072
return cstm_mods;
2070: local #2
2071: return
var itemdesc_mods := dictionary;
2072: decl local #3
2073: dictionary
2074: :=
2075: #
if( flags & EQUIP_ITEMDESC_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2076: local #0
2077: 1L
2078: &
2079: local #0
2080: 4L
2081: &
2082: ||
2083: if false goto 2119
var item_cfg := ReadConfigFile( ":*:itemdesc" );
2084: decl local #0
2085: ":*:itemdesc"
2086: Func(5,0): ReadConfigFile
2087: :=
2088: #
item_cfg := item_cfg[item.objtype];
2089: local #4
2090: local #1
2091: get member id 'objtype' (4)
2092: [] 1
2093: local4 := 
var modifier := Abs( item_cfg.DefaultDex ),
2094: decl local #1
2095: local #4
2096: get member 'DefaultDex'
2097: Func(9,0): Abs
2098: :=
2099: #
2100: decl local #2
2101: local #1
2102: "DefaultDex"
2103: Func(2,1): GetObjProperty
2104: Func(0,1): CInt
2105: :=
2106: #
if( cust_modifier )
2107: local #6
2108: if false goto 2113
modifier := modifier - cust_modifier;
2109: local #5
2110: local #6
2111: -
2112: local5 := 
itemdesc_mods["dexterity"] := -modifier;
2113: local #3
2114: "dexterity"
2115: local #5
2116: unary -
2117: [] := (1) #
2118: leave block(3)
if( flags & EQUIP_BOTH_MODS )
2119: local #0
2120: 3L
2121: &
2122: if false goto 2135
foreach modifier in ( cstm_mods )
2123: local #2
2124: initforeach @2133
itemdesc_mods.Insert( _modifier_iter, modifier );
2125: local #3
2126: local #6
2127: local #4
2128: Call Method id insert (#50, 2 params)
2129: #
SleepMS(2);
2130: 2L
2131: Func(3,3): Sleepms
2132: #
2133: stepforeach @2125
2134: leave block(3)
if( itemdesc_mods.Size() > 0 )
2135: local #3
2136: Call Method id size (#48, 0 params)
2137: 0L
2138: >
2139: if false goto 2143
return itemdesc_mods;
2140: local #3
2141: return
2142: goto2145
return cstm_mods;
2143: local #2
2144: return
2145: 0L
2146: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 224
function MP_GetMount( mobile )
2147: pop param 'mobile'
var mount_piece := GetEquipmentByLayer( mobile, LAYER_MOUNT );
2148: decl local #1
2149: local #0
2150: 25L
2151: Func(2,12): GetEquipmentByLayer
2152: :=
2153: #
if( mount_piece.errortext )
2154: local #1
2155: get member 'errortext'
2156: if false goto 2162
return error{"errortext":=mount_piece.errortext};
2157: error
2158: local #1
2159: get member 'errortext'
2160: addmember-assign(errortext)
2161: return
return 1;
2162: 1L
2163: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 40
function MP_GetMountGraphic( mobile )
2164: pop param 'mobile'
var mobile_graphic;
2165: decl local #1
2166: #
if( mobile.IsA( POLCLASS_NPC ))
2167: local #0
2168: 4L
2169: Call Method id isa (#0, 1 params)
2170: if false goto 2176
mobile_graphic := Hex( mobile.graphic );
2171: local #0
2172: get member id 'graphic' (5)
2173: Func(0,5): Hex
2174: local1 := 
2175: goto2180
mobile_graphic := Hex( CInt( mobile ));
2176: local #0
2177: Func(0,1): CInt
2178: Func(0,5): Hex
2179: local1 := 
var elem := MP_GetMountsCfgElem( "MobileToMount" );
2180: decl local #2
2181: "MobileToMount"
2182: 0L
2183: makelocal
2184: jmp userfunc @2208
2185: :=
2186: #
var tile_graphic := GetConfigInt( elem, mobile_graphic );
2187: decl local #3
2188: local #2
2189: local #1
2190: Func(5,7): GetConfigInt
2191: :=
2192: #
if( tile_graphic )
2193: local #3
2194: if false goto 2198
return tile_graphic;
2195: local #3
2196: return
2197: goto2206
return error{"errortext":="Error::MP_GetMountGraphic() - No mount tile graphic 
2198: error
2199: "Error::MP_GetMountGraphic() - No mount tile graphic matches mobile graphic '"
2200: local #1
2201: +
2202: "'"
2203: +
2204: addmember-assign(errortext)
2205: return
2206: 0L
2207: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 26
function MP_GetMountsCfgElem( elem_name, byref cfg_file:=0 )
2208: pop param byref 'cfg_file'
2209: pop param 'elem_name'
if( !cfg_file )
2210: local #0
2211: if true goto 2215
cfg_file := MP_GetMountsCfgFile();
2212: makelocal
2213: jmp userfunc @2236
2214: local0 := 
var elem := cfg_file[elem_name];
2215: decl local #2
2216: local #0
2217: local #1
2218: [] 1
2219: :=
2220: #
if( elem.errortext )
2221: local #2
2222: get member 'errortext'
2223: if false goto 2234
SysLog( "Error::MP_GetMountsCfgElem() - Unable to find elem ["+elem_name+"] ->"
2224: "Error::MP_GetMountsCfgElem() - Unable to find elem ["
2225: local #1
2226: +
2227: "] ->"
2228: +
2229: local #2
2230: get member 'errortext'
2231: +
2232: Func(3,0): SysLog
2233: #
return elem;
2234: local #2
2235: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 18
function MP_GetMountsCfgFile()
var cfg := ReadConfigFile( ":mounts:mounts" );
2236: decl local #0
2237: ":mounts:mounts"
2238: Func(5,0): ReadConfigFile
2239: :=
2240: #
if( cfg.errortext )
2241: local #0
2242: get member 'errortext'
2243: if false goto 2250
SysLog( "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2244: "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2245: local #0
2246: get member 'errortext'
2247: +
2248: Func(3,0): SysLog
2249: #
return cfg;
2250: local #0
2251: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 57
function AP_GetAttributeDataElem( elem_name )
2252: pop param 'elem_name'
var data_file := AP_GetAttributesDataFile();
2253: decl local #1
2254: makelocal
2255: jmp userfunc @2281
2256: :=
2257: #
var data_elem := DFFindElement( data_file, elem_name, DF_CREATE );
2258: decl local #2
2259: local #1
2260: local #0
2261: 1L
2262: makelocal
2263: jmp userfunc @2300
2264: :=
2265: #
if( data_elem.errortext )
2266: local #2
2267: get member 'errortext'
2268: if false goto 2279
SysLog( "Error::AP_GetAttributeDataElem() - unable to find elem ["+elem_name+"]
2269: "Error::AP_GetAttributeDataElem() - unable to find elem ["
2270: local #0
2271: +
2272: "] ->"
2273: +
2274: local #2
2275: get member 'errortext'
2276: +
2277: Func(3,0): SysLog
2278: #
return data_elem;
2279: local #2
2280: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 49
function AP_GetAttributesDataFile()
var data_file := DFOpenDataFile( ":attributes:attributes", DF_CREATE );
2281: decl local #0
2282: ":attributes:attributes"
2283: 1L
2284: 0L
2285: makelocal
2286: jmp userfunc @2362
2287: :=
2288: #
if( data_file.errortext )
2289: local #0
2290: get member 'errortext'
2291: if false goto 2298
SysLog( "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"+
2292: "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"
2293: local #0
2294: get member 'errortext'
2295: +
2296: Func(3,0): SysLog
2297: #
return data_file;
2298: local #0
2299: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
2300: pop param 'create'
2301: pop param 'elem_name'
2302: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
2303: decl local #3
2304: local #2
2305: local #1
2306: Func(0,4): CStr
2307: Call Method id findelement (#72, 1 params)
2308: :=
2309: #
if ( !temp && create )
2310: local #3
2311: !
2312: local #0
2313: &&
2314: if false goto 2332
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
2315: "Debug::DFFindElement() - Creating elem: "
2316: local #1
2317: Func(0,4): CStr
2318: +
2319: makelocal
2320: jmp userfunc @2418
2321: #
file_ref.CreateElement(CStr(elem_name));
2322: local #2
2323: local #1
2324: Func(0,4): CStr
2325: Call Method id createelement (#71, 1 params)
2326: #
temp := file_ref.FindElement(CStr(elem_name));
2327: local #2
2328: local #1
2329: Func(0,4): CStr
2330: Call Method id findelement (#72, 1 params)
2331: local3 := 
if ( temp )
2332: local #3
2333: if false goto 2337
return temp;
2334: local #3
2335: return
2336: goto2360
elseif (create)
2337: local #0
2338: if false goto 2360
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
2339: decl local #0
2340: error
2341: "Error::DFFindElement() - Could not open data elem ["
2342: local #1
2343: +
2344: "] - "
2345: +
2346: local #3
2347: get member 'errortext'
2348: +
2349: addmember-assign(errortext)
2350: :=
2351: #
DF_OutPut(errmsg.errortext);
2352: local #4
2353: get member 'errortext'
2354: makelocal
2355: jmp userfunc @2418
2356: #
return errmsg;
2357: local #4
2358: return
2359: leave block(1)
2360: 0L
2361: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
2362: pop param 'flags'
2363: pop param 'create'
2364: pop param 'file_name'
var data_file := OpenDataFile(file_name);
2365: decl local #3
2366: local #2
2367: Func(11,0): OpenDataFile
2368: :=
2369: #
if ( (!data_file) && (create) )
2370: local #3
2371: !
2372: local #1
2373: &&
2374: if false goto 2388
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
2375: "Debug::DFOpenDataFile() - Creating data file: "
2376: local #2
2377: +
2378: makelocal
2379: jmp userfunc @2418
2380: #
CreateDataFile(file_name, flags);
2381: local #2
2382: local #0
2383: Func(11,1): CreateDataFile
2384: #
data_file := OpenDataFile(file_name);
2385: local #2
2386: Func(11,0): OpenDataFile
2387: local3 := 
if ( data_file )
2388: local #3
2389: if false goto 2393
return data_file;
2390: local #3
2391: return
2392: goto2416
elseif ( create )
2393: local #1
2394: if false goto 2416
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
2395: decl local #0
2396: error
2397: "Error::DFOpenDataFile() - Could not open "
2398: local #2
2399: +
2400: " : "
2401: +
2402: local #3
2403: get member 'errortext'
2404: +
2405: addmember-assign(errortext)
2406: :=
2407: #
DF_OutPut(errmsg.errortext);
2408: local #4
2409: get member 'errortext'
2410: makelocal
2411: jmp userfunc @2418
2412: #
return errmsg;
2413: local #4
2414: return
2415: leave block(1)
2416: 0L
2417: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
2418: pop param 'text'
if ( DF_DEBUG_MODE )
2419: global #1
2420: if false goto 2439
var script_name := GetProcess(GetPid()).name;
2421: decl local #0
2422: Func(3,2): GetPid
2423: Func(3,1): GetProcess
2424: get member id 'name' (3)
2425: :=
2426: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
2427: "::log/dataFile.log"
2428: "["
2429: local #1
2430: +
2431: "]: "
2432: +
2433: local #0
2434: +
2435: 1L
2436: Func(10,0): LogToFile
2437: #
2438: leave block(1)
return 1;
2439: 1L
2440: return
