c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @205
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
c:/ZH099/pkg/items/containers/include/storageAreas.inc, Line 35
var container_type	:= "BankBox";
57: decl global #5
58: "BankBox"
59: :=
60: #
var STORAGE_DEBUG	:= 1;
61: decl global #6
62: 1L
63: :=
64: #
C:\ZH099\pkg\systems\brainAI\scripts\init\genericHuman.src, Line 18
program BrainCriticalScript( params )
const CPM_HOLDING	:= "Merchant-Holding";
65: get arg 'params'
var npc		:= params[1];
66: decl local #1
67: local #0
68: 1L
69: [] 1
70: :=
71: #
var gsettings	:= params[2];
72: decl local #2
73: local #0
74: 2L
75: [] 1
76: :=
77: #
params := 0; // Not needed anymore.
78: 0L
79: local0 := 
npc.color := 1056 - RandomInt(55); // 1002-1056
80: local #1
81: 1056L
82: 55L
83: Func(7,2): RandomInt
84: -
85: set member id 'color' (7) #
npc.truecolor := npc.color;
86: local #1
87: local #1
88: get member id 'color' (7)
89: set member id 'truecolor' (30) #
NPC_SetupName( npc );
90: local #1
91: 0L
92: makelocal
93: jmp userfunc @299
94: #
NPC_SetupRandomEquipment( npc );
95: local #1
96: 0L
97: 0L
98: makelocal
99: jmp userfunc @398
100: #
gsettings["AreaSize"] *= 3;
101: local #2
102: "AreaSize"
103: [] 1
104: 3L
105: *=
106: #
NPC_SetAnchorInfos( npc, gsettings );
107: local #1
108: local #2
109: makelocal
110: jmp userfunc @249
111: #
foreach item in ( ListEquippedItems( npc ))
112: local #1
113: Func(2,11): ListEquippedItems
114: initforeach @126
if( CanDye( item ))
115: local #3
116: makelocal
117: jmp userfunc @174
118: if false goto 123
item.color := RandomDyeColor();
119: local #3
120: makelocal
121: jmp userfunc @744
122: set member id 'color' (7) #
SleepMS(2);
123: 2L
124: Func(3,3): Sleepms
125: #
126: stepforeach @115
127: leave block(3)
var hiding := AP_GetSkill( npc, HIDING );
128: decl local #3
129: local #1
130: "Hiding"
131: makelocal
132: jmp userfunc @144
133: :=
134: #
if( hiding )
135: local #3
136: if false goto 140
npc.hidden := 1;
137: local #1
138: 1L
139: set member id 'hidden' (32) #
return 1;
140: 1L
141: progend
142: leave block(4)
143: progend
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
144: pop param 'skill_name'
145: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
146: local #1
147: local #0
148: makelocal
149: jmp userfunc @165
150: local #1
151: local #0
152: makelocal
153: jmp userfunc @156
154: +
155: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
156: pop param 'skill_name'
157: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
158: local #1
159: local #0
160: Func(6,1): GetAttributeTemporaryMod
161: Func(0,2): CDbl
162: 10LF
163: /
164: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
165: pop param 'skill_name'
166: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
167: local #1
168: local #0
169: Func(6,0): GetAttributeBaseValue
170: Func(0,2): CDbl
171: 10LF
172: /
173: return
c:/ZH099/pkg/items/dyes/include/dyes.inc, Line 15
function CanDye( item )
174: pop param 'item'
var config := ReadConfigFile( ":*:itemdesc" );
175: decl local #1
176: ":*:itemdesc"
177: Func(4,0): ReadConfigFile
178: :=
179: #
config := config[item.objtype];
180: local #1
181: local #0
182: get member id 'objtype' (4)
183: [] 1
184: local1 := 
if( GetObjProperty( item, "Undyeable" ))
185: local #0
186: "Undyeable"
187: Func(2,1): GetObjProperty
188: if false goto 192
return 0;
189: 0L
190: return
191: goto203
elseif( config.CanDye )
192: local #1
193: get member 'CanDye'
194: if false goto 198
return 1;
195: 1L
196: return
197: goto203
elseif( config.dyeable )
198: local #1
199: get member 'dyeable'
200: if false goto 203
return 1;
201: 1L
202: return
return 0;
203: 0L
204: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
205: pop param byref 'cfg_file'
206: pop param 'elem_name'
if( !cfg_file )
207: local #0
208: if true goto 212
cfg_file := Classes_GetSettingsCfgFile();
209: makelocal
210: jmp userfunc @233
211: local0 := 
var elem := cfg_file[elem_name];
212: decl local #2
213: local #0
214: local #1
215: [] 1
216: :=
217: #
if( elem.errortext )
218: local #2
219: get member 'errortext'
220: if false goto 231
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
221: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
222: local #1
223: +
224: "] ->"
225: +
226: local #2
227: get member 'errortext'
228: +
229: Func(3,0): SysLog
230: #
return elem;
231: local #2
232: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
233: decl local #0
234: ":classes:settings"
235: Func(4,0): ReadConfigFile
236: :=
237: #
if( cfg.errortext )
238: local #0
239: get member 'errortext'
240: if false goto 247
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
241: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
242: local #0
243: get member 'errortext'
244: +
245: Func(3,0): SysLog
246: #
return cfg;
247: local #0
248: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
249: pop param 'gsettings'
250: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
251: decl local #2
252: local #1
253: "StartingPoint"
254: Func(2,1): GetObjProperty
255: :=
256: #
if( !starting_point )
257: local #2
258: if true goto 283
var location := struct;
259: decl local #0
260: struct
261: :=
262: #
location.+x := npc.x;
263: local #3
264: "x"
265: .+
266: local #1
267: get member id 'x' (0)
268: := #
location.+y := npc.y;
269: local #3
270: "y"
271: .+
272: local #1
273: get member id 'y' (1)
274: := #
starting_point := location;
275: local #3
276: local2 := 
SetObjProperty( npc, "StartingPoint", location );
277: local #1
278: "StartingPoint"
279: local #3
280: Func(2,2): SetObjProperty
281: #
282: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
283: local #1
284: local #2
285: get member id 'x' (0)
286: local #2
287: get member id 'y' (1)
288: local #0
289: "AreaSize"
290: [] 1
291: Func(0,1): CInt
292: 80L
293: 0L
294: makelocal
295: jmp userfunc @789
296: #
return 1;
297: 1L
298: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 184
function NPC_SetupName( mobile, name_elem:=0 )
299: pop param 'name_elem'
300: pop param 'mobile'
if( !mobile.name["<random>"] )
301: local #1
302: get member id 'name' (3)
303: "<random>"
304: [] 1
305: if true goto 309
return 1;
306: 1L
307: return
308: goto326
elseif( !name_elem )
309: local #0
310: if true goto 326
var npc_elem := NPC_GetNPCConfig( mobile );
311: decl local #0
312: local #1
313: makelocal
314: jmp userfunc @1329
315: :=
316: #
name_elem := npc_elem.NameTemplate;
317: local #2
318: get member 'NameTemplate'
319: local0 := 
if( name_elem.errortext )
320: local #0
321: get member 'errortext'
322: if false goto 325
return name_elem;
323: local #0
324: return
325: leave block(1)
var npc_names := ReadConfigFile( ":brainAI:names" );
326: decl local #2
327: ":brainAI:names"
328: Func(4,0): ReadConfigFile
329: :=
330: #
if( !npc_names[name_elem] )
331: local #2
332: local #0
333: [] 1
334: if true goto 343
return error{"errortext" := "There is no elem ["+name_elem+"] in NAMES.CFG"};
335: error
336: "There is no elem ["
337: local #0
338: +
339: "] in NAMES.CFG"
340: +
341: addmember-assign(errortext)
342: return
var name_list := GetConfigStringArray( npc_names[name_elem], "Name" );
343: decl local #3
344: local #2
345: local #0
346: [] 1
347: "Name"
348: Func(4,2): GetConfigStringArray
349: :=
350: #
if ( name_list.Size() < 1 )
351: local #3
352: Call Method id size (#48, 0 params)
353: 1L
354: <
355: if false goto 364
return error{"errortext":="No names were found in the ["+name_elem+"] elem for 
356: error
357: "No names were found in the ["
358: local #0
359: +
360: "] elem for names.cfg"
361: +
362: addmember-assign(errortext)
363: return
var my_name := mobile.name;
364: decl local #4
365: local #1
366: get member id 'name' (3)
367: :=
368: #
while( my_name["<random>"] )
369: local #4
370: "<random>"
371: [] 1
372: if false goto 392
var replacement := name_list[RandomInt( name_list.Size() )+1];
373: decl local #0
374: local #3
375: local #3
376: Call Method id size (#48, 0 params)
377: Func(7,2): RandomInt
378: 1L
379: +
380: [] 1
381: :=
382: #
my_name["<random>"] := replacement;
383: local #4
384: "<random>"
385: local #5
386: [] := (1) #
SleepMS(2);
387: 2L
388: Func(3,3): Sleepms
389: #
390: leave block(1)
391: goto369
SetName( mobile, my_name );
392: local #1
393: local #4
394: Func(2,14): SetName
395: #
return my_name;
396: local #4
397: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 82
function NPC_SetupRandomEquipment( mobile, elem_name:=0, flags:=EQUIP_NOGENDER 
398: pop param 'flags'
399: pop param 'elem_name'
400: pop param 'mobile'
if( !elem_name )
401: local #1
402: if true goto 413
var npc_elem := NPC_GetNPCConfig( mobile );
403: decl local #0
404: local #2
405: makelocal
406: jmp userfunc @1329
407: :=
408: #
elem_name := npc_elem.EquipTemplate;
409: local #3
410: get member 'EquipTemplate'
411: local1 := 
412: leave block(1)
var index_cfg := ReadConfigFile( ":equipment:equipIndex" );
413: decl local #3
414: ":equipment:equipIndex"
415: Func(4,0): ReadConfigFile
416: :=
417: #
if( index_cfg.errortext )
418: local #3
419: get member 'errortext'
420: if false goto 428
return error{"errortext":="Could not open equipIndex.cfg -> "+index_cfg.errorte
421: error
422: "Could not open equipIndex.cfg -> "
423: local #3
424: get member 'errortext'
425: +
426: addmember-assign(errortext)
427: return
var group_cfg := ReadConfigFile( ":equipment:equipGroups" );
428: decl local #4
429: ":equipment:equipGroups"
430: Func(4,0): ReadConfigFile
431: :=
432: #
if( group_cfg.errortext )
433: local #4
434: get member 'errortext'
435: if false goto 443
return error{"errortext":="Could not open equipGroups.cfg -> "+group_cfg.errort
436: error
437: "Could not open equipGroups.cfg -> "
438: local #4
439: get member 'errortext'
440: +
441: addmember-assign(errortext)
442: return
var index_elem := index_cfg[elem_Name];
443: decl local #5
444: local #3
445: local #1
446: [] 1
447: :=
448: #
if( !index_elem )
449: local #5
450: if true goto 459
return error{"errortext":="equipIndex.cfg elem ["+index_elem+"] does not exist.
451: error
452: "equipIndex.cfg elem ["
453: local #5
454: +
455: "] does not exist."
456: +
457: addmember-assign(errortext)
458: return
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipGroup" ))
459: local #5
460: "EquipGroup"
461: Func(4,3): GetConfigStringDictionary
462: initforeach @616
SleepMS(5);
463: 5L
464: Func(3,3): Sleepms
465: #
if( RandomDiceRoll( "1d100+1" ) <= CInt( entry ))
466: "1d100+1"
467: Func(7,0): RandomDiceRoll
468: local #6
469: Func(0,1): CInt
470: <=
471: if false goto 616
var group_elem := group_cfg[CStr( _entry_iter )];
472: decl local #0
473: local #4
474: local #8
475: Func(0,4): CStr
476: [] 1
477: :=
478: #
if( !group_elem )
479: local #9
480: if true goto 494
PrintTextAbove( mobile, "equipGroups.cfg elem ["+_entry_iter+"] does not exist.
481: local #2
482: "equipGroups.cfg elem ["
483: local #8
484: +
485: "] does not exist."
486: +
487: 3L
488: 1000L
489: 0L
490: Func(2,5): PrintTextAbove
491: #
continue;
492: leave block(1)
493: goto616
var item_list := array{};
494: decl local #1
495: array
496: :=
497: #
if( !flags )
498: local #0
499: if true goto 514
var temp := GetConfigStringArray( group_elem, "Item" );
500: decl local #0
501: local #9
502: "Item"
503: Func(4,2): GetConfigStringArray
504: :=
505: #
if( temp )
506: local #11
507: if false goto 512
item_list += temp;
508: local #10
509: local #11
510: +=
511: #
512: leave block(1)
513: goto549
elseif( flags & EQUIP_MALE )
514: local #0
515: 1L
516: &
517: if false goto 532
var temp := GetConfigStringArray( group_elem, "Male" );
518: decl local #0
519: local #9
520: "Male"
521: Func(4,2): GetConfigStringArray
522: :=
523: #
if( temp )
524: local #11
525: if false goto 530
item_list += temp;
526: local #10
527: local #11
528: +=
529: #
530: leave block(1)
531: goto549
elseif( flags & EQUIP_FEMALE )
532: local #0
533: 2L
534: &
535: if false goto 549
var temp := GetConfigStringArray( group_elem, "Female" );
536: decl local #0
537: local #9
538: "Female"
539: Func(4,2): GetConfigStringArray
540: :=
541: #
if( temp )
542: local #11
543: if false goto 548
item_list += temp;
544: local #10
545: local #11
546: +=
547: #
548: leave block(1)
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, item_list.Rando
549: decl local #2
550: local #2
551: get member id 'x' (0)
552: local #2
553: get member id 'y' (1)
554: local #2
555: get member id 'z' (2)
556: local #10
557: Call Method id randomentry (#101, 0 params)
558: 1L
559: local #2
560: get member id 'realm' (112)
561: Func(2,20): CreateItemAtLocation
562: :=
563: #
if( item.errortext )
564: local #11
565: get member 'errortext'
566: if false goto 584
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
567: local #2
568: "Error could not create <"
569: local #8
570: +
571: "> -->"
572: +
573: local #11
574: get member 'errortext'
575: +
576: 3L
577: 1000L
578: 0L
579: Func(2,5): PrintTextAbove
580: #
continue;
581: leave block(3)
582: goto616
583: goto605
elseif( !EquipItem( mobile, item ))
584: local #2
585: local #11
586: Func(2,21): EquipItem
587: if true goto 605
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
588: local #2
589: "Unable to equip - "
590: local #11
591: get member id 'desc' (19)
592: +
593: " - destroying."
594: +
595: 3L
596: 1000L
597: 0L
598: Func(2,5): PrintTextAbove
599: #
DestroyItem( item );
600: local #11
601: Func(2,22): DestroyItem
602: #
continue;
603: leave block(3)
604: goto616
SetObjProperty( item, "NoLoot", 1 );
605: local #11
606: "NoLoot"
607: 1L
608: Func(2,2): SetObjProperty
609: #
IDItem( mobile, item );
610: local #2
611: local #11
612: makelocal
613: jmp userfunc @839
614: #
615: leave block(3)
616: stepforeach @463
617: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipItem" ))
618: local #5
619: "EquipItem"
620: Func(4,3): GetConfigStringDictionary
621: initforeach @695
SleepMS(5);
622: 5L
623: Func(3,3): Sleepms
624: #
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, _entry_iter, 1,
625: decl local #0
626: local #2
627: get member id 'x' (0)
628: local #2
629: get member id 'y' (1)
630: local #2
631: get member id 'z' (2)
632: local #8
633: 1L
634: local #2
635: get member id 'realm' (112)
636: Func(2,20): CreateItemAtLocation
637: :=
638: #
if( item.errortext )
639: local #9
640: get member 'errortext'
641: if false goto 659
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
642: local #2
643: "Error could not create <"
644: local #8
645: +
646: "> -->"
647: +
648: local #9
649: get member 'errortext'
650: +
651: 3L
652: 1000L
653: 0L
654: Func(2,5): PrintTextAbove
655: #
continue;
656: leave block(1)
657: goto695
658: goto680
elseif( !EquipItem( mobile, item ))
659: local #2
660: local #9
661: Func(2,21): EquipItem
662: if true goto 680
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
663: local #2
664: "Unable to equip - "
665: local #9
666: get member id 'desc' (19)
667: +
668: " - destroying."
669: +
670: 3L
671: 1000L
672: 0L
673: Func(2,5): PrintTextAbove
674: #
DestroyItem( item );
675: local #9
676: Func(2,22): DestroyItem
677: #
continue;
678: leave block(1)
679: goto695
item.color := CInt( entry );
680: local #9
681: local #6
682: Func(0,1): CInt
683: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
684: local #9
685: "NoLoot"
686: 1L
687: Func(2,2): SetObjProperty
688: #
IDItem( mobile, item );
689: local #2
690: local #9
691: makelocal
692: jmp userfunc @839
693: #
694: leave block(1)
695: stepforeach @622
696: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipMount" ))
697: local #5
698: "EquipMount"
699: Func(4,3): GetConfigStringDictionary
700: initforeach @740
SleepMS(5);
701: 5L
702: Func(3,3): Sleepms
703: #
var item := MP_Mount( mobile, _entry_iter );
704: decl local #0
705: local #2
706: local #8
707: makelocal
708: jmp userfunc @951
709: :=
710: #
if( item.errortext )
711: local #9
712: get member 'errortext'
713: if false goto 730
PrintTextAbove( mobile, "Error could not mount <"+_entry_iter+"> -->"+item.erro
714: local #2
715: "Error could not mount <"
716: local #8
717: +
718: "> -->"
719: +
720: local #9
721: get member 'errortext'
722: +
723: 3L
724: 1000L
725: 0L
726: Func(2,5): PrintTextAbove
727: #
continue;
728: leave block(1)
729: goto740
item.color := CInt( entry );
730: local #9
731: local #6
732: Func(0,1): CInt
733: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
734: local #9
735: "NoLoot"
736: 1L
737: Func(2,2): SetObjProperty
738: #
739: leave block(1)
740: stepforeach @701
741: leave block(3)
return 1;
742: 1L
743: return
c:/ZH099/pkg/items/dyes/include/dyes.inc, Line 44
function RandomDyeColor()
return RandomIntRange( MIN_COLOR, MAX_COLOR );
744: 2L
745: 1001L
746: makelocal
747: jmp userfunc @749
748: return
c:/ZH099/scripts/include/util_extend.inc, Line 18
function RandomIntRange(min_val:=0, max_val:=1)
749: pop param 'max_val'
750: pop param 'min_val'
if ( min_val < 0 || max_val < 0 )
751: local #1
752: 0L
753: <
754: local #0
755: 0L
756: <
757: ||
758: if false goto 764
return error{"errortext":="Values must be >= 0"};
759: error
760: "Values must be >= 0"
761: addmember-assign(errortext)
762: return
763: goto772
elseif ( max_val <= min_val )
764: local #0
765: local #1
766: <=
767: if false goto 772
return error{"errortext":="Min is not < max."};
768: error
769: "Min is not < max."
770: addmember-assign(errortext)
771: return
var difference := CInt(max_val) - CInt(min_val);
772: decl local #2
773: local #0
774: Func(0,1): CInt
775: local #1
776: Func(0,1): CInt
777: -
778: :=
779: #
var random := RandomInt(difference);
780: decl local #3
781: local #2
782: Func(7,2): RandomInt
783: :=
784: #
return ( random + min_val );
785: local #3
786: local #1
787: +
788: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
789: pop param 'no_wake'
790: pop param 'percent_subtract'
791: pop param 'distance_start'
792: pop param 'y'
793: pop param 'x'
794: pop param 'npc'
var ev		:= struct;
795: decl local #6
796: struct
797: :=
798: #
ev.+type	:= NPCEVENT_ANCHOR;
799: local #6
800: "type"
801: .+
802: 10485781L
803: := #
ev.+x		:= x;
804: local #6
805: "x"
806: .+
807: local #4
808: := #
ev.+y		:= y;
809: local #6
810: "y"
811: .+
812: local #3
813: := #
ev.+distance	:= distance_start;
814: local #6
815: "distance"
816: .+
817: local #2
818: := #
ev.+percent	:= percent_subtract;
819: local #6
820: "percent"
821: .+
822: local #1
823: := #
ev.+WakeUp	:= no_wake;
824: local #6
825: "WakeUp"
826: .+
827: local #0
828: := #
ev.+process	:= GetProcess( GetPid() );
829: local #6
830: "process"
831: .+
832: Func(3,2): GetPid
833: Func(3,1): GetProcess
834: := #
return SendEvent( npc, ev );
835: local #5
836: local #6
837: Func(2,17): SendEvent
838: return
c:/ZH099/pkg/skills/mage/itemid/include/itemID.inc, Line 16
function IDItem( mobile, item )
839: pop param 'item'
840: pop param 'mobile'
var charges := GetObjProperty( item, "Charges" ),
841: decl local #2
842: local #0
843: "Charges"
844: Func(2,1): GetObjProperty
845: :=
846: #
847: decl local #3
848: local #0
849: "ChanceOfEffect"
850: Func(2,1): GetObjProperty
851: :=
852: #
853: decl local #4
854: local #0
855: "PoisonLevel"
856: Func(2,1): GetObjProperty
857: :=
858: #
if( GetObjProperty( item, "UnIDedMagicalItem" ) ||
859: local #0
860: "UnIDedMagicalItem"
861: Func(2,1): GetObjProperty
862: local #0
863: "IsGMItem"
864: Func(2,1): GetObjProperty
865: ||
866: local #0
867: "EnchantColor"
868: Func(2,1): GetObjProperty
869: ||
870: if false goto 875
NameByEnchant( item );
871: local #0
872: makelocal
873: jmp userfunc @1064
874: #
if( item.container.IsA( POLCLASS_CORPSE ) && GetObjProperty( item.container, "n
875: local #0
876: get member id 'container' (15)
877: 7L
878: Call Method id isa (#0, 1 params)
879: local #0
880: get member id 'container' (15)
881: "npctemplate"
882: Func(2,1): GetObjProperty
883: &&
884: if false goto 894
PrintTextAbove( item.container, item.desc );
885: local #0
886: get member id 'container' (15)
887: local #0
888: get member id 'desc' (19)
889: 3L
890: 1000L
891: 0L
892: Func(2,5): PrintTextAbove
893: #
SendSysMessage( mobile, "It appears to be "+item.desc+"." );
894: local #1
895: "It appears to be "
896: local #0
897: get member id 'desc' (19)
898: +
899: "."
900: +
901: 3L
902: 1000L
903: Func(2,4): SendSysMessage
904: #
if( charges )
905: local #2
906: if false goto 918
SendSysMessage( mobile, "There is "+charges+" charges left." );
907: local #1
908: "There is "
909: local #2
910: +
911: " charges left."
912: +
913: 3L
914: 1000L
915: Func(2,4): SendSysMessage
916: #
917: goto943
elseif( chance_effect )
918: local #3
919: if false goto 931
SendSysMessage( mobile, "It has "+chance_effect+"% chances of effects," );
920: local #1
921: "It has "
922: local #3
923: +
924: "% chances of effects,"
925: +
926: 3L
927: 1000L
928: Func(2,4): SendSysMessage
929: #
930: goto943
elseif( poison_lvl )
931: local #4
932: if false goto 943
SendSysMessage( mobile, "Cursed with poison level "+poison_lvl+"." );
933: local #1
934: "Cursed with poison level "
935: local #4
936: +
937: "."
938: +
939: 3L
940: 1000L
941: Func(2,4): SendSysMessage
942: #
SetObjProperty( item, "IDed", mobile.serial );
943: local #0
944: "IDed"
945: local #1
946: get member id 'serial' (6)
947: Func(2,2): SetObjProperty
948: #
return 1;
949: 1L
950: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 98
function MP_Mount( mobile, npc )
951: pop param 'npc'
952: pop param 'mobile'
mobile.graphic := 400 + mobile.gender;
953: local #1
954: 400L
955: local #1
956: get member id 'gender' (28)
957: +
958: set member id 'graphic' (5) #
var mount_piece := MP_GetMount( mobile );
959: decl local #2
960: local #1
961: makelocal
962: jmp userfunc @2060
963: :=
964: #
if( mount_piece )
965: local #2
966: if false goto 971
return error{"errortext":="Mobile is already mounted."};
967: error
968: "Mobile is already mounted."
969: addmember-assign(errortext)
970: return
var mount_graphic := MP_GetMountGraphic( npc );
971: decl local #3
972: local #0
973: makelocal
974: jmp userfunc @2077
975: :=
976: #
if( !mount_graphic )
977: local #3
978: if true goto 981
return mount_graphic;
979: local #3
980: return
mount_piece := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "MountPiece"
981: local #1
982: get member id 'x' (0)
983: local #1
984: get member id 'y' (1)
985: local #1
986: get member id 'z' (2)
987: "MountPiece"
988: 1L
989: "britannia"
990: Func(2,20): CreateItemAtLocation
991: local2 := 
mount_piece.graphic := mount_graphic;
992: local #2
993: local #3
994: set member id 'graphic' (5) #
mount_piece.color := npc.color;
995: local #2
996: local #0
997: get member id 'color' (7)
998: set member id 'color' (7) #
SetName( mount_piece, npc.name );
999: local #2
1000: local #0
1001: get member id 'name' (3)
1002: Func(2,14): SetName
1003: #
SetObjProperty( mount_piece, "serial", npc.serial );
1004: local #2
1005: "serial"
1006: local #0
1007: get member id 'serial' (6)
1008: Func(2,2): SetObjProperty
1009: #
SetObjProperty( mount_piece, "color", npc.color );
1010: local #2
1011: "color"
1012: local #0
1013: get member id 'color' (7)
1014: Func(2,2): SetObjProperty
1015: #
var result := EquipItem( mobile, mount_piece );
1016: decl local #4
1017: local #1
1018: local #2
1019: Func(2,21): EquipItem
1020: :=
1021: #
if( !result )
1022: local #4
1023: if true goto 1030
DestroyItem( mount_piece );
1024: local #2
1025: Func(2,22): DestroyItem
1026: #
return result;
1027: local #4
1028: return
1029: goto1033
mount_piece.movable := 0;
1030: local #2
1031: 0L
1032: set member id 'movable' (20) #
mobile.facing := npc.facing;
1033: local #1
1034: local #0
1035: get member id 'facing' (9)
1036: set member id 'facing' (9) #
MoveObjectToLocation( npc, 5140, 1773, 0, "britannia", MOVEOBJECT_FORCELOCATION
1037: local #0
1038: 5140L
1039: 1773L
1040: 0L
1041: "britannia"
1042: 1073741824L
1043: Func(2,23): MoveObjectToLocation
1044: #
SetObjProperty( npc, "mounted", 1 );
1045: local #0
1046: "mounted"
1047: 1L
1048: Func(2,2): SetObjProperty
1049: #
SetObjProperty( npc, "MustSleep", mobile.serial );
1050: local #0
1051: "MustSleep"
1052: local #1
1053: get member id 'serial' (6)
1054: Func(2,2): SetObjProperty
1055: #
npc.hidden := 1;
1056: local #0
1057: 1L
1058: set member id 'hidden' (32) #
npc.frozen := 1;
1059: local #0
1060: 1L
1061: set member id 'frozen' (34) #
return mount_piece;
1062: local #2
1063: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 21
function NameByEnchant( item )
1064: pop param 'item'
EraseObjProperty( item, "UnIDedMagicalItem" );
1065: local #0
1066: "UnIDedMagicalItem"
1067: Func(2,13): EraseObjProperty
1068: #
var base_name := GetObjProperty( item, "BaseName" );
1069: decl local #1
1070: local #0
1071: "BaseName"
1072: Func(2,1): GetObjProperty
1073: :=
1074: #
if( !base_name )
1075: local #1
1076: if true goto 1096
var item_cfg := ReadConfigFile( ":*:itemdesc" ),
1077: decl local #0
1078: ":*:itemdesc"
1079: Func(4,0): ReadConfigFile
1080: :=
1081: #
1082: decl local #1
1083: local #2
1084: local #0
1085: get member id 'objtype' (4)
1086: [] 1
1087: get member id 'desc' (19)
1088: :=
1089: #
SetName( item, item_name );
1090: local #0
1091: local #3
1092: Func(2,14): SetName
1093: #
1094: leave block(2)
1095: goto1100
SetName( item, base_name );
1096: local #0
1097: local #1
1098: Func(2,14): SetName
1099: #
var enchanted_name := GetObjProperty( item, "Enchanted" );;
1100: decl local #2
1101: local #0
1102: "Enchanted"
1103: Func(2,1): GetObjProperty
1104: :=
1105: #
if( enchanted_name )
1106: local #2
1107: if false goto 1117
SetName( item, enchanted_name+" "+item.desc );
1108: local #0
1109: local #2
1110: " "
1111: +
1112: local #0
1113: get member id 'desc' (19)
1114: +
1115: Func(2,14): SetName
1116: #
var enchanted_color := GetObjProperty( item, "EnchantColor" );
1117: decl local #3
1118: local #0
1119: "EnchantColor"
1120: Func(2,1): GetObjProperty
1121: :=
1122: #
if( enchanted_color )
1123: local #3
1124: if false goto 1132
item.color := enchanted_color;
1125: local #0
1126: local #3
1127: set member id 'color' (7) #
EraseObjProperty( item, "EnchantColor" );
1128: local #0
1129: "EnchantColor"
1130: Func(2,13): EraseObjProperty
1131: #
var isGMItem := GetObjProperty( item, "IsGMItem" );
1132: decl local #4
1133: local #0
1134: "IsGMItem"
1135: Func(2,1): GetObjProperty
1136: :=
1137: #
if( isGMItem )
1138: local #4
1139: if false goto 1146
SetName( item, isGMItem );
1140: local #0
1141: local #4
1142: Func(2,14): SetName
1143: #
return 1;
1144: 1L
1145: return
var hitScript := GetObjProperty( item, "HitScriptNumber" );
1146: decl local #5
1147: local #0
1148: "HitScriptNumber"
1149: Func(2,1): GetObjProperty
1150: :=
1151: #
if( hitScript )
1152: local #5
1153: if false goto 1159
RenameByHitscript( item, hitScript );
1154: local #0
1155: local #5
1156: makelocal
1157: jmp userfunc @1488
1158: #
var onHitScript := GetObjProperty( item, "OnHitScriptNumber" );
1159: decl local #6
1160: local #0
1161: "OnHitScriptNumber"
1162: Func(2,1): GetObjProperty
1163: :=
1164: #
if( onHitScript )
1165: local #6
1166: if false goto 1172
RenameByOnHitscript( item, onHitScript );
1167: local #0
1168: local #6
1169: makelocal
1170: jmp userfunc @1613
1171: #
var dmg_mode := item.dmg_mod;
1172: decl local #7
1173: local #0
1174: get member id 'dmg_mod' (91)
1175: :=
1176: #
if( dmg_mode )
1177: local #7
1178: if false goto 1185
RenameByMod( item, "Damage", dmg_mode );
1179: local #0
1180: "Damage"
1181: local #7
1182: makelocal
1183: jmp userfunc @1574
1184: #
var ar_mode := item.ar_mod;
1185: decl local #8
1186: local #0
1187: get member id 'ar_mod' (31)
1188: :=
1189: #
if( ar_mode )
1190: local #8
1191: if false goto 1198
RenameByMod( item, "Ar", ar_mode );
1192: local #0
1193: "Ar"
1194: local #8
1195: makelocal
1196: jmp userfunc @1574
1197: #
var ar_bonus := GetObjProperty( item, "ArBonus" );
1198: decl local #9
1199: local #0
1200: "ArBonus"
1201: Func(2,1): GetObjProperty
1202: :=
1203: #
if( ar_bonus )
1204: local #9
1205: if false goto 1215
RenameByMod( item, "ArBonus", CInt( ar_bonus * 5 ));
1206: local #0
1207: "ArBonus"
1208: local #9
1209: 5L
1210: *
1211: Func(0,1): CInt
1212: makelocal
1213: jmp userfunc @1574
1214: #
var hp_mode := item.maxhp_mod;
1215: decl local #10
1216: local #0
1217: get member id 'maxhp_mod' (89)
1218: :=
1219: #
if( hp_mode )
1220: local #10
1221: if false goto 1231
RenameByMod( item, "MaxHP", CInt( hp_mode / 2 ));
1222: local #0
1223: "MaxHP"
1224: local #10
1225: 2L
1226: /
1227: Func(0,1): CInt
1228: makelocal
1229: jmp userfunc @1574
1230: #
var skill_mod := GetEquipmentModifiers( item );
1231: decl local #11
1232: local #0
1233: 4L
1234: makelocal
1235: jmp userfunc @1955
1236: :=
1237: #
if( skill_mod.Size() )
1238: local #11
1239: Call Method id size (#48, 0 params)
1240: if false goto 1262
var skill_keys := skill_mod.Keys();
1241: decl local #0
1242: local #11
1243: Call Method id keys (#56, 0 params)
1244: :=
1245: #
foreach modifier in skill_keys
1246: local #12
1247: initforeach @1259
RenameByAttriMod( item, modifier, skill_mod[modifier] );
1248: local #0
1249: local #13
1250: local #11
1251: local #13
1252: [] 1
1253: makelocal
1254: jmp userfunc @1448
1255: #
SleepMS(5);
1256: 5L
1257: Func(3,3): Sleepms
1258: #
1259: stepforeach @1248
1260: leave block(3)
1261: leave block(1)
foreach protection in immunities
1262: global #2
1263: initforeach @1282
var mobile_prot := GetObjProperty( item, protection );
1264: decl local #0
1265: local #0
1266: local #12
1267: Func(2,1): GetObjProperty
1268: :=
1269: #
if( mobile_prot )
1270: local #15
1271: if false goto 1278
RenameByImmunity( item, protection, mobile_prot );
1272: local #0
1273: local #12
1274: local #15
1275: makelocal
1276: jmp userfunc @1549
1277: #
SleepMS(5);
1278: 5L
1279: Func(3,3): Sleepms
1280: #
1281: leave block(1)
1282: stepforeach @1264
1283: leave block(3)
foreach prot in wardings
1284: global #3
1285: initforeach @1303
var charges := GetObjProperty( item, prot );
1286: decl local #0
1287: local #0
1288: local #12
1289: Func(2,1): GetObjProperty
1290: :=
1291: #
if( charges )
1292: local #15
1293: if false goto 1299
RenameByWardings( item, prot );
1294: local #0
1295: local #12
1296: makelocal
1297: jmp userfunc @1674
1298: #
SleepMS(5);
1299: 5L
1300: Func(3,3): Sleepms
1301: #
1302: leave block(1)
1303: stepforeach @1286
1304: leave block(3)
foreach mod in regenerations
1305: global #4
1306: initforeach @1325
var mobile_mod := GetObjProperty( item, mod );
1307: decl local #0
1308: local #0
1309: local #12
1310: Func(2,1): GetObjProperty
1311: :=
1312: #
if( mobile_mod )
1313: local #15
1314: if false goto 1321
RenameByImmunity( item, mod, mobile_mod );
1315: local #0
1316: local #12
1317: local #15
1318: makelocal
1319: jmp userfunc @1549
1320: #
SleepMS(5);
1321: 5L
1322: Func(3,3): Sleepms
1323: #
1324: leave block(1)
1325: stepforeach @1307
1326: leave block(3)
return 1;
1327: 1L
1328: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1329: pop param 'template'
if( !template.package )
1330: local #0
1331: get member 'package'
1332: if true goto 1337
template := NPC_ParseTemplateName( template );
1333: local #0
1334: makelocal
1335: jmp userfunc @1386
1336: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1337: decl local #1
1338: ":"
1339: local #0
1340: get member 'package'
1341: +
1342: ":npcdesc"
1343: +
1344: Func(4,0): ReadConfigFile
1345: :=
1346: #
if( npc_cfg.errortext )
1347: local #1
1348: get member 'errortext'
1349: if false goto 1362
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1350: error
1351: "Error::NPC_GetNPCConfig() - Could not open :"
1352: local #0
1353: get member 'package'
1354: +
1355: ":npcdesc ->"
1356: +
1357: local #1
1358: get member 'errortext'
1359: +
1360: addmember-assign(errortext)
1361: return
var cfg_elem := npc_cfg[template.template];
1362: decl local #2
1363: local #1
1364: local #0
1365: get member 'template'
1366: [] 1
1367: :=
1368: #
if( cfg_elem.errortext )
1369: local #2
1370: get member 'errortext'
1371: if false goto 1384
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1372: error
1373: "Error::NPC_GetNPCConfig() - Could not find elem ["
1374: local #0
1375: get member 'template'
1376: +
1377: "] ->"
1378: +
1379: local #2
1380: get member 'errortext'
1381: +
1382: addmember-assign(errortext)
1383: return
return cfg_elem;
1384: local #2
1385: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1386: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1387: local #0
1388: 4L
1389: Call Method id isa (#0, 1 params)
1390: if false goto 1394
template_name := template_name.npctemplate;
1391: local #0
1392: get member id 'npctemplate' (62)
1393: local0 := 
var colon_a := Find( template_name, ":", 1 );
1394: decl local #1
1395: local #0
1396: ":"
1397: 1L
1398: Func(0,8): Find
1399: :=
1400: #
var colon_b := Find( template_name, ":", 2 );
1401: decl local #2
1402: local #0
1403: ":"
1404: 2L
1405: Func(0,8): Find
1406: :=
1407: #
var parsed := struct{"package", "template"};
1408: decl local #3
1409: struct
1410: addmember(package)
1411: addmember(template)
1412: :=
1413: #
if( !colon_a || !colon_b )
1414: local #1
1415: !
1416: local #2
1417: !
1418: ||
1419: if false goto 1427
parsed.package := "";
1420: local #3
1421: ""
1422: set member 'package' #
parsed.template := template_name;
1423: local #3
1424: local #0
1425: set member 'template' #
1426: goto1446
parsed.package := template_name[colon_a+1, colon_b-2];
1427: local #3
1428: local #0
1429: local #1
1430: 1L
1431: +
1432: local #2
1433: 2L
1434: -
1435: [,]
1436: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1437: local #3
1438: local #0
1439: local #2
1440: 1L
1441: +
1442: local #0
1443: Func(0,3): Len
1444: [,]
1445: set member 'template' #
return parsed;
1446: local #3
1447: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 175
function RenameByAttriMod( item, attribute, value )
1448: pop param 'value'
1449: pop param 'attribute'
1450: pop param 'item'
if( !value )
1451: local #0
1452: if true goto 1455
return 0;
1453: 0L
1454: return
if( attribute in AP_ListAttributesByType( "Stat" ))
1455: local #1
1456: "Stat"
1457: makelocal
1458: jmp userfunc @1881
1459: in
1460: if false goto 1466
value := CInt( value / 5 );
1461: local #0
1462: 5L
1463: /
1464: Func(0,1): CInt
1465: local0 := 
var mod_elem := GetEnchantmentElem( item, attribute );
1466: decl local #3
1467: local #2
1468: local #1
1469: makelocal
1470: jmp userfunc @1906
1471: :=
1472: #
var name := CStr ( "Name"+value );
1473: decl local #4
1474: "Name"
1475: local #0
1476: +
1477: Func(0,4): CStr
1478: :=
1479: #
SetAdjective( item, mod_elem, name );
1480: local #2
1481: local #3
1482: local #4
1483: makelocal
1484: jmp userfunc @1691
1485: #
return 1;
1486: 1L
1487: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 118
function RenameByHitscript( item, hitScript )
1488: pop param 'hitScript'
1489: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_hit" );
1490: decl local #2
1491: ":loot:effects_hit"
1492: Func(4,0): ReadConfigFile
1493: :=
1494: #
if( enchantment_cfg.errortext )
1495: local #2
1496: get member 'errortext'
1497: if false goto 1510
PrintTextAbove( item, "Error reading config <:loot:effects_hit> -->"+enchantmen
1498: local #1
1499: "Error reading config <:loot:effects_hit> -->"
1500: local #2
1501: get member 'errortext'
1502: +
1503: 3L
1504: 1000L
1505: 0L
1506: Func(2,5): PrintTextAbove
1507: #
return 0;
1508: 0L
1509: return
var chant_elem := FindConfigElem( enchantment_cfg, hitScript );
1510: decl local #3
1511: local #2
1512: local #0
1513: Func(4,5): FindConfigElem
1514: :=
1515: #
if( chant_elem.errortext )
1516: local #3
1517: get member 'errortext'
1518: if false goto 1535
PrintTextAbove( item, "Error reading chant_elem <"+hitScript+"> -->"+chant_elem
1519: local #1
1520: "Error reading chant_elem <"
1521: local #0
1522: +
1523: "> -->"
1524: +
1525: local #3
1526: get member 'errortext'
1527: +
1528: 3L
1529: 1000L
1530: 0L
1531: Func(2,5): PrintTextAbove
1532: #
return 0;
1533: 0L
1534: return
SetAdjective( item, chant_elem, "Name" );
1535: local #1
1536: local #3
1537: "Name"
1538: makelocal
1539: jmp userfunc @1691
1540: #
SetObjProperty( item, "HitScript", chant_elem.HitScript );
1541: local #1
1542: "HitScript"
1543: local #3
1544: get member id 'hitscript' (94)
1545: Func(2,2): SetObjProperty
1546: #
return 1;
1547: 1L
1548: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 210
function RenameByImmunity( item, immunity, power )
1549: pop param 'power'
1550: pop param 'immunity'
1551: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1552: decl local #3
1553: local #2
1554: local #1
1555: makelocal
1556: jmp userfunc @1906
1557: :=
1558: #
var name := CStr( "Name"+power );
1559: decl local #4
1560: "Name"
1561: local #0
1562: +
1563: Func(0,4): CStr
1564: :=
1565: #
SetAdjective( item, immunity_elem, name );
1566: local #2
1567: local #3
1568: local #4
1569: makelocal
1570: jmp userfunc @1691
1571: #
return 1;
1572: 1L
1573: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 193
function RenameByMod( item, mod, value )
1574: pop param 'value'
1575: pop param 'mod'
1576: pop param 'item'
if( !value )
1577: local #0
1578: if true goto 1581
return 0;
1579: 0L
1580: return
var mod_elem := GetEnchantmentElem( item, mod );
1581: decl local #3
1582: local #2
1583: local #1
1584: makelocal
1585: jmp userfunc @1906
1586: :=
1587: #
var temp := CInt( value / 5 );
1588: decl local #4
1589: local #0
1590: 5L
1591: /
1592: Func(0,1): CInt
1593: :=
1594: #
if( temp )
1595: local #4
1596: if false goto 1611
var name := CStr( "Name"+temp );
1597: decl local #0
1598: "Name"
1599: local #4
1600: +
1601: Func(0,4): CStr
1602: :=
1603: #
SetAdjective( item, mod_elem, name );
1604: local #2
1605: local #3
1606: local #5
1607: makelocal
1608: jmp userfunc @1691
1609: #
1610: leave block(1)
return 1;
1611: 1L
1612: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 138
function RenameByOnHitscript( item, onHitScript )
1613: pop param 'onHitScript'
1614: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_onhit" );
1615: decl local #2
1616: ":loot:effects_onhit"
1617: Func(4,0): ReadConfigFile
1618: :=
1619: #
if( enchantment_cfg.errortext )
1620: local #2
1621: get member 'errortext'
1622: if false goto 1635
PrintTextAbove( item, "Error reading config <:loot:effects_onhit> -->"+enchantm
1623: local #1
1624: "Error reading config <:loot:effects_onhit> -->"
1625: local #2
1626: get member 'errortext'
1627: +
1628: 3L
1629: 1000L
1630: 0L
1631: Func(2,5): PrintTextAbove
1632: #
return 0;
1633: 0L
1634: return
var chant_elem := FindConfigElem( enchantment_cfg, onHitScript );
1635: decl local #3
1636: local #2
1637: local #0
1638: Func(4,5): FindConfigElem
1639: :=
1640: #
if( chant_elem.errortext )
1641: local #3
1642: get member 'errortext'
1643: if false goto 1660
PrintTextAbove( item, "Error reading chant_elem <"+onHitScript+"> -->"+chant_el
1644: local #1
1645: "Error reading chant_elem <"
1646: local #0
1647: +
1648: "> -->"
1649: +
1650: local #3
1651: get member 'errortext'
1652: +
1653: 3L
1654: 1000L
1655: 0L
1656: Func(2,5): PrintTextAbove
1657: #
return 0;
1658: 0L
1659: return
SetAdjective( item, chant_elem, "Name" );
1660: local #1
1661: local #3
1662: "Name"
1663: makelocal
1664: jmp userfunc @1691
1665: #
SetObjProperty( item, "OnHitScript", chant_elem.OnHitScript );
1666: local #1
1667: "OnHitScript"
1668: local #3
1669: get member id 'onhitscript' (96)
1670: Func(2,2): SetObjProperty
1671: #
return 1;
1672: 1L
1673: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 220
function RenameByWardings( item, immunity )
1674: pop param 'immunity'
1675: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1676: decl local #2
1677: local #1
1678: local #0
1679: makelocal
1680: jmp userfunc @1906
1681: :=
1682: #
SetAdjective( item, immunity_elem, "Name" );
1683: local #1
1684: local #2
1685: "Name"
1686: makelocal
1687: jmp userfunc @1691
1688: #
return 1;
1689: 1L
1690: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 229
function SetAdjective( item, elem, value )
1691: pop param 'value'
1692: pop param 'elem'
1693: pop param 'item'
var colorkey := "Color";
1694: decl local #3
1695: "Color"
1696: :=
1697: #
if( GetObjProperty( item, "Cursed" ))
1698: local #2
1699: "Cursed"
1700: Func(2,1): GetObjProperty
1701: if false goto 1710
value := "C"+value;
1702: "C"
1703: local #0
1704: +
1705: local0 := 
colorkey := "C"+colorkey;
1706: "C"
1707: local #3
1708: +
1709: local3 := 
var position := GetConfigString( elem, "Place" );
1710: decl local #4
1711: local #1
1712: "Place"
1713: Func(4,6): GetConfigString
1714: :=
1715: #
if( position.errortext )
1716: local #4
1717: get member 'errortext'
1718: if false goto 1731
PrintTextAbove( item, "Error reading position <Place> -->"+position.errortext )
1719: local #2
1720: "Error reading position <Place> -->"
1721: local #4
1722: get member 'errortext'
1723: +
1724: 3L
1725: 1000L
1726: 0L
1727: Func(2,5): PrintTextAbove
1728: #
return 0;
1729: 0L
1730: return
var adjective := GetConfigString( elem, value );
1731: decl local #5
1732: local #1
1733: local #0
1734: Func(4,6): GetConfigString
1735: :=
1736: #
if( adjective.errortext )
1737: local #5
1738: get member 'errortext'
1739: if false goto 1756
PrintTextAbove( item, "Error reading adjective <"+value+"> -->"+adjective.error
1740: local #2
1741: "Error reading adjective <"
1742: local #0
1743: +
1744: "> -->"
1745: +
1746: local #5
1747: get member 'errortext'
1748: +
1749: 3L
1750: 1000L
1751: 0L
1752: Func(2,5): PrintTextAbove
1753: #
return 0;
1754: 0L
1755: return
if( position == "Prefix" )
1756: local #4
1757: "Prefix"
1758: ==
1759: if false goto 1773
SetName( item, Lower( adjective+" "+TruncateArticle( item.desc )));
1760: local #2
1761: local #5
1762: " "
1763: +
1764: local #2
1765: get member id 'desc' (19)
1766: makelocal
1767: jmp userfunc @1810
1768: +
1769: Func(0,0): Lower
1770: Func(2,14): SetName
1771: #
1772: goto1785
SetName( item, Lower( TruncateArticle( item.desc )+" "+adjective ));
1773: local #2
1774: local #2
1775: get member id 'desc' (19)
1776: makelocal
1777: jmp userfunc @1810
1778: " "
1779: +
1780: local #5
1781: +
1782: Func(0,0): Lower
1783: Func(2,14): SetName
1784: #
SetName( item, AddArticle( item.desc ));
1785: local #2
1786: local #2
1787: get member id 'desc' (19)
1788: makelocal
1789: jmp userfunc @1848
1790: Func(2,14): SetName
1791: #
var color_elem := GetConfigString( elem, colorkey );
1792: decl local #6
1793: local #1
1794: local #3
1795: Func(4,6): GetConfigString
1796: :=
1797: #
var color_item := CInt( color_elem );
1798: decl local #7
1799: local #6
1800: Func(0,1): CInt
1801: :=
1802: #
if( color_item )
1803: local #7
1804: if false goto 1808
item.color := color_item;
1805: local #2
1806: local #7
1807: set member id 'color' (7) #
return 1;
1808: 1L
1809: return
c:/ZH099/scripts/include/string.inc, Line 22
function TruncateArticle( text )
1810: pop param 'text'
text := CStr(text);
1811: local #0
1812: Func(0,4): CStr
1813: local0 := 
var i := Len(text);
1814: decl local #1
1815: local #0
1816: Func(0,3): Len
1817: :=
1818: #
if ( Lower(text[1, 2]) == "a " )
1819: local #0
1820: 1L
1821: 2L
1822: [,]
1823: Func(0,0): Lower
1824: "a "
1825: ==
1826: if false goto 1833
text := text[3, i];
1827: local #0
1828: 3L
1829: local #1
1830: [,]
1831: local0 := 
1832: goto1846
elseif ( Lower(text[1, 3]) == "an " )
1833: local #0
1834: 1L
1835: 3L
1836: [,]
1837: Func(0,0): Lower
1838: "an "
1839: ==
1840: if false goto 1846
text := text[4, i];
1841: local #0
1842: 4L
1843: local #1
1844: [,]
1845: local0 := 
return text;
1846: local #0
1847: return
c:/ZH099/scripts/include/string.inc, Line 35
function AddArticle( text )
1848: pop param 'text'
var vowels := array{"a", "e", "i", "o", "u"};
1849: decl local #1
1850: array
1851: "a"
1852: init{}
1853: "e"
1854: init{}
1855: "i"
1856: init{}
1857: "o"
1858: init{}
1859: "u"
1860: init{}
1861: :=
1862: #
if ( Lower(text[1]) in vowels )
1863: local #0
1864: 1L
1865: [] 1
1866: Func(0,0): Lower
1867: local #1
1868: in
1869: if false goto 1875
text := "an "+text;
1870: "an "
1871: local #0
1872: +
1873: local0 := 
1874: goto1879
text := "a "+text;
1875: "a "
1876: local #0
1877: +
1878: local0 := 
return text;
1879: local #0
1880: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 69
function AP_ListAttributesByType( type:="" )
1881: pop param 'type'
if( !type )
1882: local #0
1883: if true goto 1893
var cfg_file := ReadConfigFile( ":attributes:attributes" );
1884: decl local #0
1885: ":attributes:attributes"
1886: Func(4,0): ReadConfigFile
1887: :=
1888: #
return GetConfigStringKeys( cfg_file );
1889: local #1
1890: Func(4,4): GetConfigStringKeys
1891: return
1892: leave block(1)
type := Lower( type );
1893: local #0
1894: Func(0,0): Lower
1895: local0 := 
var data_elem := AP_GetAttributeDataElem( "Categories" );
1896: decl local #1
1897: "Categories"
1898: makelocal
1899: jmp userfunc @2165
1900: :=
1901: #
return data_elem.GetProp( type );
1902: local #1
1903: local #0
1904: Call Method id getprop (#35, 1 params)
1905: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 158
function GetEnchantmentElem( item, elem )
1906: pop param 'elem'
1907: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:enchant_desc" );
1908: decl local #2
1909: ":loot:enchant_desc"
1910: Func(4,0): ReadConfigFile
1911: :=
1912: #
if( enchantment_cfg.errortext )
1913: local #2
1914: get member 'errortext'
1915: if false goto 1928
PrintTextAbove( item, "Error reading config <:loot:enchant_desc> -->"+enchantme
1916: local #1
1917: "Error reading config <:loot:enchant_desc> -->"
1918: local #2
1919: get member 'errortext'
1920: +
1921: 3L
1922: 1000L
1923: 0L
1924: Func(2,5): PrintTextAbove
1925: #
return 0;
1926: 0L
1927: return
var chant_elem := FindConfigElem( enchantment_cfg, elem );
1928: decl local #3
1929: local #2
1930: local #0
1931: Func(4,5): FindConfigElem
1932: :=
1933: #
if( chant_elem.errortext )
1934: local #3
1935: get member 'errortext'
1936: if false goto 1953
PrintTextAbove( item, "Error reading chant_elem <"+elem+"> -->"+chant_elem.erro
1937: local #1
1938: "Error reading chant_elem <"
1939: local #0
1940: +
1941: "> -->"
1942: +
1943: local #3
1944: get member 'errortext'
1945: +
1946: 3L
1947: 1000L
1948: 0L
1949: Func(2,5): PrintTextAbove
1950: #
return 0;
1951: 0L
1952: return
return chant_elem;
1953: local #3
1954: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 81
function GetEquipmentModifiers( item, flags:=EQUIP_CSTM_OR_ITEMDESC )
1955: pop param 'flags'
1956: pop param 'item'
var cstm_mods;
1957: decl local #2
1958: #
if( flags & EQUIP_CUSTOM_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
1959: local #0
1960: 2L
1961: &
1962: local #0
1963: 4L
1964: &
1965: ||
1966: if false goto 1985
cstm_mods := GetObjProperty( item, "AttribMods" );
1967: local #1
1968: "AttribMods"
1969: Func(2,1): GetObjProperty
1970: local2 := 
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
1971: local #2
1972: Func(0,6): TypeOf
1973: Func(0,0): Lower
1974: "dictionary"
1975: <>
1976: if false goto 1979
cstm_mods := dictionary;
1977: dictionary
1978: local2 := 
if( flags & EQUIP_CSTM_OR_ITEMDESC )
1979: local #0
1980: 4L
1981: &
1982: if false goto 1985
return cstm_mods;
1983: local #2
1984: return
var itemdesc_mods := dictionary;
1985: decl local #3
1986: dictionary
1987: :=
1988: #
if( flags & EQUIP_ITEMDESC_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
1989: local #0
1990: 1L
1991: &
1992: local #0
1993: 4L
1994: &
1995: ||
1996: if false goto 2032
var item_cfg := ReadConfigFile( ":*:itemdesc" );
1997: decl local #0
1998: ":*:itemdesc"
1999: Func(4,0): ReadConfigFile
2000: :=
2001: #
item_cfg := item_cfg[item.objtype];
2002: local #4
2003: local #1
2004: get member id 'objtype' (4)
2005: [] 1
2006: local4 := 
var modifier := Abs( item_cfg.DefaultDex ),
2007: decl local #1
2008: local #4
2009: get member 'DefaultDex'
2010: Func(8,0): Abs
2011: :=
2012: #
2013: decl local #2
2014: local #1
2015: "DefaultDex"
2016: Func(2,1): GetObjProperty
2017: Func(0,1): CInt
2018: :=
2019: #
if( cust_modifier )
2020: local #6
2021: if false goto 2026
modifier := modifier - cust_modifier;
2022: local #5
2023: local #6
2024: -
2025: local5 := 
itemdesc_mods["dexterity"] := -modifier;
2026: local #3
2027: "dexterity"
2028: local #5
2029: unary -
2030: [] := (1) #
2031: leave block(3)
if( flags & EQUIP_BOTH_MODS )
2032: local #0
2033: 3L
2034: &
2035: if false goto 2048
foreach modifier in ( cstm_mods )
2036: local #2
2037: initforeach @2046
itemdesc_mods.Insert( _modifier_iter, modifier );
2038: local #3
2039: local #6
2040: local #4
2041: Call Method id insert (#50, 2 params)
2042: #
SleepMS(2);
2043: 2L
2044: Func(3,3): Sleepms
2045: #
2046: stepforeach @2038
2047: leave block(3)
if( itemdesc_mods.Size() > 0 )
2048: local #3
2049: Call Method id size (#48, 0 params)
2050: 0L
2051: >
2052: if false goto 2056
return itemdesc_mods;
2053: local #3
2054: return
2055: goto2058
return cstm_mods;
2056: local #2
2057: return
2058: 0L
2059: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 224
function MP_GetMount( mobile )
2060: pop param 'mobile'
var mount_piece := GetEquipmentByLayer( mobile, LAYER_MOUNT );
2061: decl local #1
2062: local #0
2063: 25L
2064: Func(2,12): GetEquipmentByLayer
2065: :=
2066: #
if( mount_piece.errortext )
2067: local #1
2068: get member 'errortext'
2069: if false goto 2075
return error{"errortext":=mount_piece.errortext};
2070: error
2071: local #1
2072: get member 'errortext'
2073: addmember-assign(errortext)
2074: return
return 1;
2075: 1L
2076: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 40
function MP_GetMountGraphic( mobile )
2077: pop param 'mobile'
var mobile_graphic;
2078: decl local #1
2079: #
if( mobile.IsA( POLCLASS_NPC ))
2080: local #0
2081: 4L
2082: Call Method id isa (#0, 1 params)
2083: if false goto 2089
mobile_graphic := Hex( mobile.graphic );
2084: local #0
2085: get member id 'graphic' (5)
2086: Func(0,5): Hex
2087: local1 := 
2088: goto2093
mobile_graphic := Hex( CInt( mobile ));
2089: local #0
2090: Func(0,1): CInt
2091: Func(0,5): Hex
2092: local1 := 
var elem := MP_GetMountsCfgElem( "MobileToMount" );
2093: decl local #2
2094: "MobileToMount"
2095: 0L
2096: makelocal
2097: jmp userfunc @2121
2098: :=
2099: #
var tile_graphic := GetConfigInt( elem, mobile_graphic );
2100: decl local #3
2101: local #2
2102: local #1
2103: Func(4,7): GetConfigInt
2104: :=
2105: #
if( tile_graphic )
2106: local #3
2107: if false goto 2111
return tile_graphic;
2108: local #3
2109: return
2110: goto2119
return error{"errortext":="Error::MP_GetMountGraphic() - No mount tile graphic 
2111: error
2112: "Error::MP_GetMountGraphic() - No mount tile graphic matches mobile graphic '"
2113: local #1
2114: +
2115: "'"
2116: +
2117: addmember-assign(errortext)
2118: return
2119: 0L
2120: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 26
function MP_GetMountsCfgElem( elem_name, byref cfg_file:=0 )
2121: pop param byref 'cfg_file'
2122: pop param 'elem_name'
if( !cfg_file )
2123: local #0
2124: if true goto 2128
cfg_file := MP_GetMountsCfgFile();
2125: makelocal
2126: jmp userfunc @2149
2127: local0 := 
var elem := cfg_file[elem_name];
2128: decl local #2
2129: local #0
2130: local #1
2131: [] 1
2132: :=
2133: #
if( elem.errortext )
2134: local #2
2135: get member 'errortext'
2136: if false goto 2147
SysLog( "Error::MP_GetMountsCfgElem() - Unable to find elem ["+elem_name+"] ->"
2137: "Error::MP_GetMountsCfgElem() - Unable to find elem ["
2138: local #1
2139: +
2140: "] ->"
2141: +
2142: local #2
2143: get member 'errortext'
2144: +
2145: Func(3,0): SysLog
2146: #
return elem;
2147: local #2
2148: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 18
function MP_GetMountsCfgFile()
var cfg := ReadConfigFile( ":mounts:mounts" );
2149: decl local #0
2150: ":mounts:mounts"
2151: Func(4,0): ReadConfigFile
2152: :=
2153: #
if( cfg.errortext )
2154: local #0
2155: get member 'errortext'
2156: if false goto 2163
SysLog( "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2157: "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2158: local #0
2159: get member 'errortext'
2160: +
2161: Func(3,0): SysLog
2162: #
return cfg;
2163: local #0
2164: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 57
function AP_GetAttributeDataElem( elem_name )
2165: pop param 'elem_name'
var data_file := AP_GetAttributesDataFile();
2166: decl local #1
2167: makelocal
2168: jmp userfunc @2194
2169: :=
2170: #
var data_elem := DFFindElement( data_file, elem_name, DF_CREATE );
2171: decl local #2
2172: local #1
2173: local #0
2174: 1L
2175: makelocal
2176: jmp userfunc @2213
2177: :=
2178: #
if( data_elem.errortext )
2179: local #2
2180: get member 'errortext'
2181: if false goto 2192
SysLog( "Error::AP_GetAttributeDataElem() - unable to find elem ["+elem_name+"]
2182: "Error::AP_GetAttributeDataElem() - unable to find elem ["
2183: local #0
2184: +
2185: "] ->"
2186: +
2187: local #2
2188: get member 'errortext'
2189: +
2190: Func(3,0): SysLog
2191: #
return data_elem;
2192: local #2
2193: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 49
function AP_GetAttributesDataFile()
var data_file := DFOpenDataFile( ":attributes:attributes", DF_CREATE );
2194: decl local #0
2195: ":attributes:attributes"
2196: 1L
2197: 0L
2198: makelocal
2199: jmp userfunc @2275
2200: :=
2201: #
if( data_file.errortext )
2202: local #0
2203: get member 'errortext'
2204: if false goto 2211
SysLog( "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"+
2205: "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"
2206: local #0
2207: get member 'errortext'
2208: +
2209: Func(3,0): SysLog
2210: #
return data_file;
2211: local #0
2212: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
2213: pop param 'create'
2214: pop param 'elem_name'
2215: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
2216: decl local #3
2217: local #2
2218: local #1
2219: Func(0,4): CStr
2220: Call Method id findelement (#72, 1 params)
2221: :=
2222: #
if ( !temp && create )
2223: local #3
2224: !
2225: local #0
2226: &&
2227: if false goto 2245
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
2228: "Debug::DFFindElement() - Creating elem: "
2229: local #1
2230: Func(0,4): CStr
2231: +
2232: makelocal
2233: jmp userfunc @2331
2234: #
file_ref.CreateElement(CStr(elem_name));
2235: local #2
2236: local #1
2237: Func(0,4): CStr
2238: Call Method id createelement (#71, 1 params)
2239: #
temp := file_ref.FindElement(CStr(elem_name));
2240: local #2
2241: local #1
2242: Func(0,4): CStr
2243: Call Method id findelement (#72, 1 params)
2244: local3 := 
if ( temp )
2245: local #3
2246: if false goto 2250
return temp;
2247: local #3
2248: return
2249: goto2273
elseif (create)
2250: local #0
2251: if false goto 2273
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
2252: decl local #0
2253: error
2254: "Error::DFFindElement() - Could not open data elem ["
2255: local #1
2256: +
2257: "] - "
2258: +
2259: local #3
2260: get member 'errortext'
2261: +
2262: addmember-assign(errortext)
2263: :=
2264: #
DF_OutPut(errmsg.errortext);
2265: local #4
2266: get member 'errortext'
2267: makelocal
2268: jmp userfunc @2331
2269: #
return errmsg;
2270: local #4
2271: return
2272: leave block(1)
2273: 0L
2274: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
2275: pop param 'flags'
2276: pop param 'create'
2277: pop param 'file_name'
var data_file := OpenDataFile(file_name);
2278: decl local #3
2279: local #2
2280: Func(10,0): OpenDataFile
2281: :=
2282: #
if ( (!data_file) && (create) )
2283: local #3
2284: !
2285: local #1
2286: &&
2287: if false goto 2301
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
2288: "Debug::DFOpenDataFile() - Creating data file: "
2289: local #2
2290: +
2291: makelocal
2292: jmp userfunc @2331
2293: #
CreateDataFile(file_name, flags);
2294: local #2
2295: local #0
2296: Func(10,1): CreateDataFile
2297: #
data_file := OpenDataFile(file_name);
2298: local #2
2299: Func(10,0): OpenDataFile
2300: local3 := 
if ( data_file )
2301: local #3
2302: if false goto 2306
return data_file;
2303: local #3
2304: return
2305: goto2329
elseif ( create )
2306: local #1
2307: if false goto 2329
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
2308: decl local #0
2309: error
2310: "Error::DFOpenDataFile() - Could not open "
2311: local #2
2312: +
2313: " : "
2314: +
2315: local #3
2316: get member 'errortext'
2317: +
2318: addmember-assign(errortext)
2319: :=
2320: #
DF_OutPut(errmsg.errortext);
2321: local #4
2322: get member 'errortext'
2323: makelocal
2324: jmp userfunc @2331
2325: #
return errmsg;
2326: local #4
2327: return
2328: leave block(1)
2329: 0L
2330: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
2331: pop param 'text'
if ( DF_DEBUG_MODE )
2332: global #1
2333: if false goto 2352
var script_name := GetProcess(GetPid()).name;
2334: decl local #0
2335: Func(3,2): GetPid
2336: Func(3,1): GetProcess
2337: get member id 'name' (3)
2338: :=
2339: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
2340: "::log/dataFile.log"
2341: "["
2342: local #1
2343: +
2344: "]: "
2345: +
2346: local #0
2347: +
2348: 1L
2349: Func(9,0): LogToFile
2350: #
2351: leave block(1)
return 1;
2352: 1L
2353: return
