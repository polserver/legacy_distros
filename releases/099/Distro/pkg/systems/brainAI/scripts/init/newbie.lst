c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @170
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\init\newbie.src, Line 16
program BrainNerve( params )
include ":brainAI:npcCommands";
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var gsettings	:= params[2];
64: decl local #2
65: local #0
66: 2L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
NPC_SetupAmmo( npc );
72: local #1
73: makelocal
74: jmp userfunc @264
75: #
NPC_SetupBackPack( npc );
76: local #1
77: makelocal
78: jmp userfunc @332
79: #
NPC_SetupRandomEquipment( npc );
80: local #1
81: 0L
82: 0L
83: makelocal
84: jmp userfunc @512
85: #
NPC_SetupName( npc );
86: local #1
87: 0L
88: makelocal
89: jmp userfunc @370
90: #
NPC_SetupProtections( npc );
91: local #1
92: makelocal
93: jmp userfunc @469
94: #
NPC_SetupRandomEquipment( npc, "Newbie" );
95: local #1
96: "Newbie"
97: 0L
98: makelocal
99: jmp userfunc @512
100: #
gsettings["AreaSize"] *= 3;
101: local #2
102: "AreaSize"
103: [] 1
104: 3L
105: *=
106: #
NPC_SetAnchorInfos( npc, gsettings );
107: local #1
108: local #2
109: makelocal
110: jmp userfunc @214
111: #
npc.color := 1056 - RandomInt(55); // 1002-1056
112: local #1
113: 1056L
114: 55L
115: Func(4,2): RandomInt
116: -
117: set member id 'color' (7) #
npc.truecolor := npc.color;
118: local #1
119: local #1
120: get member id 'color' (7)
121: set member id 'truecolor' (30) #
var hiding := AP_GetSkill( npc, HIDING );
122: decl local #3
123: local #1
124: "Hiding"
125: makelocal
126: jmp userfunc @140
127: :=
128: #
if( hiding > 30 )
129: local #3
130: 30L
131: >
132: if false goto 136
npc.hidden := 1;
133: local #1
134: 1L
135: set member id 'hidden' (32) #
return 1;
136: 1L
137: progend
138: leave block(4)
139: progend
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
140: pop param 'skill_name'
141: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
142: local #1
143: local #0
144: makelocal
145: jmp userfunc @161
146: local #1
147: local #0
148: makelocal
149: jmp userfunc @152
150: +
151: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
152: pop param 'skill_name'
153: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
154: local #1
155: local #0
156: Func(9,1): GetAttributeTemporaryMod
157: Func(0,4): CDbl
158: 10LF
159: /
160: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
161: pop param 'skill_name'
162: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
163: local #1
164: local #0
165: Func(9,0): GetAttributeBaseValue
166: Func(0,4): CDbl
167: 10LF
168: /
169: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
170: pop param byref 'cfg_file'
171: pop param 'elem_name'
if( !cfg_file )
172: local #0
173: if true goto 177
cfg_file := Classes_GetSettingsCfgFile();
174: makelocal
175: jmp userfunc @198
176: local0 := 
var elem := cfg_file[elem_name];
177: decl local #2
178: local #0
179: local #1
180: [] 1
181: :=
182: #
if( elem.errortext )
183: local #2
184: get member 'errortext'
185: if false goto 196
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
186: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
187: local #1
188: +
189: "] ->"
190: +
191: local #2
192: get member 'errortext'
193: +
194: Func(3,2): SysLog
195: #
return elem;
196: local #2
197: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
198: decl local #0
199: ":classes:settings"
200: Func(6,0): ReadConfigFile
201: :=
202: #
if( cfg.errortext )
203: local #0
204: get member 'errortext'
205: if false goto 212
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
206: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
207: local #0
208: get member 'errortext'
209: +
210: Func(3,2): SysLog
211: #
return cfg;
212: local #0
213: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
214: pop param 'gsettings'
215: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
216: decl local #2
217: local #1
218: "StartingPoint"
219: Func(2,7): GetObjProperty
220: :=
221: #
if( !starting_point )
222: local #2
223: if true goto 248
var location := struct;
224: decl local #0
225: struct
226: :=
227: #
location.+x := npc.x;
228: local #3
229: "x"
230: .+
231: local #1
232: get member id 'x' (0)
233: := #
location.+y := npc.y;
234: local #3
235: "y"
236: .+
237: local #1
238: get member id 'y' (1)
239: := #
starting_point := location;
240: local #3
241: local2 := 
SetObjProperty( npc, "StartingPoint", location );
242: local #1
243: "StartingPoint"
244: local #3
245: Func(2,6): SetObjProperty
246: #
247: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
248: local #1
249: local #2
250: get member id 'x' (0)
251: local #2
252: get member id 'y' (1)
253: local #0
254: "AreaSize"
255: [] 1
256: Func(0,2): CInt
257: 80L
258: 0L
259: makelocal
260: jmp userfunc @865
261: #
return 1;
262: 1L
263: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 55
function NPC_SetupAmmo( mobile )
264: pop param 'mobile'
var npc_elem := NPC_GetNPCConfig( mobile );
265: decl local #1
266: local #0
267: makelocal
268: jmp userfunc @1456
269: :=
270: #
if( npc_elem.MissileWeapon )
271: local #1
272: get member 'MissileWeapon'
273: if false goto 303
var weapon := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, npc_elem.Miss
274: decl local #0
275: local #0
276: get member id 'x' (0)
277: local #0
278: get member id 'y' (1)
279: local #0
280: get member id 'z' (2)
281: local #1
282: get member 'MissileWeapon'
283: 1L
284: local #0
285: get member id 'realm' (112)
286: Func(2,24): CreateItemAtLocation
287: :=
288: #
if( !EquipItem( mobile, weapon ))
289: local #0
290: local #2
291: Func(2,25): EquipItem
292: if true goto 298
DestroyItem( weapon );
293: local #2
294: Func(2,26): DestroyItem
295: #
return weapon;
296: local #2
297: return
weapon.newbie := 1;
298: local #2
299: 1L
300: set member id 'newbie' (25) #
301: leave block(1)
302: goto330
elseif( npc_elem.AmmoType )
303: local #1
304: get member 'AmmoType'
305: if false goto 330
if( CInt( npc_elem.AmmoAmount ) > 0 )
306: local #1
307: get member 'AmmoAmount'
308: Func(0,2): CInt
309: 0L
310: >
311: if false goto 330
var ammo := CreateItemInBackpack( mobile, npc_elem.AmmoType, CInt( npc_elem.Amm
312: decl local #0
313: local #0
314: local #1
315: get member 'AmmoType'
316: local #1
317: get member 'AmmoAmount'
318: Func(0,2): CInt
319: Func(2,30): CreateItemInBackpack
320: :=
321: #
if( !ammo )
322: local #2
323: if true goto 326
return ammo;
324: local #2
325: return
ammo.newbie := 1;
326: local #2
327: 1L
328: set member id 'newbie' (25) #
329: leave block(1)
return 1;
330: 1L
331: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
332: pop param 'mobile'
if( !mobile.backpack )
333: local #0
334: get member id 'backpack' (41)
335: if true goto 367
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
336: decl local #0
337: local #0
338: get member id 'x' (0)
339: local #0
340: get member id 'y' (1)
341: local #0
342: get member id 'z' (2)
343: "BackPack"
344: 1L
345: local #0
346: get member id 'realm' (112)
347: Func(2,24): CreateItemAtLocation
348: :=
349: #
var result := EquipItem( mobile, backpack );
350: decl local #1
351: local #0
352: local #1
353: Func(2,25): EquipItem
354: :=
355: #
if( !result )
356: local #2
357: if true goto 364
DestroyItem( backpack );
358: local #1
359: Func(2,26): DestroyItem
360: #
return result;
361: local #2
362: return
363: goto366
return backpack;
364: local #1
365: return
366: leave block(2)
return mobile.backpack;
367: local #0
368: get member id 'backpack' (41)
369: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 184
function NPC_SetupName( mobile, name_elem:=0 )
370: pop param 'name_elem'
371: pop param 'mobile'
if( !mobile.name["<random>"] )
372: local #1
373: get member id 'name' (3)
374: "<random>"
375: [] 1
376: if true goto 380
return 1;
377: 1L
378: return
379: goto397
elseif( !name_elem )
380: local #0
381: if true goto 397
var npc_elem := NPC_GetNPCConfig( mobile );
382: decl local #0
383: local #1
384: makelocal
385: jmp userfunc @1456
386: :=
387: #
name_elem := npc_elem.NameTemplate;
388: local #2
389: get member 'NameTemplate'
390: local0 := 
if( name_elem.errortext )
391: local #0
392: get member 'errortext'
393: if false goto 396
return name_elem;
394: local #0
395: return
396: leave block(1)
var npc_names := ReadConfigFile( ":brainAI:names" );
397: decl local #2
398: ":brainAI:names"
399: Func(6,0): ReadConfigFile
400: :=
401: #
if( !npc_names[name_elem] )
402: local #2
403: local #0
404: [] 1
405: if true goto 414
return error{"errortext" := "There is no elem ["+name_elem+"] in NAMES.CFG"};
406: error
407: "There is no elem ["
408: local #0
409: +
410: "] in NAMES.CFG"
411: +
412: addmember-assign(errortext)
413: return
var name_list := GetConfigStringArray( npc_names[name_elem], "Name" );
414: decl local #3
415: local #2
416: local #0
417: [] 1
418: "Name"
419: Func(6,2): GetConfigStringArray
420: :=
421: #
if ( name_list.Size() < 1 )
422: local #3
423: Call Method id size (#48, 0 params)
424: 1L
425: <
426: if false goto 435
return error{"errortext":="No names were found in the ["+name_elem+"] elem for 
427: error
428: "No names were found in the ["
429: local #0
430: +
431: "] elem for names.cfg"
432: +
433: addmember-assign(errortext)
434: return
var my_name := mobile.name;
435: decl local #4
436: local #1
437: get member id 'name' (3)
438: :=
439: #
while( my_name["<random>"] )
440: local #4
441: "<random>"
442: [] 1
443: if false goto 463
var replacement := name_list[RandomInt( name_list.Size() )+1];
444: decl local #0
445: local #3
446: local #3
447: Call Method id size (#48, 0 params)
448: Func(4,2): RandomInt
449: 1L
450: +
451: [] 1
452: :=
453: #
my_name["<random>"] := replacement;
454: local #4
455: "<random>"
456: local #5
457: [] := (1) #
SleepMS(2);
458: 2L
459: Func(3,0): Sleepms
460: #
461: leave block(1)
462: goto440
SetName( mobile, my_name );
463: local #1
464: local #4
465: Func(2,18): SetName
466: #
return my_name;
467: local #4
468: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 218
function NPC_SetupProtections( npc )
469: pop param 'npc'
var possibles := GetProtections(),
470: decl local #1
471: makelocal
472: jmp userfunc @928
473: :=
474: #
475: decl local #2
476: local #0
477: makelocal
478: jmp userfunc @915
479: :=
480: #
foreach protection in possibles
481: local #1
482: initforeach @503
var level := GetObjProperty( npc, protection );
483: decl local #0
484: local #0
485: local #3
486: Func(2,7): GetObjProperty
487: :=
488: #
if( level )
489: local #6
490: if false goto 499
protections[protection] := level;
491: local #2
492: local #3
493: local #6
494: [] := (1) #
EraseObjProperty( npc, protection );
495: local #0
496: local #3
497: Func(2,17): EraseObjProperty
498: #
SleepMS(5);
499: 5L
500: Func(3,0): Sleepms
501: #
502: leave block(1)
503: stepforeach @483
504: leave block(3)
SetMobileProtections( npc, protections );
505: local #0
506: local #2
507: makelocal
508: jmp userfunc @858
509: #
return 1;
510: 1L
511: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 82
function NPC_SetupRandomEquipment( mobile, elem_name:=0, flags:=EQUIP_NOGENDER 
512: pop param 'flags'
513: pop param 'elem_name'
514: pop param 'mobile'
if( !elem_name )
515: local #1
516: if true goto 527
var npc_elem := NPC_GetNPCConfig( mobile );
517: decl local #0
518: local #2
519: makelocal
520: jmp userfunc @1456
521: :=
522: #
elem_name := npc_elem.EquipTemplate;
523: local #3
524: get member 'EquipTemplate'
525: local1 := 
526: leave block(1)
var index_cfg := ReadConfigFile( ":equipment:equipIndex" );
527: decl local #3
528: ":equipment:equipIndex"
529: Func(6,0): ReadConfigFile
530: :=
531: #
if( index_cfg.errortext )
532: local #3
533: get member 'errortext'
534: if false goto 542
return error{"errortext":="Could not open equipIndex.cfg -> "+index_cfg.errorte
535: error
536: "Could not open equipIndex.cfg -> "
537: local #3
538: get member 'errortext'
539: +
540: addmember-assign(errortext)
541: return
var group_cfg := ReadConfigFile( ":equipment:equipGroups" );
542: decl local #4
543: ":equipment:equipGroups"
544: Func(6,0): ReadConfigFile
545: :=
546: #
if( group_cfg.errortext )
547: local #4
548: get member 'errortext'
549: if false goto 557
return error{"errortext":="Could not open equipGroups.cfg -> "+group_cfg.errort
550: error
551: "Could not open equipGroups.cfg -> "
552: local #4
553: get member 'errortext'
554: +
555: addmember-assign(errortext)
556: return
var index_elem := index_cfg[elem_Name];
557: decl local #5
558: local #3
559: local #1
560: [] 1
561: :=
562: #
if( !index_elem )
563: local #5
564: if true goto 573
return error{"errortext":="equipIndex.cfg elem ["+index_elem+"] does not exist.
565: error
566: "equipIndex.cfg elem ["
567: local #5
568: +
569: "] does not exist."
570: +
571: addmember-assign(errortext)
572: return
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipGroup" ))
573: local #5
574: "EquipGroup"
575: Func(6,3): GetConfigStringDictionary
576: initforeach @730
SleepMS(5);
577: 5L
578: Func(3,0): Sleepms
579: #
if( RandomDiceRoll( "1d100+1" ) <= CInt( entry ))
580: "1d100+1"
581: Func(4,0): RandomDiceRoll
582: local #6
583: Func(0,2): CInt
584: <=
585: if false goto 730
var group_elem := group_cfg[CStr( _entry_iter )];
586: decl local #0
587: local #4
588: local #8
589: Func(0,6): CStr
590: [] 1
591: :=
592: #
if( !group_elem )
593: local #9
594: if true goto 608
PrintTextAbove( mobile, "equipGroups.cfg elem ["+_entry_iter+"] does not exist.
595: local #2
596: "equipGroups.cfg elem ["
597: local #8
598: +
599: "] does not exist."
600: +
601: 3L
602: 1000L
603: 0L
604: Func(2,11): PrintTextAbove
605: #
continue;
606: leave block(1)
607: goto730
var item_list := array{};
608: decl local #1
609: array
610: :=
611: #
if( !flags )
612: local #0
613: if true goto 628
var temp := GetConfigStringArray( group_elem, "Item" );
614: decl local #0
615: local #9
616: "Item"
617: Func(6,2): GetConfigStringArray
618: :=
619: #
if( temp )
620: local #11
621: if false goto 626
item_list += temp;
622: local #10
623: local #11
624: +=
625: #
626: leave block(1)
627: goto663
elseif( flags & EQUIP_MALE )
628: local #0
629: 1L
630: &
631: if false goto 646
var temp := GetConfigStringArray( group_elem, "Male" );
632: decl local #0
633: local #9
634: "Male"
635: Func(6,2): GetConfigStringArray
636: :=
637: #
if( temp )
638: local #11
639: if false goto 644
item_list += temp;
640: local #10
641: local #11
642: +=
643: #
644: leave block(1)
645: goto663
elseif( flags & EQUIP_FEMALE )
646: local #0
647: 2L
648: &
649: if false goto 663
var temp := GetConfigStringArray( group_elem, "Female" );
650: decl local #0
651: local #9
652: "Female"
653: Func(6,2): GetConfigStringArray
654: :=
655: #
if( temp )
656: local #11
657: if false goto 662
item_list += temp;
658: local #10
659: local #11
660: +=
661: #
662: leave block(1)
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, item_list.Rando
663: decl local #2
664: local #2
665: get member id 'x' (0)
666: local #2
667: get member id 'y' (1)
668: local #2
669: get member id 'z' (2)
670: local #10
671: Call Method id randomentry (#101, 0 params)
672: 1L
673: local #2
674: get member id 'realm' (112)
675: Func(2,24): CreateItemAtLocation
676: :=
677: #
if( item.errortext )
678: local #11
679: get member 'errortext'
680: if false goto 698
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
681: local #2
682: "Error could not create <"
683: local #8
684: +
685: "> -->"
686: +
687: local #11
688: get member 'errortext'
689: +
690: 3L
691: 1000L
692: 0L
693: Func(2,11): PrintTextAbove
694: #
continue;
695: leave block(3)
696: goto730
697: goto719
elseif( !EquipItem( mobile, item ))
698: local #2
699: local #11
700: Func(2,25): EquipItem
701: if true goto 719
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
702: local #2
703: "Unable to equip - "
704: local #11
705: get member id 'desc' (19)
706: +
707: " - destroying."
708: +
709: 3L
710: 1000L
711: 0L
712: Func(2,11): PrintTextAbove
713: #
DestroyItem( item );
714: local #11
715: Func(2,26): DestroyItem
716: #
continue;
717: leave block(3)
718: goto730
SetObjProperty( item, "NoLoot", 1 );
719: local #11
720: "NoLoot"
721: 1L
722: Func(2,6): SetObjProperty
723: #
IDItem( mobile, item );
724: local #2
725: local #11
726: makelocal
727: jmp userfunc @966
728: #
729: leave block(3)
730: stepforeach @577
731: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipItem" ))
732: local #5
733: "EquipItem"
734: Func(6,3): GetConfigStringDictionary
735: initforeach @809
SleepMS(5);
736: 5L
737: Func(3,0): Sleepms
738: #
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, _entry_iter, 1,
739: decl local #0
740: local #2
741: get member id 'x' (0)
742: local #2
743: get member id 'y' (1)
744: local #2
745: get member id 'z' (2)
746: local #8
747: 1L
748: local #2
749: get member id 'realm' (112)
750: Func(2,24): CreateItemAtLocation
751: :=
752: #
if( item.errortext )
753: local #9
754: get member 'errortext'
755: if false goto 773
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
756: local #2
757: "Error could not create <"
758: local #8
759: +
760: "> -->"
761: +
762: local #9
763: get member 'errortext'
764: +
765: 3L
766: 1000L
767: 0L
768: Func(2,11): PrintTextAbove
769: #
continue;
770: leave block(1)
771: goto809
772: goto794
elseif( !EquipItem( mobile, item ))
773: local #2
774: local #9
775: Func(2,25): EquipItem
776: if true goto 794
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
777: local #2
778: "Unable to equip - "
779: local #9
780: get member id 'desc' (19)
781: +
782: " - destroying."
783: +
784: 3L
785: 1000L
786: 0L
787: Func(2,11): PrintTextAbove
788: #
DestroyItem( item );
789: local #9
790: Func(2,26): DestroyItem
791: #
continue;
792: leave block(1)
793: goto809
item.color := CInt( entry );
794: local #9
795: local #6
796: Func(0,2): CInt
797: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
798: local #9
799: "NoLoot"
800: 1L
801: Func(2,6): SetObjProperty
802: #
IDItem( mobile, item );
803: local #2
804: local #9
805: makelocal
806: jmp userfunc @966
807: #
808: leave block(1)
809: stepforeach @736
810: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipMount" ))
811: local #5
812: "EquipMount"
813: Func(6,3): GetConfigStringDictionary
814: initforeach @854
SleepMS(5);
815: 5L
816: Func(3,0): Sleepms
817: #
var item := MP_Mount( mobile, _entry_iter );
818: decl local #0
819: local #2
820: local #8
821: makelocal
822: jmp userfunc @1078
823: :=
824: #
if( item.errortext )
825: local #9
826: get member 'errortext'
827: if false goto 844
PrintTextAbove( mobile, "Error could not mount <"+_entry_iter+"> -->"+item.erro
828: local #2
829: "Error could not mount <"
830: local #8
831: +
832: "> -->"
833: +
834: local #9
835: get member 'errortext'
836: +
837: 3L
838: 1000L
839: 0L
840: Func(2,11): PrintTextAbove
841: #
continue;
842: leave block(1)
843: goto854
item.color := CInt( entry );
844: local #9
845: local #6
846: Func(0,2): CInt
847: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
848: local #9
849: "NoLoot"
850: 1L
851: Func(2,6): SetObjProperty
852: #
853: leave block(1)
854: stepforeach @815
855: leave block(3)
return 1;
856: 1L
857: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 49
function SetMobileProtections( mobile, protections )
858: pop param 'protections'
859: pop param 'mobile'
return SetObjProperty( mobile, "Protections", protections );
860: local #1
861: "Protections"
862: local #0
863: Func(2,6): SetObjProperty
864: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
865: pop param 'no_wake'
866: pop param 'percent_subtract'
867: pop param 'distance_start'
868: pop param 'y'
869: pop param 'x'
870: pop param 'npc'
var ev		:= struct;
871: decl local #6
872: struct
873: :=
874: #
ev.+type	:= NPCEVENT_ANCHOR;
875: local #6
876: "type"
877: .+
878: 10485781L
879: := #
ev.+x		:= x;
880: local #6
881: "x"
882: .+
883: local #4
884: := #
ev.+y		:= y;
885: local #6
886: "y"
887: .+
888: local #3
889: := #
ev.+distance	:= distance_start;
890: local #6
891: "distance"
892: .+
893: local #2
894: := #
ev.+percent	:= percent_subtract;
895: local #6
896: "percent"
897: .+
898: local #1
899: := #
ev.+WakeUp	:= no_wake;
900: local #6
901: "WakeUp"
902: .+
903: local #0
904: := #
ev.+process	:= GetProcess( GetPid() );
905: local #6
906: "process"
907: .+
908: Func(3,4): GetPid
909: Func(3,3): GetProcess
910: := #
return SendEvent( npc, ev );
911: local #5
912: local #6
913: Func(2,21): SendEvent
914: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 32
function GetObjProtections( mobile )
915: pop param 'mobile'
var protections := GetObjProperty( mobile, "Protections" );
916: decl local #1
917: local #0
918: "Protections"
919: Func(2,7): GetObjProperty
920: :=
921: #
if( !protections )
922: local #1
923: if true goto 926
protections := struct;
924: struct
925: local1 := 
return protections;
926: local #1
927: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 12
function GetProtections()
var protections := array{   "AirProtection",
928: decl local #0
929: array
930: "AirProtection"
931: init{}
932: "EarthProtection"
933: init{}
934: "FireProtection"
935: init{}
936: "WaterProtection"
937: init{}
938: "HolyProtection"
939: init{}
940: "NecroProtection"
941: init{}
942: "PoisonProtection"
943: init{}
944: "PermPoisonProtection"
945: init{}
946: "MagicProtection"
947: init{}
948: "PermMagicProtection"
949: init{}
950: "PhysicalProtection"
951: init{}
952: "SpellReflection"
953: init{}
954: "PermSpellReflection"
955: init{}
956: "FreeAction"
957: init{}
958: "HealingIncrease"
959: init{}
960: "AcidProtection"
961: init{}
962: :=
963: #
return protections;
964: local #0
965: return
c:/ZH099/pkg/skills/mage/itemid/include/itemID.inc, Line 16
function IDItem( mobile, item )
966: pop param 'item'
967: pop param 'mobile'
var charges := GetObjProperty( item, "Charges" ),
968: decl local #2
969: local #0
970: "Charges"
971: Func(2,7): GetObjProperty
972: :=
973: #
974: decl local #3
975: local #0
976: "ChanceOfEffect"
977: Func(2,7): GetObjProperty
978: :=
979: #
980: decl local #4
981: local #0
982: "PoisonLevel"
983: Func(2,7): GetObjProperty
984: :=
985: #
if( GetObjProperty( item, "UnIDedMagicalItem" ) ||
986: local #0
987: "UnIDedMagicalItem"
988: Func(2,7): GetObjProperty
989: local #0
990: "IsGMItem"
991: Func(2,7): GetObjProperty
992: ||
993: local #0
994: "EnchantColor"
995: Func(2,7): GetObjProperty
996: ||
997: if false goto 1002
NameByEnchant( item );
998: local #0
999: makelocal
1000: jmp userfunc @1191
1001: #
if( item.container.IsA( POLCLASS_CORPSE ) && GetObjProperty( item.container, "n
1002: local #0
1003: get member id 'container' (15)
1004: 7L
1005: Call Method id isa (#0, 1 params)
1006: local #0
1007: get member id 'container' (15)
1008: "npctemplate"
1009: Func(2,7): GetObjProperty
1010: &&
1011: if false goto 1021
PrintTextAbove( item.container, item.desc );
1012: local #0
1013: get member id 'container' (15)
1014: local #0
1015: get member id 'desc' (19)
1016: 3L
1017: 1000L
1018: 0L
1019: Func(2,11): PrintTextAbove
1020: #
SendSysMessage( mobile, "It appears to be "+item.desc+"." );
1021: local #1
1022: "It appears to be "
1023: local #0
1024: get member id 'desc' (19)
1025: +
1026: "."
1027: +
1028: 3L
1029: 1000L
1030: Func(2,10): SendSysMessage
1031: #
if( charges )
1032: local #2
1033: if false goto 1045
SendSysMessage( mobile, "There is "+charges+" charges left." );
1034: local #1
1035: "There is "
1036: local #2
1037: +
1038: " charges left."
1039: +
1040: 3L
1041: 1000L
1042: Func(2,10): SendSysMessage
1043: #
1044: goto1070
elseif( chance_effect )
1045: local #3
1046: if false goto 1058
SendSysMessage( mobile, "It has "+chance_effect+"% chances of effects," );
1047: local #1
1048: "It has "
1049: local #3
1050: +
1051: "% chances of effects,"
1052: +
1053: 3L
1054: 1000L
1055: Func(2,10): SendSysMessage
1056: #
1057: goto1070
elseif( poison_lvl )
1058: local #4
1059: if false goto 1070
SendSysMessage( mobile, "Cursed with poison level "+poison_lvl+"." );
1060: local #1
1061: "Cursed with poison level "
1062: local #4
1063: +
1064: "."
1065: +
1066: 3L
1067: 1000L
1068: Func(2,10): SendSysMessage
1069: #
SetObjProperty( item, "IDed", mobile.serial );
1070: local #0
1071: "IDed"
1072: local #1
1073: get member id 'serial' (6)
1074: Func(2,6): SetObjProperty
1075: #
return 1;
1076: 1L
1077: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 98
function MP_Mount( mobile, npc )
1078: pop param 'npc'
1079: pop param 'mobile'
mobile.graphic := 400 + mobile.gender;
1080: local #1
1081: 400L
1082: local #1
1083: get member id 'gender' (28)
1084: +
1085: set member id 'graphic' (5) #
var mount_piece := MP_GetMount( mobile );
1086: decl local #2
1087: local #1
1088: makelocal
1089: jmp userfunc @2187
1090: :=
1091: #
if( mount_piece )
1092: local #2
1093: if false goto 1098
return error{"errortext":="Mobile is already mounted."};
1094: error
1095: "Mobile is already mounted."
1096: addmember-assign(errortext)
1097: return
var mount_graphic := MP_GetMountGraphic( npc );
1098: decl local #3
1099: local #0
1100: makelocal
1101: jmp userfunc @2204
1102: :=
1103: #
if( !mount_graphic )
1104: local #3
1105: if true goto 1108
return mount_graphic;
1106: local #3
1107: return
mount_piece := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "MountPiece"
1108: local #1
1109: get member id 'x' (0)
1110: local #1
1111: get member id 'y' (1)
1112: local #1
1113: get member id 'z' (2)
1114: "MountPiece"
1115: 1L
1116: "britannia"
1117: Func(2,24): CreateItemAtLocation
1118: local2 := 
mount_piece.graphic := mount_graphic;
1119: local #2
1120: local #3
1121: set member id 'graphic' (5) #
mount_piece.color := npc.color;
1122: local #2
1123: local #0
1124: get member id 'color' (7)
1125: set member id 'color' (7) #
SetName( mount_piece, npc.name );
1126: local #2
1127: local #0
1128: get member id 'name' (3)
1129: Func(2,18): SetName
1130: #
SetObjProperty( mount_piece, "serial", npc.serial );
1131: local #2
1132: "serial"
1133: local #0
1134: get member id 'serial' (6)
1135: Func(2,6): SetObjProperty
1136: #
SetObjProperty( mount_piece, "color", npc.color );
1137: local #2
1138: "color"
1139: local #0
1140: get member id 'color' (7)
1141: Func(2,6): SetObjProperty
1142: #
var result := EquipItem( mobile, mount_piece );
1143: decl local #4
1144: local #1
1145: local #2
1146: Func(2,25): EquipItem
1147: :=
1148: #
if( !result )
1149: local #4
1150: if true goto 1157
DestroyItem( mount_piece );
1151: local #2
1152: Func(2,26): DestroyItem
1153: #
return result;
1154: local #4
1155: return
1156: goto1160
mount_piece.movable := 0;
1157: local #2
1158: 0L
1159: set member id 'movable' (20) #
mobile.facing := npc.facing;
1160: local #1
1161: local #0
1162: get member id 'facing' (9)
1163: set member id 'facing' (9) #
MoveObjectToLocation( npc, 5140, 1773, 0, "britannia", MOVEOBJECT_FORCELOCATION
1164: local #0
1165: 5140L
1166: 1773L
1167: 0L
1168: "britannia"
1169: 1073741824L
1170: Func(2,27): MoveObjectToLocation
1171: #
SetObjProperty( npc, "mounted", 1 );
1172: local #0
1173: "mounted"
1174: 1L
1175: Func(2,6): SetObjProperty
1176: #
SetObjProperty( npc, "MustSleep", mobile.serial );
1177: local #0
1178: "MustSleep"
1179: local #1
1180: get member id 'serial' (6)
1181: Func(2,6): SetObjProperty
1182: #
npc.hidden := 1;
1183: local #0
1184: 1L
1185: set member id 'hidden' (32) #
npc.frozen := 1;
1186: local #0
1187: 1L
1188: set member id 'frozen' (34) #
return mount_piece;
1189: local #2
1190: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 21
function NameByEnchant( item )
1191: pop param 'item'
EraseObjProperty( item, "UnIDedMagicalItem" );
1192: local #0
1193: "UnIDedMagicalItem"
1194: Func(2,17): EraseObjProperty
1195: #
var base_name := GetObjProperty( item, "BaseName" );
1196: decl local #1
1197: local #0
1198: "BaseName"
1199: Func(2,7): GetObjProperty
1200: :=
1201: #
if( !base_name )
1202: local #1
1203: if true goto 1223
var item_cfg := ReadConfigFile( ":*:itemdesc" ),
1204: decl local #0
1205: ":*:itemdesc"
1206: Func(6,0): ReadConfigFile
1207: :=
1208: #
1209: decl local #1
1210: local #2
1211: local #0
1212: get member id 'objtype' (4)
1213: [] 1
1214: get member id 'desc' (19)
1215: :=
1216: #
SetName( item, item_name );
1217: local #0
1218: local #3
1219: Func(2,18): SetName
1220: #
1221: leave block(2)
1222: goto1227
SetName( item, base_name );
1223: local #0
1224: local #1
1225: Func(2,18): SetName
1226: #
var enchanted_name := GetObjProperty( item, "Enchanted" );;
1227: decl local #2
1228: local #0
1229: "Enchanted"
1230: Func(2,7): GetObjProperty
1231: :=
1232: #
if( enchanted_name )
1233: local #2
1234: if false goto 1244
SetName( item, enchanted_name+" "+item.desc );
1235: local #0
1236: local #2
1237: " "
1238: +
1239: local #0
1240: get member id 'desc' (19)
1241: +
1242: Func(2,18): SetName
1243: #
var enchanted_color := GetObjProperty( item, "EnchantColor" );
1244: decl local #3
1245: local #0
1246: "EnchantColor"
1247: Func(2,7): GetObjProperty
1248: :=
1249: #
if( enchanted_color )
1250: local #3
1251: if false goto 1259
item.color := enchanted_color;
1252: local #0
1253: local #3
1254: set member id 'color' (7) #
EraseObjProperty( item, "EnchantColor" );
1255: local #0
1256: "EnchantColor"
1257: Func(2,17): EraseObjProperty
1258: #
var isGMItem := GetObjProperty( item, "IsGMItem" );
1259: decl local #4
1260: local #0
1261: "IsGMItem"
1262: Func(2,7): GetObjProperty
1263: :=
1264: #
if( isGMItem )
1265: local #4
1266: if false goto 1273
SetName( item, isGMItem );
1267: local #0
1268: local #4
1269: Func(2,18): SetName
1270: #
return 1;
1271: 1L
1272: return
var hitScript := GetObjProperty( item, "HitScriptNumber" );
1273: decl local #5
1274: local #0
1275: "HitScriptNumber"
1276: Func(2,7): GetObjProperty
1277: :=
1278: #
if( hitScript )
1279: local #5
1280: if false goto 1286
RenameByHitscript( item, hitScript );
1281: local #0
1282: local #5
1283: makelocal
1284: jmp userfunc @1615
1285: #
var onHitScript := GetObjProperty( item, "OnHitScriptNumber" );
1286: decl local #6
1287: local #0
1288: "OnHitScriptNumber"
1289: Func(2,7): GetObjProperty
1290: :=
1291: #
if( onHitScript )
1292: local #6
1293: if false goto 1299
RenameByOnHitscript( item, onHitScript );
1294: local #0
1295: local #6
1296: makelocal
1297: jmp userfunc @1740
1298: #
var dmg_mode := item.dmg_mod;
1299: decl local #7
1300: local #0
1301: get member id 'dmg_mod' (91)
1302: :=
1303: #
if( dmg_mode )
1304: local #7
1305: if false goto 1312
RenameByMod( item, "Damage", dmg_mode );
1306: local #0
1307: "Damage"
1308: local #7
1309: makelocal
1310: jmp userfunc @1701
1311: #
var ar_mode := item.ar_mod;
1312: decl local #8
1313: local #0
1314: get member id 'ar_mod' (31)
1315: :=
1316: #
if( ar_mode )
1317: local #8
1318: if false goto 1325
RenameByMod( item, "Ar", ar_mode );
1319: local #0
1320: "Ar"
1321: local #8
1322: makelocal
1323: jmp userfunc @1701
1324: #
var ar_bonus := GetObjProperty( item, "ArBonus" );
1325: decl local #9
1326: local #0
1327: "ArBonus"
1328: Func(2,7): GetObjProperty
1329: :=
1330: #
if( ar_bonus )
1331: local #9
1332: if false goto 1342
RenameByMod( item, "ArBonus", CInt( ar_bonus * 5 ));
1333: local #0
1334: "ArBonus"
1335: local #9
1336: 5L
1337: *
1338: Func(0,2): CInt
1339: makelocal
1340: jmp userfunc @1701
1341: #
var hp_mode := item.maxhp_mod;
1342: decl local #10
1343: local #0
1344: get member id 'maxhp_mod' (89)
1345: :=
1346: #
if( hp_mode )
1347: local #10
1348: if false goto 1358
RenameByMod( item, "MaxHP", CInt( hp_mode / 2 ));
1349: local #0
1350: "MaxHP"
1351: local #10
1352: 2L
1353: /
1354: Func(0,2): CInt
1355: makelocal
1356: jmp userfunc @1701
1357: #
var skill_mod := GetEquipmentModifiers( item );
1358: decl local #11
1359: local #0
1360: 4L
1361: makelocal
1362: jmp userfunc @2082
1363: :=
1364: #
if( skill_mod.Size() )
1365: local #11
1366: Call Method id size (#48, 0 params)
1367: if false goto 1389
var skill_keys := skill_mod.Keys();
1368: decl local #0
1369: local #11
1370: Call Method id keys (#56, 0 params)
1371: :=
1372: #
foreach modifier in skill_keys
1373: local #12
1374: initforeach @1386
RenameByAttriMod( item, modifier, skill_mod[modifier] );
1375: local #0
1376: local #13
1377: local #11
1378: local #13
1379: [] 1
1380: makelocal
1381: jmp userfunc @1575
1382: #
SleepMS(5);
1383: 5L
1384: Func(3,0): Sleepms
1385: #
1386: stepforeach @1375
1387: leave block(3)
1388: leave block(1)
foreach protection in immunities
1389: global #2
1390: initforeach @1409
var mobile_prot := GetObjProperty( item, protection );
1391: decl local #0
1392: local #0
1393: local #12
1394: Func(2,7): GetObjProperty
1395: :=
1396: #
if( mobile_prot )
1397: local #15
1398: if false goto 1405
RenameByImmunity( item, protection, mobile_prot );
1399: local #0
1400: local #12
1401: local #15
1402: makelocal
1403: jmp userfunc @1676
1404: #
SleepMS(5);
1405: 5L
1406: Func(3,0): Sleepms
1407: #
1408: leave block(1)
1409: stepforeach @1391
1410: leave block(3)
foreach prot in wardings
1411: global #3
1412: initforeach @1430
var charges := GetObjProperty( item, prot );
1413: decl local #0
1414: local #0
1415: local #12
1416: Func(2,7): GetObjProperty
1417: :=
1418: #
if( charges )
1419: local #15
1420: if false goto 1426
RenameByWardings( item, prot );
1421: local #0
1422: local #12
1423: makelocal
1424: jmp userfunc @1801
1425: #
SleepMS(5);
1426: 5L
1427: Func(3,0): Sleepms
1428: #
1429: leave block(1)
1430: stepforeach @1413
1431: leave block(3)
foreach mod in regenerations
1432: global #4
1433: initforeach @1452
var mobile_mod := GetObjProperty( item, mod );
1434: decl local #0
1435: local #0
1436: local #12
1437: Func(2,7): GetObjProperty
1438: :=
1439: #
if( mobile_mod )
1440: local #15
1441: if false goto 1448
RenameByImmunity( item, mod, mobile_mod );
1442: local #0
1443: local #12
1444: local #15
1445: makelocal
1446: jmp userfunc @1676
1447: #
SleepMS(5);
1448: 5L
1449: Func(3,0): Sleepms
1450: #
1451: leave block(1)
1452: stepforeach @1434
1453: leave block(3)
return 1;
1454: 1L
1455: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1456: pop param 'template'
if( !template.package )
1457: local #0
1458: get member 'package'
1459: if true goto 1464
template := NPC_ParseTemplateName( template );
1460: local #0
1461: makelocal
1462: jmp userfunc @1513
1463: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1464: decl local #1
1465: ":"
1466: local #0
1467: get member 'package'
1468: +
1469: ":npcdesc"
1470: +
1471: Func(6,0): ReadConfigFile
1472: :=
1473: #
if( npc_cfg.errortext )
1474: local #1
1475: get member 'errortext'
1476: if false goto 1489
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1477: error
1478: "Error::NPC_GetNPCConfig() - Could not open :"
1479: local #0
1480: get member 'package'
1481: +
1482: ":npcdesc ->"
1483: +
1484: local #1
1485: get member 'errortext'
1486: +
1487: addmember-assign(errortext)
1488: return
var cfg_elem := npc_cfg[template.template];
1489: decl local #2
1490: local #1
1491: local #0
1492: get member 'template'
1493: [] 1
1494: :=
1495: #
if( cfg_elem.errortext )
1496: local #2
1497: get member 'errortext'
1498: if false goto 1511
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1499: error
1500: "Error::NPC_GetNPCConfig() - Could not find elem ["
1501: local #0
1502: get member 'template'
1503: +
1504: "] ->"
1505: +
1506: local #2
1507: get member 'errortext'
1508: +
1509: addmember-assign(errortext)
1510: return
return cfg_elem;
1511: local #2
1512: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1513: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1514: local #0
1515: 4L
1516: Call Method id isa (#0, 1 params)
1517: if false goto 1521
template_name := template_name.npctemplate;
1518: local #0
1519: get member id 'npctemplate' (62)
1520: local0 := 
var colon_a := Find( template_name, ":", 1 );
1521: decl local #1
1522: local #0
1523: ":"
1524: 1L
1525: Func(0,9): Find
1526: :=
1527: #
var colon_b := Find( template_name, ":", 2 );
1528: decl local #2
1529: local #0
1530: ":"
1531: 2L
1532: Func(0,9): Find
1533: :=
1534: #
var parsed := struct{"package", "template"};
1535: decl local #3
1536: struct
1537: addmember(package)
1538: addmember(template)
1539: :=
1540: #
if( !colon_a || !colon_b )
1541: local #1
1542: !
1543: local #2
1544: !
1545: ||
1546: if false goto 1554
parsed.package := "";
1547: local #3
1548: ""
1549: set member 'package' #
parsed.template := template_name;
1550: local #3
1551: local #0
1552: set member 'template' #
1553: goto1573
parsed.package := template_name[colon_a+1, colon_b-2];
1554: local #3
1555: local #0
1556: local #1
1557: 1L
1558: +
1559: local #2
1560: 2L
1561: -
1562: [,]
1563: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1564: local #3
1565: local #0
1566: local #2
1567: 1L
1568: +
1569: local #0
1570: Func(0,5): Len
1571: [,]
1572: set member 'template' #
return parsed;
1573: local #3
1574: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 175
function RenameByAttriMod( item, attribute, value )
1575: pop param 'value'
1576: pop param 'attribute'
1577: pop param 'item'
if( !value )
1578: local #0
1579: if true goto 1582
return 0;
1580: 0L
1581: return
if( attribute in AP_ListAttributesByType( "Stat" ))
1582: local #1
1583: "Stat"
1584: makelocal
1585: jmp userfunc @2008
1586: in
1587: if false goto 1593
value := CInt( value / 5 );
1588: local #0
1589: 5L
1590: /
1591: Func(0,2): CInt
1592: local0 := 
var mod_elem := GetEnchantmentElem( item, attribute );
1593: decl local #3
1594: local #2
1595: local #1
1596: makelocal
1597: jmp userfunc @2033
1598: :=
1599: #
var name := CStr ( "Name"+value );
1600: decl local #4
1601: "Name"
1602: local #0
1603: +
1604: Func(0,6): CStr
1605: :=
1606: #
SetAdjective( item, mod_elem, name );
1607: local #2
1608: local #3
1609: local #4
1610: makelocal
1611: jmp userfunc @1818
1612: #
return 1;
1613: 1L
1614: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 118
function RenameByHitscript( item, hitScript )
1615: pop param 'hitScript'
1616: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_hit" );
1617: decl local #2
1618: ":loot:effects_hit"
1619: Func(6,0): ReadConfigFile
1620: :=
1621: #
if( enchantment_cfg.errortext )
1622: local #2
1623: get member 'errortext'
1624: if false goto 1637
PrintTextAbove( item, "Error reading config <:loot:effects_hit> -->"+enchantmen
1625: local #1
1626: "Error reading config <:loot:effects_hit> -->"
1627: local #2
1628: get member 'errortext'
1629: +
1630: 3L
1631: 1000L
1632: 0L
1633: Func(2,11): PrintTextAbove
1634: #
return 0;
1635: 0L
1636: return
var chant_elem := FindConfigElem( enchantment_cfg, hitScript );
1637: decl local #3
1638: local #2
1639: local #0
1640: Func(6,5): FindConfigElem
1641: :=
1642: #
if( chant_elem.errortext )
1643: local #3
1644: get member 'errortext'
1645: if false goto 1662
PrintTextAbove( item, "Error reading chant_elem <"+hitScript+"> -->"+chant_elem
1646: local #1
1647: "Error reading chant_elem <"
1648: local #0
1649: +
1650: "> -->"
1651: +
1652: local #3
1653: get member 'errortext'
1654: +
1655: 3L
1656: 1000L
1657: 0L
1658: Func(2,11): PrintTextAbove
1659: #
return 0;
1660: 0L
1661: return
SetAdjective( item, chant_elem, "Name" );
1662: local #1
1663: local #3
1664: "Name"
1665: makelocal
1666: jmp userfunc @1818
1667: #
SetObjProperty( item, "HitScript", chant_elem.HitScript );
1668: local #1
1669: "HitScript"
1670: local #3
1671: get member id 'hitscript' (94)
1672: Func(2,6): SetObjProperty
1673: #
return 1;
1674: 1L
1675: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 210
function RenameByImmunity( item, immunity, power )
1676: pop param 'power'
1677: pop param 'immunity'
1678: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1679: decl local #3
1680: local #2
1681: local #1
1682: makelocal
1683: jmp userfunc @2033
1684: :=
1685: #
var name := CStr( "Name"+power );
1686: decl local #4
1687: "Name"
1688: local #0
1689: +
1690: Func(0,6): CStr
1691: :=
1692: #
SetAdjective( item, immunity_elem, name );
1693: local #2
1694: local #3
1695: local #4
1696: makelocal
1697: jmp userfunc @1818
1698: #
return 1;
1699: 1L
1700: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 193
function RenameByMod( item, mod, value )
1701: pop param 'value'
1702: pop param 'mod'
1703: pop param 'item'
if( !value )
1704: local #0
1705: if true goto 1708
return 0;
1706: 0L
1707: return
var mod_elem := GetEnchantmentElem( item, mod );
1708: decl local #3
1709: local #2
1710: local #1
1711: makelocal
1712: jmp userfunc @2033
1713: :=
1714: #
var temp := CInt( value / 5 );
1715: decl local #4
1716: local #0
1717: 5L
1718: /
1719: Func(0,2): CInt
1720: :=
1721: #
if( temp )
1722: local #4
1723: if false goto 1738
var name := CStr( "Name"+temp );
1724: decl local #0
1725: "Name"
1726: local #4
1727: +
1728: Func(0,6): CStr
1729: :=
1730: #
SetAdjective( item, mod_elem, name );
1731: local #2
1732: local #3
1733: local #5
1734: makelocal
1735: jmp userfunc @1818
1736: #
1737: leave block(1)
return 1;
1738: 1L
1739: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 138
function RenameByOnHitscript( item, onHitScript )
1740: pop param 'onHitScript'
1741: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_onhit" );
1742: decl local #2
1743: ":loot:effects_onhit"
1744: Func(6,0): ReadConfigFile
1745: :=
1746: #
if( enchantment_cfg.errortext )
1747: local #2
1748: get member 'errortext'
1749: if false goto 1762
PrintTextAbove( item, "Error reading config <:loot:effects_onhit> -->"+enchantm
1750: local #1
1751: "Error reading config <:loot:effects_onhit> -->"
1752: local #2
1753: get member 'errortext'
1754: +
1755: 3L
1756: 1000L
1757: 0L
1758: Func(2,11): PrintTextAbove
1759: #
return 0;
1760: 0L
1761: return
var chant_elem := FindConfigElem( enchantment_cfg, onHitScript );
1762: decl local #3
1763: local #2
1764: local #0
1765: Func(6,5): FindConfigElem
1766: :=
1767: #
if( chant_elem.errortext )
1768: local #3
1769: get member 'errortext'
1770: if false goto 1787
PrintTextAbove( item, "Error reading chant_elem <"+onHitScript+"> -->"+chant_el
1771: local #1
1772: "Error reading chant_elem <"
1773: local #0
1774: +
1775: "> -->"
1776: +
1777: local #3
1778: get member 'errortext'
1779: +
1780: 3L
1781: 1000L
1782: 0L
1783: Func(2,11): PrintTextAbove
1784: #
return 0;
1785: 0L
1786: return
SetAdjective( item, chant_elem, "Name" );
1787: local #1
1788: local #3
1789: "Name"
1790: makelocal
1791: jmp userfunc @1818
1792: #
SetObjProperty( item, "OnHitScript", chant_elem.OnHitScript );
1793: local #1
1794: "OnHitScript"
1795: local #3
1796: get member id 'onhitscript' (96)
1797: Func(2,6): SetObjProperty
1798: #
return 1;
1799: 1L
1800: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 220
function RenameByWardings( item, immunity )
1801: pop param 'immunity'
1802: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1803: decl local #2
1804: local #1
1805: local #0
1806: makelocal
1807: jmp userfunc @2033
1808: :=
1809: #
SetAdjective( item, immunity_elem, "Name" );
1810: local #1
1811: local #2
1812: "Name"
1813: makelocal
1814: jmp userfunc @1818
1815: #
return 1;
1816: 1L
1817: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 229
function SetAdjective( item, elem, value )
1818: pop param 'value'
1819: pop param 'elem'
1820: pop param 'item'
var colorkey := "Color";
1821: decl local #3
1822: "Color"
1823: :=
1824: #
if( GetObjProperty( item, "Cursed" ))
1825: local #2
1826: "Cursed"
1827: Func(2,7): GetObjProperty
1828: if false goto 1837
value := "C"+value;
1829: "C"
1830: local #0
1831: +
1832: local0 := 
colorkey := "C"+colorkey;
1833: "C"
1834: local #3
1835: +
1836: local3 := 
var position := GetConfigString( elem, "Place" );
1837: decl local #4
1838: local #1
1839: "Place"
1840: Func(6,6): GetConfigString
1841: :=
1842: #
if( position.errortext )
1843: local #4
1844: get member 'errortext'
1845: if false goto 1858
PrintTextAbove( item, "Error reading position <Place> -->"+position.errortext )
1846: local #2
1847: "Error reading position <Place> -->"
1848: local #4
1849: get member 'errortext'
1850: +
1851: 3L
1852: 1000L
1853: 0L
1854: Func(2,11): PrintTextAbove
1855: #
return 0;
1856: 0L
1857: return
var adjective := GetConfigString( elem, value );
1858: decl local #5
1859: local #1
1860: local #0
1861: Func(6,6): GetConfigString
1862: :=
1863: #
if( adjective.errortext )
1864: local #5
1865: get member 'errortext'
1866: if false goto 1883
PrintTextAbove( item, "Error reading adjective <"+value+"> -->"+adjective.error
1867: local #2
1868: "Error reading adjective <"
1869: local #0
1870: +
1871: "> -->"
1872: +
1873: local #5
1874: get member 'errortext'
1875: +
1876: 3L
1877: 1000L
1878: 0L
1879: Func(2,11): PrintTextAbove
1880: #
return 0;
1881: 0L
1882: return
if( position == "Prefix" )
1883: local #4
1884: "Prefix"
1885: ==
1886: if false goto 1900
SetName( item, Lower( adjective+" "+TruncateArticle( item.desc )));
1887: local #2
1888: local #5
1889: " "
1890: +
1891: local #2
1892: get member id 'desc' (19)
1893: makelocal
1894: jmp userfunc @1937
1895: +
1896: Func(0,3): Lower
1897: Func(2,18): SetName
1898: #
1899: goto1912
SetName( item, Lower( TruncateArticle( item.desc )+" "+adjective ));
1900: local #2
1901: local #2
1902: get member id 'desc' (19)
1903: makelocal
1904: jmp userfunc @1937
1905: " "
1906: +
1907: local #5
1908: +
1909: Func(0,3): Lower
1910: Func(2,18): SetName
1911: #
SetName( item, AddArticle( item.desc ));
1912: local #2
1913: local #2
1914: get member id 'desc' (19)
1915: makelocal
1916: jmp userfunc @1975
1917: Func(2,18): SetName
1918: #
var color_elem := GetConfigString( elem, colorkey );
1919: decl local #6
1920: local #1
1921: local #3
1922: Func(6,6): GetConfigString
1923: :=
1924: #
var color_item := CInt( color_elem );
1925: decl local #7
1926: local #6
1927: Func(0,2): CInt
1928: :=
1929: #
if( color_item )
1930: local #7
1931: if false goto 1935
item.color := color_item;
1932: local #2
1933: local #7
1934: set member id 'color' (7) #
return 1;
1935: 1L
1936: return
c:/ZH099/scripts/include/string.inc, Line 22
function TruncateArticle( text )
1937: pop param 'text'
text := CStr(text);
1938: local #0
1939: Func(0,6): CStr
1940: local0 := 
var i := Len(text);
1941: decl local #1
1942: local #0
1943: Func(0,5): Len
1944: :=
1945: #
if ( Lower(text[1, 2]) == "a " )
1946: local #0
1947: 1L
1948: 2L
1949: [,]
1950: Func(0,3): Lower
1951: "a "
1952: ==
1953: if false goto 1960
text := text[3, i];
1954: local #0
1955: 3L
1956: local #1
1957: [,]
1958: local0 := 
1959: goto1973
elseif ( Lower(text[1, 3]) == "an " )
1960: local #0
1961: 1L
1962: 3L
1963: [,]
1964: Func(0,3): Lower
1965: "an "
1966: ==
1967: if false goto 1973
text := text[4, i];
1968: local #0
1969: 4L
1970: local #1
1971: [,]
1972: local0 := 
return text;
1973: local #0
1974: return
c:/ZH099/scripts/include/string.inc, Line 35
function AddArticle( text )
1975: pop param 'text'
var vowels := array{"a", "e", "i", "o", "u"};
1976: decl local #1
1977: array
1978: "a"
1979: init{}
1980: "e"
1981: init{}
1982: "i"
1983: init{}
1984: "o"
1985: init{}
1986: "u"
1987: init{}
1988: :=
1989: #
if ( Lower(text[1]) in vowels )
1990: local #0
1991: 1L
1992: [] 1
1993: Func(0,3): Lower
1994: local #1
1995: in
1996: if false goto 2002
text := "an "+text;
1997: "an "
1998: local #0
1999: +
2000: local0 := 
2001: goto2006
text := "a "+text;
2002: "a "
2003: local #0
2004: +
2005: local0 := 
return text;
2006: local #0
2007: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 69
function AP_ListAttributesByType( type:="" )
2008: pop param 'type'
if( !type )
2009: local #0
2010: if true goto 2020
var cfg_file := ReadConfigFile( ":attributes:attributes" );
2011: decl local #0
2012: ":attributes:attributes"
2013: Func(6,0): ReadConfigFile
2014: :=
2015: #
return GetConfigStringKeys( cfg_file );
2016: local #1
2017: Func(6,4): GetConfigStringKeys
2018: return
2019: leave block(1)
type := Lower( type );
2020: local #0
2021: Func(0,3): Lower
2022: local0 := 
var data_elem := AP_GetAttributeDataElem( "Categories" );
2023: decl local #1
2024: "Categories"
2025: makelocal
2026: jmp userfunc @2292
2027: :=
2028: #
return data_elem.GetProp( type );
2029: local #1
2030: local #0
2031: Call Method id getprop (#35, 1 params)
2032: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 158
function GetEnchantmentElem( item, elem )
2033: pop param 'elem'
2034: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:enchant_desc" );
2035: decl local #2
2036: ":loot:enchant_desc"
2037: Func(6,0): ReadConfigFile
2038: :=
2039: #
if( enchantment_cfg.errortext )
2040: local #2
2041: get member 'errortext'
2042: if false goto 2055
PrintTextAbove( item, "Error reading config <:loot:enchant_desc> -->"+enchantme
2043: local #1
2044: "Error reading config <:loot:enchant_desc> -->"
2045: local #2
2046: get member 'errortext'
2047: +
2048: 3L
2049: 1000L
2050: 0L
2051: Func(2,11): PrintTextAbove
2052: #
return 0;
2053: 0L
2054: return
var chant_elem := FindConfigElem( enchantment_cfg, elem );
2055: decl local #3
2056: local #2
2057: local #0
2058: Func(6,5): FindConfigElem
2059: :=
2060: #
if( chant_elem.errortext )
2061: local #3
2062: get member 'errortext'
2063: if false goto 2080
PrintTextAbove( item, "Error reading chant_elem <"+elem+"> -->"+chant_elem.erro
2064: local #1
2065: "Error reading chant_elem <"
2066: local #0
2067: +
2068: "> -->"
2069: +
2070: local #3
2071: get member 'errortext'
2072: +
2073: 3L
2074: 1000L
2075: 0L
2076: Func(2,11): PrintTextAbove
2077: #
return 0;
2078: 0L
2079: return
return chant_elem;
2080: local #3
2081: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 81
function GetEquipmentModifiers( item, flags:=EQUIP_CSTM_OR_ITEMDESC )
2082: pop param 'flags'
2083: pop param 'item'
var cstm_mods;
2084: decl local #2
2085: #
if( flags & EQUIP_CUSTOM_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2086: local #0
2087: 2L
2088: &
2089: local #0
2090: 4L
2091: &
2092: ||
2093: if false goto 2112
cstm_mods := GetObjProperty( item, "AttribMods" );
2094: local #1
2095: "AttribMods"
2096: Func(2,7): GetObjProperty
2097: local2 := 
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
2098: local #2
2099: Func(0,1): TypeOf
2100: Func(0,3): Lower
2101: "dictionary"
2102: <>
2103: if false goto 2106
cstm_mods := dictionary;
2104: dictionary
2105: local2 := 
if( flags & EQUIP_CSTM_OR_ITEMDESC )
2106: local #0
2107: 4L
2108: &
2109: if false goto 2112
return cstm_mods;
2110: local #2
2111: return
var itemdesc_mods := dictionary;
2112: decl local #3
2113: dictionary
2114: :=
2115: #
if( flags & EQUIP_ITEMDESC_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2116: local #0
2117: 1L
2118: &
2119: local #0
2120: 4L
2121: &
2122: ||
2123: if false goto 2159
var item_cfg := ReadConfigFile( ":*:itemdesc" );
2124: decl local #0
2125: ":*:itemdesc"
2126: Func(6,0): ReadConfigFile
2127: :=
2128: #
item_cfg := item_cfg[item.objtype];
2129: local #4
2130: local #1
2131: get member id 'objtype' (4)
2132: [] 1
2133: local4 := 
var modifier := Abs( item_cfg.DefaultDex ),
2134: decl local #1
2135: local #4
2136: get member 'DefaultDex'
2137: Func(7,3): Abs
2138: :=
2139: #
2140: decl local #2
2141: local #1
2142: "DefaultDex"
2143: Func(2,7): GetObjProperty
2144: Func(0,2): CInt
2145: :=
2146: #
if( cust_modifier )
2147: local #6
2148: if false goto 2153
modifier := modifier - cust_modifier;
2149: local #5
2150: local #6
2151: -
2152: local5 := 
itemdesc_mods["dexterity"] := -modifier;
2153: local #3
2154: "dexterity"
2155: local #5
2156: unary -
2157: [] := (1) #
2158: leave block(3)
if( flags & EQUIP_BOTH_MODS )
2159: local #0
2160: 3L
2161: &
2162: if false goto 2175
foreach modifier in ( cstm_mods )
2163: local #2
2164: initforeach @2173
itemdesc_mods.Insert( _modifier_iter, modifier );
2165: local #3
2166: local #6
2167: local #4
2168: Call Method id insert (#50, 2 params)
2169: #
SleepMS(2);
2170: 2L
2171: Func(3,0): Sleepms
2172: #
2173: stepforeach @2165
2174: leave block(3)
if( itemdesc_mods.Size() > 0 )
2175: local #3
2176: Call Method id size (#48, 0 params)
2177: 0L
2178: >
2179: if false goto 2183
return itemdesc_mods;
2180: local #3
2181: return
2182: goto2185
return cstm_mods;
2183: local #2
2184: return
2185: 0L
2186: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 224
function MP_GetMount( mobile )
2187: pop param 'mobile'
var mount_piece := GetEquipmentByLayer( mobile, LAYER_MOUNT );
2188: decl local #1
2189: local #0
2190: 25L
2191: Func(2,1): GetEquipmentByLayer
2192: :=
2193: #
if( mount_piece.errortext )
2194: local #1
2195: get member 'errortext'
2196: if false goto 2202
return error{"errortext":=mount_piece.errortext};
2197: error
2198: local #1
2199: get member 'errortext'
2200: addmember-assign(errortext)
2201: return
return 1;
2202: 1L
2203: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 40
function MP_GetMountGraphic( mobile )
2204: pop param 'mobile'
var mobile_graphic;
2205: decl local #1
2206: #
if( mobile.IsA( POLCLASS_NPC ))
2207: local #0
2208: 4L
2209: Call Method id isa (#0, 1 params)
2210: if false goto 2216
mobile_graphic := Hex( mobile.graphic );
2211: local #0
2212: get member id 'graphic' (5)
2213: Func(0,7): Hex
2214: local1 := 
2215: goto2220
mobile_graphic := Hex( CInt( mobile ));
2216: local #0
2217: Func(0,2): CInt
2218: Func(0,7): Hex
2219: local1 := 
var elem := MP_GetMountsCfgElem( "MobileToMount" );
2220: decl local #2
2221: "MobileToMount"
2222: 0L
2223: makelocal
2224: jmp userfunc @2248
2225: :=
2226: #
var tile_graphic := GetConfigInt( elem, mobile_graphic );
2227: decl local #3
2228: local #2
2229: local #1
2230: Func(6,7): GetConfigInt
2231: :=
2232: #
if( tile_graphic )
2233: local #3
2234: if false goto 2238
return tile_graphic;
2235: local #3
2236: return
2237: goto2246
return error{"errortext":="Error::MP_GetMountGraphic() - No mount tile graphic 
2238: error
2239: "Error::MP_GetMountGraphic() - No mount tile graphic matches mobile graphic '"
2240: local #1
2241: +
2242: "'"
2243: +
2244: addmember-assign(errortext)
2245: return
2246: 0L
2247: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 26
function MP_GetMountsCfgElem( elem_name, byref cfg_file:=0 )
2248: pop param byref 'cfg_file'
2249: pop param 'elem_name'
if( !cfg_file )
2250: local #0
2251: if true goto 2255
cfg_file := MP_GetMountsCfgFile();
2252: makelocal
2253: jmp userfunc @2276
2254: local0 := 
var elem := cfg_file[elem_name];
2255: decl local #2
2256: local #0
2257: local #1
2258: [] 1
2259: :=
2260: #
if( elem.errortext )
2261: local #2
2262: get member 'errortext'
2263: if false goto 2274
SysLog( "Error::MP_GetMountsCfgElem() - Unable to find elem ["+elem_name+"] ->"
2264: "Error::MP_GetMountsCfgElem() - Unable to find elem ["
2265: local #1
2266: +
2267: "] ->"
2268: +
2269: local #2
2270: get member 'errortext'
2271: +
2272: Func(3,2): SysLog
2273: #
return elem;
2274: local #2
2275: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 18
function MP_GetMountsCfgFile()
var cfg := ReadConfigFile( ":mounts:mounts" );
2276: decl local #0
2277: ":mounts:mounts"
2278: Func(6,0): ReadConfigFile
2279: :=
2280: #
if( cfg.errortext )
2281: local #0
2282: get member 'errortext'
2283: if false goto 2290
SysLog( "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2284: "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2285: local #0
2286: get member 'errortext'
2287: +
2288: Func(3,2): SysLog
2289: #
return cfg;
2290: local #0
2291: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 57
function AP_GetAttributeDataElem( elem_name )
2292: pop param 'elem_name'
var data_file := AP_GetAttributesDataFile();
2293: decl local #1
2294: makelocal
2295: jmp userfunc @2321
2296: :=
2297: #
var data_elem := DFFindElement( data_file, elem_name, DF_CREATE );
2298: decl local #2
2299: local #1
2300: local #0
2301: 1L
2302: makelocal
2303: jmp userfunc @2340
2304: :=
2305: #
if( data_elem.errortext )
2306: local #2
2307: get member 'errortext'
2308: if false goto 2319
SysLog( "Error::AP_GetAttributeDataElem() - unable to find elem ["+elem_name+"]
2309: "Error::AP_GetAttributeDataElem() - unable to find elem ["
2310: local #0
2311: +
2312: "] ->"
2313: +
2314: local #2
2315: get member 'errortext'
2316: +
2317: Func(3,2): SysLog
2318: #
return data_elem;
2319: local #2
2320: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 49
function AP_GetAttributesDataFile()
var data_file := DFOpenDataFile( ":attributes:attributes", DF_CREATE );
2321: decl local #0
2322: ":attributes:attributes"
2323: 1L
2324: 0L
2325: makelocal
2326: jmp userfunc @2402
2327: :=
2328: #
if( data_file.errortext )
2329: local #0
2330: get member 'errortext'
2331: if false goto 2338
SysLog( "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"+
2332: "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"
2333: local #0
2334: get member 'errortext'
2335: +
2336: Func(3,2): SysLog
2337: #
return data_file;
2338: local #0
2339: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
2340: pop param 'create'
2341: pop param 'elem_name'
2342: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
2343: decl local #3
2344: local #2
2345: local #1
2346: Func(0,6): CStr
2347: Call Method id findelement (#72, 1 params)
2348: :=
2349: #
if ( !temp && create )
2350: local #3
2351: !
2352: local #0
2353: &&
2354: if false goto 2372
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
2355: "Debug::DFFindElement() - Creating elem: "
2356: local #1
2357: Func(0,6): CStr
2358: +
2359: makelocal
2360: jmp userfunc @2458
2361: #
file_ref.CreateElement(CStr(elem_name));
2362: local #2
2363: local #1
2364: Func(0,6): CStr
2365: Call Method id createelement (#71, 1 params)
2366: #
temp := file_ref.FindElement(CStr(elem_name));
2367: local #2
2368: local #1
2369: Func(0,6): CStr
2370: Call Method id findelement (#72, 1 params)
2371: local3 := 
if ( temp )
2372: local #3
2373: if false goto 2377
return temp;
2374: local #3
2375: return
2376: goto2400
elseif (create)
2377: local #0
2378: if false goto 2400
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
2379: decl local #0
2380: error
2381: "Error::DFFindElement() - Could not open data elem ["
2382: local #1
2383: +
2384: "] - "
2385: +
2386: local #3
2387: get member 'errortext'
2388: +
2389: addmember-assign(errortext)
2390: :=
2391: #
DF_OutPut(errmsg.errortext);
2392: local #4
2393: get member 'errortext'
2394: makelocal
2395: jmp userfunc @2458
2396: #
return errmsg;
2397: local #4
2398: return
2399: leave block(1)
2400: 0L
2401: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
2402: pop param 'flags'
2403: pop param 'create'
2404: pop param 'file_name'
var data_file := OpenDataFile(file_name);
2405: decl local #3
2406: local #2
2407: Func(11,0): OpenDataFile
2408: :=
2409: #
if ( (!data_file) && (create) )
2410: local #3
2411: !
2412: local #1
2413: &&
2414: if false goto 2428
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
2415: "Debug::DFOpenDataFile() - Creating data file: "
2416: local #2
2417: +
2418: makelocal
2419: jmp userfunc @2458
2420: #
CreateDataFile(file_name, flags);
2421: local #2
2422: local #0
2423: Func(11,1): CreateDataFile
2424: #
data_file := OpenDataFile(file_name);
2425: local #2
2426: Func(11,0): OpenDataFile
2427: local3 := 
if ( data_file )
2428: local #3
2429: if false goto 2433
return data_file;
2430: local #3
2431: return
2432: goto2456
elseif ( create )
2433: local #1
2434: if false goto 2456
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
2435: decl local #0
2436: error
2437: "Error::DFOpenDataFile() - Could not open "
2438: local #2
2439: +
2440: " : "
2441: +
2442: local #3
2443: get member 'errortext'
2444: +
2445: addmember-assign(errortext)
2446: :=
2447: #
DF_OutPut(errmsg.errortext);
2448: local #4
2449: get member 'errortext'
2450: makelocal
2451: jmp userfunc @2458
2452: #
return errmsg;
2453: local #4
2454: return
2455: leave block(1)
2456: 0L
2457: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
2458: pop param 'text'
if ( DF_DEBUG_MODE )
2459: global #1
2460: if false goto 2479
var script_name := GetProcess(GetPid()).name;
2461: decl local #0
2462: Func(3,4): GetPid
2463: Func(3,3): GetProcess
2464: get member id 'name' (3)
2465: :=
2466: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
2467: "::log/dataFile.log"
2468: "["
2469: local #1
2470: +
2471: "]: "
2472: +
2473: local #0
2474: +
2475: 1L
2476: Func(10,0): LogToFile
2477: #
2478: leave block(1)
return 1;
2479: 1L
2480: return
