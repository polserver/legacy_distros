c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @136
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\init\bird.src, Line 14
program BrainNerve( params )
include ":brainAI:npcCommands";
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var gsettings	:= params[2];
64: decl local #2
65: local #0
66: 2L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
NPC_SetupName( npc );
72: local #1
73: 0L
74: makelocal
75: jmp userfunc @230
76: #
NPC_SetupProtections( npc );
77: local #1
78: makelocal
79: jmp userfunc @329
80: #
gsettings["AreaSize"] *= 3;
81: local #2
82: "AreaSize"
83: [] 1
84: 3L
85: *=
86: #
NPC_SetAnchorInfos( npc, gsettings );
87: local #1
88: local #2
89: makelocal
90: jmp userfunc @180
91: #
var colors := array{444, 448, 544, 548, 150, 550, 902, 922, 151, 775, 150, 38, 
92: decl local #3
93: array
94: 444L
95: init{}
96: 448L
97: init{}
98: 544L
99: init{}
100: 548L
101: init{}
102: 150L
103: init{}
104: 550L
105: init{}
106: 902L
107: init{}
108: 922L
109: init{}
110: 151L
111: init{}
112: 775L
113: init{}
114: 150L
115: init{}
116: 38L
117: init{}
118: 37L
119: init{}
120: 39L
121: init{}
122: 41L
123: init{}
124: 76L
125: init{}
126: :=
127: #
npc.color := colors.RandomEntry();
128: local #1
129: local #3
130: Call Method id randomentry (#101, 0 params)
131: set member id 'color' (7) #
return 1;
132: 1L
133: progend
134: leave block(4)
135: progend
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
136: pop param byref 'cfg_file'
137: pop param 'elem_name'
if( !cfg_file )
138: local #0
139: if true goto 143
cfg_file := Classes_GetSettingsCfgFile();
140: makelocal
141: jmp userfunc @164
142: local0 := 
var elem := cfg_file[elem_name];
143: decl local #2
144: local #0
145: local #1
146: [] 1
147: :=
148: #
if( elem.errortext )
149: local #2
150: get member 'errortext'
151: if false goto 162
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
152: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
153: local #1
154: +
155: "] ->"
156: +
157: local #2
158: get member 'errortext'
159: +
160: Func(3,0): SysLog
161: #
return elem;
162: local #2
163: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
164: decl local #0
165: ":classes:settings"
166: Func(5,0): ReadConfigFile
167: :=
168: #
if( cfg.errortext )
169: local #0
170: get member 'errortext'
171: if false goto 178
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
172: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
173: local #0
174: get member 'errortext'
175: +
176: Func(3,0): SysLog
177: #
return cfg;
178: local #0
179: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
180: pop param 'gsettings'
181: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
182: decl local #2
183: local #1
184: "StartingPoint"
185: Func(2,1): GetObjProperty
186: :=
187: #
if( !starting_point )
188: local #2
189: if true goto 214
var location := struct;
190: decl local #0
191: struct
192: :=
193: #
location.+x := npc.x;
194: local #3
195: "x"
196: .+
197: local #1
198: get member id 'x' (0)
199: := #
location.+y := npc.y;
200: local #3
201: "y"
202: .+
203: local #1
204: get member id 'y' (1)
205: := #
starting_point := location;
206: local #3
207: local2 := 
SetObjProperty( npc, "StartingPoint", location );
208: local #1
209: "StartingPoint"
210: local #3
211: Func(2,2): SetObjProperty
212: #
213: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
214: local #1
215: local #2
216: get member id 'x' (0)
217: local #2
218: get member id 'y' (1)
219: local #0
220: "AreaSize"
221: [] 1
222: Func(0,1): CInt
223: 80L
224: 0L
225: makelocal
226: jmp userfunc @379
227: #
return 1;
228: 1L
229: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 184
function NPC_SetupName( mobile, name_elem:=0 )
230: pop param 'name_elem'
231: pop param 'mobile'
if( !mobile.name["<random>"] )
232: local #1
233: get member id 'name' (3)
234: "<random>"
235: [] 1
236: if true goto 240
return 1;
237: 1L
238: return
239: goto257
elseif( !name_elem )
240: local #0
241: if true goto 257
var npc_elem := NPC_GetNPCConfig( mobile );
242: decl local #0
243: local #1
244: makelocal
245: jmp userfunc @480
246: :=
247: #
name_elem := npc_elem.NameTemplate;
248: local #2
249: get member 'NameTemplate'
250: local0 := 
if( name_elem.errortext )
251: local #0
252: get member 'errortext'
253: if false goto 256
return name_elem;
254: local #0
255: return
256: leave block(1)
var npc_names := ReadConfigFile( ":brainAI:names" );
257: decl local #2
258: ":brainAI:names"
259: Func(5,0): ReadConfigFile
260: :=
261: #
if( !npc_names[name_elem] )
262: local #2
263: local #0
264: [] 1
265: if true goto 274
return error{"errortext" := "There is no elem ["+name_elem+"] in NAMES.CFG"};
266: error
267: "There is no elem ["
268: local #0
269: +
270: "] in NAMES.CFG"
271: +
272: addmember-assign(errortext)
273: return
var name_list := GetConfigStringArray( npc_names[name_elem], "Name" );
274: decl local #3
275: local #2
276: local #0
277: [] 1
278: "Name"
279: Func(5,2): GetConfigStringArray
280: :=
281: #
if ( name_list.Size() < 1 )
282: local #3
283: Call Method id size (#48, 0 params)
284: 1L
285: <
286: if false goto 295
return error{"errortext":="No names were found in the ["+name_elem+"] elem for 
287: error
288: "No names were found in the ["
289: local #0
290: +
291: "] elem for names.cfg"
292: +
293: addmember-assign(errortext)
294: return
var my_name := mobile.name;
295: decl local #4
296: local #1
297: get member id 'name' (3)
298: :=
299: #
while( my_name["<random>"] )
300: local #4
301: "<random>"
302: [] 1
303: if false goto 323
var replacement := name_list[RandomInt( name_list.Size() )+1];
304: decl local #0
305: local #3
306: local #3
307: Call Method id size (#48, 0 params)
308: Func(8,2): RandomInt
309: 1L
310: +
311: [] 1
312: :=
313: #
my_name["<random>"] := replacement;
314: local #4
315: "<random>"
316: local #5
317: [] := (1) #
SleepMS(2);
318: 2L
319: Func(3,3): Sleepms
320: #
321: leave block(1)
322: goto300
SetName( mobile, my_name );
323: local #1
324: local #4
325: Func(2,14): SetName
326: #
return my_name;
327: local #4
328: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 218
function NPC_SetupProtections( npc )
329: pop param 'npc'
var possibles := GetProtections(),
330: decl local #1
331: makelocal
332: jmp userfunc @442
333: :=
334: #
335: decl local #2
336: local #0
337: makelocal
338: jmp userfunc @429
339: :=
340: #
foreach protection in possibles
341: local #1
342: initforeach @363
var level := GetObjProperty( npc, protection );
343: decl local #0
344: local #0
345: local #3
346: Func(2,1): GetObjProperty
347: :=
348: #
if( level )
349: local #6
350: if false goto 359
protections[protection] := level;
351: local #2
352: local #3
353: local #6
354: [] := (1) #
EraseObjProperty( npc, protection );
355: local #0
356: local #3
357: Func(2,13): EraseObjProperty
358: #
SleepMS(5);
359: 5L
360: Func(3,3): Sleepms
361: #
362: leave block(1)
363: stepforeach @343
364: leave block(3)
SetMobileProtections( npc, protections );
365: local #0
366: local #2
367: makelocal
368: jmp userfunc @372
369: #
return 1;
370: 1L
371: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 49
function SetMobileProtections( mobile, protections )
372: pop param 'protections'
373: pop param 'mobile'
return SetObjProperty( mobile, "Protections", protections );
374: local #1
375: "Protections"
376: local #0
377: Func(2,2): SetObjProperty
378: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
379: pop param 'no_wake'
380: pop param 'percent_subtract'
381: pop param 'distance_start'
382: pop param 'y'
383: pop param 'x'
384: pop param 'npc'
var ev		:= struct;
385: decl local #6
386: struct
387: :=
388: #
ev.+type	:= NPCEVENT_ANCHOR;
389: local #6
390: "type"
391: .+
392: 10485781L
393: := #
ev.+x		:= x;
394: local #6
395: "x"
396: .+
397: local #4
398: := #
ev.+y		:= y;
399: local #6
400: "y"
401: .+
402: local #3
403: := #
ev.+distance	:= distance_start;
404: local #6
405: "distance"
406: .+
407: local #2
408: := #
ev.+percent	:= percent_subtract;
409: local #6
410: "percent"
411: .+
412: local #1
413: := #
ev.+WakeUp	:= no_wake;
414: local #6
415: "WakeUp"
416: .+
417: local #0
418: := #
ev.+process	:= GetProcess( GetPid() );
419: local #6
420: "process"
421: .+
422: Func(3,2): GetPid
423: Func(3,1): GetProcess
424: := #
return SendEvent( npc, ev );
425: local #5
426: local #6
427: Func(2,17): SendEvent
428: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 32
function GetObjProtections( mobile )
429: pop param 'mobile'
var protections := GetObjProperty( mobile, "Protections" );
430: decl local #1
431: local #0
432: "Protections"
433: Func(2,1): GetObjProperty
434: :=
435: #
if( !protections )
436: local #1
437: if true goto 440
protections := struct;
438: struct
439: local1 := 
return protections;
440: local #1
441: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 12
function GetProtections()
var protections := array{   "AirProtection",
442: decl local #0
443: array
444: "AirProtection"
445: init{}
446: "EarthProtection"
447: init{}
448: "FireProtection"
449: init{}
450: "WaterProtection"
451: init{}
452: "HolyProtection"
453: init{}
454: "NecroProtection"
455: init{}
456: "PoisonProtection"
457: init{}
458: "PermPoisonProtection"
459: init{}
460: "MagicProtection"
461: init{}
462: "PermMagicProtection"
463: init{}
464: "PhysicalProtection"
465: init{}
466: "SpellReflection"
467: init{}
468: "PermSpellReflection"
469: init{}
470: "FreeAction"
471: init{}
472: "HealingIncrease"
473: init{}
474: "AcidProtection"
475: init{}
476: :=
477: #
return protections;
478: local #0
479: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
480: pop param 'template'
if( !template.package )
481: local #0
482: get member 'package'
483: if true goto 488
template := NPC_ParseTemplateName( template );
484: local #0
485: makelocal
486: jmp userfunc @537
487: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
488: decl local #1
489: ":"
490: local #0
491: get member 'package'
492: +
493: ":npcdesc"
494: +
495: Func(5,0): ReadConfigFile
496: :=
497: #
if( npc_cfg.errortext )
498: local #1
499: get member 'errortext'
500: if false goto 513
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
501: error
502: "Error::NPC_GetNPCConfig() - Could not open :"
503: local #0
504: get member 'package'
505: +
506: ":npcdesc ->"
507: +
508: local #1
509: get member 'errortext'
510: +
511: addmember-assign(errortext)
512: return
var cfg_elem := npc_cfg[template.template];
513: decl local #2
514: local #1
515: local #0
516: get member 'template'
517: [] 1
518: :=
519: #
if( cfg_elem.errortext )
520: local #2
521: get member 'errortext'
522: if false goto 535
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
523: error
524: "Error::NPC_GetNPCConfig() - Could not find elem ["
525: local #0
526: get member 'template'
527: +
528: "] ->"
529: +
530: local #2
531: get member 'errortext'
532: +
533: addmember-assign(errortext)
534: return
return cfg_elem;
535: local #2
536: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
537: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
538: local #0
539: 4L
540: Call Method id isa (#0, 1 params)
541: if false goto 545
template_name := template_name.npctemplate;
542: local #0
543: get member id 'npctemplate' (62)
544: local0 := 
var colon_a := Find( template_name, ":", 1 );
545: decl local #1
546: local #0
547: ":"
548: 1L
549: Func(0,8): Find
550: :=
551: #
var colon_b := Find( template_name, ":", 2 );
552: decl local #2
553: local #0
554: ":"
555: 2L
556: Func(0,8): Find
557: :=
558: #
var parsed := struct{"package", "template"};
559: decl local #3
560: struct
561: addmember(package)
562: addmember(template)
563: :=
564: #
if( !colon_a || !colon_b )
565: local #1
566: !
567: local #2
568: !
569: ||
570: if false goto 578
parsed.package := "";
571: local #3
572: ""
573: set member 'package' #
parsed.template := template_name;
574: local #3
575: local #0
576: set member 'template' #
577: goto597
parsed.package := template_name[colon_a+1, colon_b-2];
578: local #3
579: local #0
580: local #1
581: 1L
582: +
583: local #2
584: 2L
585: -
586: [,]
587: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
588: local #3
589: local #0
590: local #2
591: 1L
592: +
593: local #0
594: Func(0,3): Len
595: [,]
596: set member 'template' #
return parsed;
597: local #3
598: return
