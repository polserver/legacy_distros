c:/ZH099/pkg/systems/classes/include/classes.inc, Line 26
var settings := Classes_GetSettingsCfgElem( "Settings" );
0: decl global #0
1: "Settings"
2: 0L
3: makelocal
4: jmp userfunc @154
5: :=
6: #
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 35
var DF_DEBUG_MODE	:= 0;
7: decl global #1
8: 0L
9: :=
10: #
c:/ZH099/pkg/systems/loot/include/identify_ex.inc, Line 7
var immunities := { "AirProtection",
11: decl global #2
12: array
13: "AirProtection"
14: init{}
15: "EarthProtection"
16: init{}
17: "FireProtection"
18: init{}
19: "WaterProtection"
20: init{}
21: "NecroProtection"
22: init{}
23: "PermPoisonProtection"
24: init{}
25: "PermMagicProtection"
26: init{}
27: "PhysicalProtection"
28: init{}
29: "PermSpellReflection"
30: init{}
31: "HealingIncrease"
32: init{}
33: :=
34: #
var wardings := { "PoisonProtection",
35: decl global #3
36: array
37: "PoisonProtection"
38: init{}
39: "MagicProtection"
40: init{}
41: "SpellReflection"
42: init{}
43: "FreeAction"
44: init{}
45: :=
46: #
var regenerations := { "HitsRegen",
47: decl global #4
48: array
49: "HitsRegen"
50: init{}
51: "StamRegen"
52: init{}
53: "ManaRegen"
54: init{}
55: :=
56: #
C:\ZH099\pkg\systems\brainAI\scripts\init\generic.src, Line 16
program BrainNerve( params )
include ":brainAI:npcCommands";
57: get arg 'params'
var npc		:= params[1];
58: decl local #1
59: local #0
60: 1L
61: [] 1
62: :=
63: #
var g_settings	:= params[2];
64: decl local #2
65: local #0
66: 2L
67: [] 1
68: :=
69: #
params := 0; // Not needed anymore.
70: 0L
71: local0 := 
NPC_SetupAmmo( npc );
72: local #1
73: makelocal
74: jmp userfunc @248
75: #
NPC_SetupBackPack( npc );
76: local #1
77: makelocal
78: jmp userfunc @316
79: #
NPC_SetupRandomEquipment( npc );
80: local #1
81: 0L
82: 0L
83: makelocal
84: jmp userfunc @496
85: #
NPC_SetupName( npc );
86: local #1
87: 0L
88: makelocal
89: jmp userfunc @354
90: #
NPC_SetupProtections( npc );
91: local #1
92: makelocal
93: jmp userfunc @453
94: #
g_settings["AreaSize"] *= 3;
95: local #2
96: "AreaSize"
97: [] 1
98: 3L
99: *=
100: #
NPC_SetAnchorInfos( npc, g_settings );
101: local #1
102: local #2
103: makelocal
104: jmp userfunc @198
105: #
var hiding := AP_GetSkill( npc, HIDING );
106: decl local #3
107: local #1
108: "Hiding"
109: makelocal
110: jmp userfunc @124
111: :=
112: #
if( hiding > 30 )
113: local #3
114: 30L
115: >
116: if false goto 120
npc.hidden := 1;
117: local #1
118: 1L
119: set member id 'hidden' (32) #
return 1;
120: 1L
121: progend
122: leave block(4)
123: progend
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 8
function AP_GetSkill( who, skill_name )
124: pop param 'skill_name'
125: pop param 'who'
return AP_GetTrueSkill( who, skill_name )+AP_GetSkillMod( who, skill_name );
126: local #1
127: local #0
128: makelocal
129: jmp userfunc @145
130: local #1
131: local #0
132: makelocal
133: jmp userfunc @136
134: +
135: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 18
function AP_GetSkillMod( who, skill_name )
136: pop param 'skill_name'
137: pop param 'who'
return CDbl( GetAttributeTemporaryMod( who, skill_name )) / 10.0;
138: local #1
139: local #0
140: Func(9,1): GetAttributeTemporaryMod
141: Func(0,4): CDbl
142: 10LF
143: /
144: return
c:/ZH099/pkg/systems/attributes/include/skills.inc, Line 13
function AP_GetTrueSkill( who, skill_name )
145: pop param 'skill_name'
146: pop param 'who'
return CDbl( GetAttributeBaseValue( who, skill_name )) / 10.0;
147: local #1
148: local #0
149: Func(9,0): GetAttributeBaseValue
150: Func(0,4): CDbl
151: 10LF
152: /
153: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 20
function Classes_GetSettingsCfgElem( elem_name, byref cfg_file:=0 )
154: pop param byref 'cfg_file'
155: pop param 'elem_name'
if( !cfg_file )
156: local #0
157: if true goto 161
cfg_file := Classes_GetSettingsCfgFile();
158: makelocal
159: jmp userfunc @182
160: local0 := 
var elem := cfg_file[elem_name];
161: decl local #2
162: local #0
163: local #1
164: [] 1
165: :=
166: #
if( elem.errortext )
167: local #2
168: get member 'errortext'
169: if false goto 180
SysLog( "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["+elem_name
170: "Error::Classes_GetSettingsCfgElem() - Unable to find elem ["
171: local #1
172: +
173: "] ->"
174: +
175: local #2
176: get member 'errortext'
177: +
178: Func(3,2): SysLog
179: #
return elem;
180: local #2
181: return
c:/ZH099/pkg/systems/classes/include/settings.inc, Line 12
function Classes_GetSettingsCfgFile()
var cfg := ReadConfigFile( ":classes:settings" );
182: decl local #0
183: ":classes:settings"
184: Func(6,0): ReadConfigFile
185: :=
186: #
if( cfg.errortext )
187: local #0
188: get member 'errortext'
189: if false goto 196
SysLog( "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:setting
190: "Error::Classes_GetSettingsCfgFile() - Unable to open [:classes:settings.cfg] ->"
191: local #0
192: get member 'errortext'
193: +
194: Func(3,2): SysLog
195: #
return cfg;
196: local #0
197: return
c:/ZH099/pkg/systems/brainAI/include/commonFunctions.inc, Line 215
function NPC_SetAnchorInfos( npc, gsettings )
198: pop param 'gsettings'
199: pop param 'npc'
var starting_point := GetObjProperty( npc, "StartingPoint" );
200: decl local #2
201: local #1
202: "StartingPoint"
203: Func(2,7): GetObjProperty
204: :=
205: #
if( !starting_point )
206: local #2
207: if true goto 232
var location := struct;
208: decl local #0
209: struct
210: :=
211: #
location.+x := npc.x;
212: local #3
213: "x"
214: .+
215: local #1
216: get member id 'x' (0)
217: := #
location.+y := npc.y;
218: local #3
219: "y"
220: .+
221: local #1
222: get member id 'y' (1)
223: := #
starting_point := location;
224: local #3
225: local2 := 
SetObjProperty( npc, "StartingPoint", location );
226: local #1
227: "StartingPoint"
228: local #3
229: Func(2,6): SetObjProperty
230: #
231: leave block(1)
AI_SetAnchor( npc, starting_point.x, starting_point.y, CInt( gsettings["AreaSiz
232: local #1
233: local #2
234: get member id 'x' (0)
235: local #2
236: get member id 'y' (1)
237: local #0
238: "AreaSize"
239: [] 1
240: Func(0,2): CInt
241: 80L
242: 0L
243: makelocal
244: jmp userfunc @849
245: #
return 1;
246: 1L
247: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 55
function NPC_SetupAmmo( mobile )
248: pop param 'mobile'
var npc_elem := NPC_GetNPCConfig( mobile );
249: decl local #1
250: local #0
251: makelocal
252: jmp userfunc @1440
253: :=
254: #
if( npc_elem.MissileWeapon )
255: local #1
256: get member 'MissileWeapon'
257: if false goto 287
var weapon := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, npc_elem.Miss
258: decl local #0
259: local #0
260: get member id 'x' (0)
261: local #0
262: get member id 'y' (1)
263: local #0
264: get member id 'z' (2)
265: local #1
266: get member 'MissileWeapon'
267: 1L
268: local #0
269: get member id 'realm' (112)
270: Func(2,24): CreateItemAtLocation
271: :=
272: #
if( !EquipItem( mobile, weapon ))
273: local #0
274: local #2
275: Func(2,25): EquipItem
276: if true goto 282
DestroyItem( weapon );
277: local #2
278: Func(2,26): DestroyItem
279: #
return weapon;
280: local #2
281: return
weapon.newbie := 1;
282: local #2
283: 1L
284: set member id 'newbie' (25) #
285: leave block(1)
286: goto314
elseif( npc_elem.AmmoType )
287: local #1
288: get member 'AmmoType'
289: if false goto 314
if( CInt( npc_elem.AmmoAmount ) > 0 )
290: local #1
291: get member 'AmmoAmount'
292: Func(0,2): CInt
293: 0L
294: >
295: if false goto 314
var ammo := CreateItemInBackpack( mobile, npc_elem.AmmoType, CInt( npc_elem.Amm
296: decl local #0
297: local #0
298: local #1
299: get member 'AmmoType'
300: local #1
301: get member 'AmmoAmount'
302: Func(0,2): CInt
303: Func(2,30): CreateItemInBackpack
304: :=
305: #
if( !ammo )
306: local #2
307: if true goto 310
return ammo;
308: local #2
309: return
ammo.newbie := 1;
310: local #2
311: 1L
312: set member id 'newbie' (25) #
313: leave block(1)
return 1;
314: 1L
315: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 39
function NPC_SetupBackPack( mobile )
316: pop param 'mobile'
if( !mobile.backpack )
317: local #0
318: get member id 'backpack' (41)
319: if true goto 351
var backpack := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "BackPack",
320: decl local #0
321: local #0
322: get member id 'x' (0)
323: local #0
324: get member id 'y' (1)
325: local #0
326: get member id 'z' (2)
327: "BackPack"
328: 1L
329: local #0
330: get member id 'realm' (112)
331: Func(2,24): CreateItemAtLocation
332: :=
333: #
var result := EquipItem( mobile, backpack );
334: decl local #1
335: local #0
336: local #1
337: Func(2,25): EquipItem
338: :=
339: #
if( !result )
340: local #2
341: if true goto 348
DestroyItem( backpack );
342: local #1
343: Func(2,26): DestroyItem
344: #
return result;
345: local #2
346: return
347: goto350
return backpack;
348: local #1
349: return
350: leave block(2)
return mobile.backpack;
351: local #0
352: get member id 'backpack' (41)
353: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 184
function NPC_SetupName( mobile, name_elem:=0 )
354: pop param 'name_elem'
355: pop param 'mobile'
if( !mobile.name["<random>"] )
356: local #1
357: get member id 'name' (3)
358: "<random>"
359: [] 1
360: if true goto 364
return 1;
361: 1L
362: return
363: goto381
elseif( !name_elem )
364: local #0
365: if true goto 381
var npc_elem := NPC_GetNPCConfig( mobile );
366: decl local #0
367: local #1
368: makelocal
369: jmp userfunc @1440
370: :=
371: #
name_elem := npc_elem.NameTemplate;
372: local #2
373: get member 'NameTemplate'
374: local0 := 
if( name_elem.errortext )
375: local #0
376: get member 'errortext'
377: if false goto 380
return name_elem;
378: local #0
379: return
380: leave block(1)
var npc_names := ReadConfigFile( ":brainAI:names" );
381: decl local #2
382: ":brainAI:names"
383: Func(6,0): ReadConfigFile
384: :=
385: #
if( !npc_names[name_elem] )
386: local #2
387: local #0
388: [] 1
389: if true goto 398
return error{"errortext" := "There is no elem ["+name_elem+"] in NAMES.CFG"};
390: error
391: "There is no elem ["
392: local #0
393: +
394: "] in NAMES.CFG"
395: +
396: addmember-assign(errortext)
397: return
var name_list := GetConfigStringArray( npc_names[name_elem], "Name" );
398: decl local #3
399: local #2
400: local #0
401: [] 1
402: "Name"
403: Func(6,2): GetConfigStringArray
404: :=
405: #
if ( name_list.Size() < 1 )
406: local #3
407: Call Method id size (#48, 0 params)
408: 1L
409: <
410: if false goto 419
return error{"errortext":="No names were found in the ["+name_elem+"] elem for 
411: error
412: "No names were found in the ["
413: local #0
414: +
415: "] elem for names.cfg"
416: +
417: addmember-assign(errortext)
418: return
var my_name := mobile.name;
419: decl local #4
420: local #1
421: get member id 'name' (3)
422: :=
423: #
while( my_name["<random>"] )
424: local #4
425: "<random>"
426: [] 1
427: if false goto 447
var replacement := name_list[RandomInt( name_list.Size() )+1];
428: decl local #0
429: local #3
430: local #3
431: Call Method id size (#48, 0 params)
432: Func(4,2): RandomInt
433: 1L
434: +
435: [] 1
436: :=
437: #
my_name["<random>"] := replacement;
438: local #4
439: "<random>"
440: local #5
441: [] := (1) #
SleepMS(2);
442: 2L
443: Func(3,0): Sleepms
444: #
445: leave block(1)
446: goto424
SetName( mobile, my_name );
447: local #1
448: local #4
449: Func(2,18): SetName
450: #
return my_name;
451: local #4
452: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 218
function NPC_SetupProtections( npc )
453: pop param 'npc'
var possibles := GetProtections(),
454: decl local #1
455: makelocal
456: jmp userfunc @912
457: :=
458: #
459: decl local #2
460: local #0
461: makelocal
462: jmp userfunc @899
463: :=
464: #
foreach protection in possibles
465: local #1
466: initforeach @487
var level := GetObjProperty( npc, protection );
467: decl local #0
468: local #0
469: local #3
470: Func(2,7): GetObjProperty
471: :=
472: #
if( level )
473: local #6
474: if false goto 483
protections[protection] := level;
475: local #2
476: local #3
477: local #6
478: [] := (1) #
EraseObjProperty( npc, protection );
479: local #0
480: local #3
481: Func(2,17): EraseObjProperty
482: #
SleepMS(5);
483: 5L
484: Func(3,0): Sleepms
485: #
486: leave block(1)
487: stepforeach @467
488: leave block(3)
SetMobileProtections( npc, protections );
489: local #0
490: local #2
491: makelocal
492: jmp userfunc @842
493: #
return 1;
494: 1L
495: return
c:/ZH099/pkg/systems/brainAI/include/npcInit.inc, Line 82
function NPC_SetupRandomEquipment( mobile, elem_name:=0, flags:=EQUIP_NOGENDER 
496: pop param 'flags'
497: pop param 'elem_name'
498: pop param 'mobile'
if( !elem_name )
499: local #1
500: if true goto 511
var npc_elem := NPC_GetNPCConfig( mobile );
501: decl local #0
502: local #2
503: makelocal
504: jmp userfunc @1440
505: :=
506: #
elem_name := npc_elem.EquipTemplate;
507: local #3
508: get member 'EquipTemplate'
509: local1 := 
510: leave block(1)
var index_cfg := ReadConfigFile( ":equipment:equipIndex" );
511: decl local #3
512: ":equipment:equipIndex"
513: Func(6,0): ReadConfigFile
514: :=
515: #
if( index_cfg.errortext )
516: local #3
517: get member 'errortext'
518: if false goto 526
return error{"errortext":="Could not open equipIndex.cfg -> "+index_cfg.errorte
519: error
520: "Could not open equipIndex.cfg -> "
521: local #3
522: get member 'errortext'
523: +
524: addmember-assign(errortext)
525: return
var group_cfg := ReadConfigFile( ":equipment:equipGroups" );
526: decl local #4
527: ":equipment:equipGroups"
528: Func(6,0): ReadConfigFile
529: :=
530: #
if( group_cfg.errortext )
531: local #4
532: get member 'errortext'
533: if false goto 541
return error{"errortext":="Could not open equipGroups.cfg -> "+group_cfg.errort
534: error
535: "Could not open equipGroups.cfg -> "
536: local #4
537: get member 'errortext'
538: +
539: addmember-assign(errortext)
540: return
var index_elem := index_cfg[elem_Name];
541: decl local #5
542: local #3
543: local #1
544: [] 1
545: :=
546: #
if( !index_elem )
547: local #5
548: if true goto 557
return error{"errortext":="equipIndex.cfg elem ["+index_elem+"] does not exist.
549: error
550: "equipIndex.cfg elem ["
551: local #5
552: +
553: "] does not exist."
554: +
555: addmember-assign(errortext)
556: return
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipGroup" ))
557: local #5
558: "EquipGroup"
559: Func(6,3): GetConfigStringDictionary
560: initforeach @714
SleepMS(5);
561: 5L
562: Func(3,0): Sleepms
563: #
if( RandomDiceRoll( "1d100+1" ) <= CInt( entry ))
564: "1d100+1"
565: Func(4,0): RandomDiceRoll
566: local #6
567: Func(0,2): CInt
568: <=
569: if false goto 714
var group_elem := group_cfg[CStr( _entry_iter )];
570: decl local #0
571: local #4
572: local #8
573: Func(0,6): CStr
574: [] 1
575: :=
576: #
if( !group_elem )
577: local #9
578: if true goto 592
PrintTextAbove( mobile, "equipGroups.cfg elem ["+_entry_iter+"] does not exist.
579: local #2
580: "equipGroups.cfg elem ["
581: local #8
582: +
583: "] does not exist."
584: +
585: 3L
586: 1000L
587: 0L
588: Func(2,11): PrintTextAbove
589: #
continue;
590: leave block(1)
591: goto714
var item_list := array{};
592: decl local #1
593: array
594: :=
595: #
if( !flags )
596: local #0
597: if true goto 612
var temp := GetConfigStringArray( group_elem, "Item" );
598: decl local #0
599: local #9
600: "Item"
601: Func(6,2): GetConfigStringArray
602: :=
603: #
if( temp )
604: local #11
605: if false goto 610
item_list += temp;
606: local #10
607: local #11
608: +=
609: #
610: leave block(1)
611: goto647
elseif( flags & EQUIP_MALE )
612: local #0
613: 1L
614: &
615: if false goto 630
var temp := GetConfigStringArray( group_elem, "Male" );
616: decl local #0
617: local #9
618: "Male"
619: Func(6,2): GetConfigStringArray
620: :=
621: #
if( temp )
622: local #11
623: if false goto 628
item_list += temp;
624: local #10
625: local #11
626: +=
627: #
628: leave block(1)
629: goto647
elseif( flags & EQUIP_FEMALE )
630: local #0
631: 2L
632: &
633: if false goto 647
var temp := GetConfigStringArray( group_elem, "Female" );
634: decl local #0
635: local #9
636: "Female"
637: Func(6,2): GetConfigStringArray
638: :=
639: #
if( temp )
640: local #11
641: if false goto 646
item_list += temp;
642: local #10
643: local #11
644: +=
645: #
646: leave block(1)
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, item_list.Rando
647: decl local #2
648: local #2
649: get member id 'x' (0)
650: local #2
651: get member id 'y' (1)
652: local #2
653: get member id 'z' (2)
654: local #10
655: Call Method id randomentry (#101, 0 params)
656: 1L
657: local #2
658: get member id 'realm' (112)
659: Func(2,24): CreateItemAtLocation
660: :=
661: #
if( item.errortext )
662: local #11
663: get member 'errortext'
664: if false goto 682
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
665: local #2
666: "Error could not create <"
667: local #8
668: +
669: "> -->"
670: +
671: local #11
672: get member 'errortext'
673: +
674: 3L
675: 1000L
676: 0L
677: Func(2,11): PrintTextAbove
678: #
continue;
679: leave block(3)
680: goto714
681: goto703
elseif( !EquipItem( mobile, item ))
682: local #2
683: local #11
684: Func(2,25): EquipItem
685: if true goto 703
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
686: local #2
687: "Unable to equip - "
688: local #11
689: get member id 'desc' (19)
690: +
691: " - destroying."
692: +
693: 3L
694: 1000L
695: 0L
696: Func(2,11): PrintTextAbove
697: #
DestroyItem( item );
698: local #11
699: Func(2,26): DestroyItem
700: #
continue;
701: leave block(3)
702: goto714
SetObjProperty( item, "NoLoot", 1 );
703: local #11
704: "NoLoot"
705: 1L
706: Func(2,6): SetObjProperty
707: #
IDItem( mobile, item );
708: local #2
709: local #11
710: makelocal
711: jmp userfunc @950
712: #
713: leave block(3)
714: stepforeach @561
715: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipItem" ))
716: local #5
717: "EquipItem"
718: Func(6,3): GetConfigStringDictionary
719: initforeach @793
SleepMS(5);
720: 5L
721: Func(3,0): Sleepms
722: #
var item := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, _entry_iter, 1,
723: decl local #0
724: local #2
725: get member id 'x' (0)
726: local #2
727: get member id 'y' (1)
728: local #2
729: get member id 'z' (2)
730: local #8
731: 1L
732: local #2
733: get member id 'realm' (112)
734: Func(2,24): CreateItemAtLocation
735: :=
736: #
if( item.errortext )
737: local #9
738: get member 'errortext'
739: if false goto 757
PrintTextAbove( mobile, "Error could not create <"+_entry_iter+"> -->"+item.err
740: local #2
741: "Error could not create <"
742: local #8
743: +
744: "> -->"
745: +
746: local #9
747: get member 'errortext'
748: +
749: 3L
750: 1000L
751: 0L
752: Func(2,11): PrintTextAbove
753: #
continue;
754: leave block(1)
755: goto793
756: goto778
elseif( !EquipItem( mobile, item ))
757: local #2
758: local #9
759: Func(2,25): EquipItem
760: if true goto 778
PrintTextAbove( mobile, "Unable to equip - "+item.desc+" - destroying." );
761: local #2
762: "Unable to equip - "
763: local #9
764: get member id 'desc' (19)
765: +
766: " - destroying."
767: +
768: 3L
769: 1000L
770: 0L
771: Func(2,11): PrintTextAbove
772: #
DestroyItem( item );
773: local #9
774: Func(2,26): DestroyItem
775: #
continue;
776: leave block(1)
777: goto793
item.color := CInt( entry );
778: local #9
779: local #6
780: Func(0,2): CInt
781: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
782: local #9
783: "NoLoot"
784: 1L
785: Func(2,6): SetObjProperty
786: #
IDItem( mobile, item );
787: local #2
788: local #9
789: makelocal
790: jmp userfunc @950
791: #
792: leave block(1)
793: stepforeach @720
794: leave block(3)
foreach entry in ( GetConfigStringDictionary( index_elem, "EquipMount" ))
795: local #5
796: "EquipMount"
797: Func(6,3): GetConfigStringDictionary
798: initforeach @838
SleepMS(5);
799: 5L
800: Func(3,0): Sleepms
801: #
var item := MP_Mount( mobile, _entry_iter );
802: decl local #0
803: local #2
804: local #8
805: makelocal
806: jmp userfunc @1062
807: :=
808: #
if( item.errortext )
809: local #9
810: get member 'errortext'
811: if false goto 828
PrintTextAbove( mobile, "Error could not mount <"+_entry_iter+"> -->"+item.erro
812: local #2
813: "Error could not mount <"
814: local #8
815: +
816: "> -->"
817: +
818: local #9
819: get member 'errortext'
820: +
821: 3L
822: 1000L
823: 0L
824: Func(2,11): PrintTextAbove
825: #
continue;
826: leave block(1)
827: goto838
item.color := CInt( entry );
828: local #9
829: local #6
830: Func(0,2): CInt
831: set member id 'color' (7) #
SetObjProperty( item, "NoLoot", 1 );
832: local #9
833: "NoLoot"
834: 1L
835: Func(2,6): SetObjProperty
836: #
837: leave block(1)
838: stepforeach @799
839: leave block(3)
return 1;
840: 1L
841: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 49
function SetMobileProtections( mobile, protections )
842: pop param 'protections'
843: pop param 'mobile'
return SetObjProperty( mobile, "Protections", protections );
844: local #1
845: "Protections"
846: local #0
847: Func(2,6): SetObjProperty
848: return
c:/ZH099/pkg/systems/brainAI/include/npcCommands.inc, Line 104
function AI_SetAnchor( npc, x, y, distance_start, percent_subtract, no_wake:=NO
849: pop param 'no_wake'
850: pop param 'percent_subtract'
851: pop param 'distance_start'
852: pop param 'y'
853: pop param 'x'
854: pop param 'npc'
var ev		:= struct;
855: decl local #6
856: struct
857: :=
858: #
ev.+type	:= NPCEVENT_ANCHOR;
859: local #6
860: "type"
861: .+
862: 10485781L
863: := #
ev.+x		:= x;
864: local #6
865: "x"
866: .+
867: local #4
868: := #
ev.+y		:= y;
869: local #6
870: "y"
871: .+
872: local #3
873: := #
ev.+distance	:= distance_start;
874: local #6
875: "distance"
876: .+
877: local #2
878: := #
ev.+percent	:= percent_subtract;
879: local #6
880: "percent"
881: .+
882: local #1
883: := #
ev.+WakeUp	:= no_wake;
884: local #6
885: "WakeUp"
886: .+
887: local #0
888: := #
ev.+process	:= GetProcess( GetPid() );
889: local #6
890: "process"
891: .+
892: Func(3,4): GetPid
893: Func(3,3): GetProcess
894: := #
return SendEvent( npc, ev );
895: local #5
896: local #6
897: Func(2,21): SendEvent
898: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 32
function GetObjProtections( mobile )
899: pop param 'mobile'
var protections := GetObjProperty( mobile, "Protections" );
900: decl local #1
901: local #0
902: "Protections"
903: Func(2,7): GetObjProperty
904: :=
905: #
if( !protections )
906: local #1
907: if true goto 910
protections := struct;
908: struct
909: local1 := 
return protections;
910: local #1
911: return
c:/ZH099/pkg/items/equipment/include/protections.inc, Line 12
function GetProtections()
var protections := array{   "AirProtection",
912: decl local #0
913: array
914: "AirProtection"
915: init{}
916: "EarthProtection"
917: init{}
918: "FireProtection"
919: init{}
920: "WaterProtection"
921: init{}
922: "HolyProtection"
923: init{}
924: "NecroProtection"
925: init{}
926: "PoisonProtection"
927: init{}
928: "PermPoisonProtection"
929: init{}
930: "MagicProtection"
931: init{}
932: "PermMagicProtection"
933: init{}
934: "PhysicalProtection"
935: init{}
936: "SpellReflection"
937: init{}
938: "PermSpellReflection"
939: init{}
940: "FreeAction"
941: init{}
942: "HealingIncrease"
943: init{}
944: "AcidProtection"
945: init{}
946: :=
947: #
return protections;
948: local #0
949: return
c:/ZH099/pkg/skills/mage/itemid/include/itemID.inc, Line 16
function IDItem( mobile, item )
950: pop param 'item'
951: pop param 'mobile'
var charges := GetObjProperty( item, "Charges" ),
952: decl local #2
953: local #0
954: "Charges"
955: Func(2,7): GetObjProperty
956: :=
957: #
958: decl local #3
959: local #0
960: "ChanceOfEffect"
961: Func(2,7): GetObjProperty
962: :=
963: #
964: decl local #4
965: local #0
966: "PoisonLevel"
967: Func(2,7): GetObjProperty
968: :=
969: #
if( GetObjProperty( item, "UnIDedMagicalItem" ) ||
970: local #0
971: "UnIDedMagicalItem"
972: Func(2,7): GetObjProperty
973: local #0
974: "IsGMItem"
975: Func(2,7): GetObjProperty
976: ||
977: local #0
978: "EnchantColor"
979: Func(2,7): GetObjProperty
980: ||
981: if false goto 986
NameByEnchant( item );
982: local #0
983: makelocal
984: jmp userfunc @1175
985: #
if( item.container.IsA( POLCLASS_CORPSE ) && GetObjProperty( item.container, "n
986: local #0
987: get member id 'container' (15)
988: 7L
989: Call Method id isa (#0, 1 params)
990: local #0
991: get member id 'container' (15)
992: "npctemplate"
993: Func(2,7): GetObjProperty
994: &&
995: if false goto 1005
PrintTextAbove( item.container, item.desc );
996: local #0
997: get member id 'container' (15)
998: local #0
999: get member id 'desc' (19)
1000: 3L
1001: 1000L
1002: 0L
1003: Func(2,11): PrintTextAbove
1004: #
SendSysMessage( mobile, "It appears to be "+item.desc+"." );
1005: local #1
1006: "It appears to be "
1007: local #0
1008: get member id 'desc' (19)
1009: +
1010: "."
1011: +
1012: 3L
1013: 1000L
1014: Func(2,10): SendSysMessage
1015: #
if( charges )
1016: local #2
1017: if false goto 1029
SendSysMessage( mobile, "There is "+charges+" charges left." );
1018: local #1
1019: "There is "
1020: local #2
1021: +
1022: " charges left."
1023: +
1024: 3L
1025: 1000L
1026: Func(2,10): SendSysMessage
1027: #
1028: goto1054
elseif( chance_effect )
1029: local #3
1030: if false goto 1042
SendSysMessage( mobile, "It has "+chance_effect+"% chances of effects," );
1031: local #1
1032: "It has "
1033: local #3
1034: +
1035: "% chances of effects,"
1036: +
1037: 3L
1038: 1000L
1039: Func(2,10): SendSysMessage
1040: #
1041: goto1054
elseif( poison_lvl )
1042: local #4
1043: if false goto 1054
SendSysMessage( mobile, "Cursed with poison level "+poison_lvl+"." );
1044: local #1
1045: "Cursed with poison level "
1046: local #4
1047: +
1048: "."
1049: +
1050: 3L
1051: 1000L
1052: Func(2,10): SendSysMessage
1053: #
SetObjProperty( item, "IDed", mobile.serial );
1054: local #0
1055: "IDed"
1056: local #1
1057: get member id 'serial' (6)
1058: Func(2,6): SetObjProperty
1059: #
return 1;
1060: 1L
1061: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 98
function MP_Mount( mobile, npc )
1062: pop param 'npc'
1063: pop param 'mobile'
mobile.graphic := 400 + mobile.gender;
1064: local #1
1065: 400L
1066: local #1
1067: get member id 'gender' (28)
1068: +
1069: set member id 'graphic' (5) #
var mount_piece := MP_GetMount( mobile );
1070: decl local #2
1071: local #1
1072: makelocal
1073: jmp userfunc @2171
1074: :=
1075: #
if( mount_piece )
1076: local #2
1077: if false goto 1082
return error{"errortext":="Mobile is already mounted."};
1078: error
1079: "Mobile is already mounted."
1080: addmember-assign(errortext)
1081: return
var mount_graphic := MP_GetMountGraphic( npc );
1082: decl local #3
1083: local #0
1084: makelocal
1085: jmp userfunc @2188
1086: :=
1087: #
if( !mount_graphic )
1088: local #3
1089: if true goto 1092
return mount_graphic;
1090: local #3
1091: return
mount_piece := CreateItemAtLocation( mobile.x, mobile.y, mobile.z, "MountPiece"
1092: local #1
1093: get member id 'x' (0)
1094: local #1
1095: get member id 'y' (1)
1096: local #1
1097: get member id 'z' (2)
1098: "MountPiece"
1099: 1L
1100: "britannia"
1101: Func(2,24): CreateItemAtLocation
1102: local2 := 
mount_piece.graphic := mount_graphic;
1103: local #2
1104: local #3
1105: set member id 'graphic' (5) #
mount_piece.color := npc.color;
1106: local #2
1107: local #0
1108: get member id 'color' (7)
1109: set member id 'color' (7) #
SetName( mount_piece, npc.name );
1110: local #2
1111: local #0
1112: get member id 'name' (3)
1113: Func(2,18): SetName
1114: #
SetObjProperty( mount_piece, "serial", npc.serial );
1115: local #2
1116: "serial"
1117: local #0
1118: get member id 'serial' (6)
1119: Func(2,6): SetObjProperty
1120: #
SetObjProperty( mount_piece, "color", npc.color );
1121: local #2
1122: "color"
1123: local #0
1124: get member id 'color' (7)
1125: Func(2,6): SetObjProperty
1126: #
var result := EquipItem( mobile, mount_piece );
1127: decl local #4
1128: local #1
1129: local #2
1130: Func(2,25): EquipItem
1131: :=
1132: #
if( !result )
1133: local #4
1134: if true goto 1141
DestroyItem( mount_piece );
1135: local #2
1136: Func(2,26): DestroyItem
1137: #
return result;
1138: local #4
1139: return
1140: goto1144
mount_piece.movable := 0;
1141: local #2
1142: 0L
1143: set member id 'movable' (20) #
mobile.facing := npc.facing;
1144: local #1
1145: local #0
1146: get member id 'facing' (9)
1147: set member id 'facing' (9) #
MoveObjectToLocation( npc, 5140, 1773, 0, "britannia", MOVEOBJECT_FORCELOCATION
1148: local #0
1149: 5140L
1150: 1773L
1151: 0L
1152: "britannia"
1153: 1073741824L
1154: Func(2,27): MoveObjectToLocation
1155: #
SetObjProperty( npc, "mounted", 1 );
1156: local #0
1157: "mounted"
1158: 1L
1159: Func(2,6): SetObjProperty
1160: #
SetObjProperty( npc, "MustSleep", mobile.serial );
1161: local #0
1162: "MustSleep"
1163: local #1
1164: get member id 'serial' (6)
1165: Func(2,6): SetObjProperty
1166: #
npc.hidden := 1;
1167: local #0
1168: 1L
1169: set member id 'hidden' (32) #
npc.frozen := 1;
1170: local #0
1171: 1L
1172: set member id 'frozen' (34) #
return mount_piece;
1173: local #2
1174: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 21
function NameByEnchant( item )
1175: pop param 'item'
EraseObjProperty( item, "UnIDedMagicalItem" );
1176: local #0
1177: "UnIDedMagicalItem"
1178: Func(2,17): EraseObjProperty
1179: #
var base_name := GetObjProperty( item, "BaseName" );
1180: decl local #1
1181: local #0
1182: "BaseName"
1183: Func(2,7): GetObjProperty
1184: :=
1185: #
if( !base_name )
1186: local #1
1187: if true goto 1207
var item_cfg := ReadConfigFile( ":*:itemdesc" ),
1188: decl local #0
1189: ":*:itemdesc"
1190: Func(6,0): ReadConfigFile
1191: :=
1192: #
1193: decl local #1
1194: local #2
1195: local #0
1196: get member id 'objtype' (4)
1197: [] 1
1198: get member id 'desc' (19)
1199: :=
1200: #
SetName( item, item_name );
1201: local #0
1202: local #3
1203: Func(2,18): SetName
1204: #
1205: leave block(2)
1206: goto1211
SetName( item, base_name );
1207: local #0
1208: local #1
1209: Func(2,18): SetName
1210: #
var enchanted_name := GetObjProperty( item, "Enchanted" );;
1211: decl local #2
1212: local #0
1213: "Enchanted"
1214: Func(2,7): GetObjProperty
1215: :=
1216: #
if( enchanted_name )
1217: local #2
1218: if false goto 1228
SetName( item, enchanted_name+" "+item.desc );
1219: local #0
1220: local #2
1221: " "
1222: +
1223: local #0
1224: get member id 'desc' (19)
1225: +
1226: Func(2,18): SetName
1227: #
var enchanted_color := GetObjProperty( item, "EnchantColor" );
1228: decl local #3
1229: local #0
1230: "EnchantColor"
1231: Func(2,7): GetObjProperty
1232: :=
1233: #
if( enchanted_color )
1234: local #3
1235: if false goto 1243
item.color := enchanted_color;
1236: local #0
1237: local #3
1238: set member id 'color' (7) #
EraseObjProperty( item, "EnchantColor" );
1239: local #0
1240: "EnchantColor"
1241: Func(2,17): EraseObjProperty
1242: #
var isGMItem := GetObjProperty( item, "IsGMItem" );
1243: decl local #4
1244: local #0
1245: "IsGMItem"
1246: Func(2,7): GetObjProperty
1247: :=
1248: #
if( isGMItem )
1249: local #4
1250: if false goto 1257
SetName( item, isGMItem );
1251: local #0
1252: local #4
1253: Func(2,18): SetName
1254: #
return 1;
1255: 1L
1256: return
var hitScript := GetObjProperty( item, "HitScriptNumber" );
1257: decl local #5
1258: local #0
1259: "HitScriptNumber"
1260: Func(2,7): GetObjProperty
1261: :=
1262: #
if( hitScript )
1263: local #5
1264: if false goto 1270
RenameByHitscript( item, hitScript );
1265: local #0
1266: local #5
1267: makelocal
1268: jmp userfunc @1599
1269: #
var onHitScript := GetObjProperty( item, "OnHitScriptNumber" );
1270: decl local #6
1271: local #0
1272: "OnHitScriptNumber"
1273: Func(2,7): GetObjProperty
1274: :=
1275: #
if( onHitScript )
1276: local #6
1277: if false goto 1283
RenameByOnHitscript( item, onHitScript );
1278: local #0
1279: local #6
1280: makelocal
1281: jmp userfunc @1724
1282: #
var dmg_mode := item.dmg_mod;
1283: decl local #7
1284: local #0
1285: get member id 'dmg_mod' (91)
1286: :=
1287: #
if( dmg_mode )
1288: local #7
1289: if false goto 1296
RenameByMod( item, "Damage", dmg_mode );
1290: local #0
1291: "Damage"
1292: local #7
1293: makelocal
1294: jmp userfunc @1685
1295: #
var ar_mode := item.ar_mod;
1296: decl local #8
1297: local #0
1298: get member id 'ar_mod' (31)
1299: :=
1300: #
if( ar_mode )
1301: local #8
1302: if false goto 1309
RenameByMod( item, "Ar", ar_mode );
1303: local #0
1304: "Ar"
1305: local #8
1306: makelocal
1307: jmp userfunc @1685
1308: #
var ar_bonus := GetObjProperty( item, "ArBonus" );
1309: decl local #9
1310: local #0
1311: "ArBonus"
1312: Func(2,7): GetObjProperty
1313: :=
1314: #
if( ar_bonus )
1315: local #9
1316: if false goto 1326
RenameByMod( item, "ArBonus", CInt( ar_bonus * 5 ));
1317: local #0
1318: "ArBonus"
1319: local #9
1320: 5L
1321: *
1322: Func(0,2): CInt
1323: makelocal
1324: jmp userfunc @1685
1325: #
var hp_mode := item.maxhp_mod;
1326: decl local #10
1327: local #0
1328: get member id 'maxhp_mod' (89)
1329: :=
1330: #
if( hp_mode )
1331: local #10
1332: if false goto 1342
RenameByMod( item, "MaxHP", CInt( hp_mode / 2 ));
1333: local #0
1334: "MaxHP"
1335: local #10
1336: 2L
1337: /
1338: Func(0,2): CInt
1339: makelocal
1340: jmp userfunc @1685
1341: #
var skill_mod := GetEquipmentModifiers( item );
1342: decl local #11
1343: local #0
1344: 4L
1345: makelocal
1346: jmp userfunc @2066
1347: :=
1348: #
if( skill_mod.Size() )
1349: local #11
1350: Call Method id size (#48, 0 params)
1351: if false goto 1373
var skill_keys := skill_mod.Keys();
1352: decl local #0
1353: local #11
1354: Call Method id keys (#56, 0 params)
1355: :=
1356: #
foreach modifier in skill_keys
1357: local #12
1358: initforeach @1370
RenameByAttriMod( item, modifier, skill_mod[modifier] );
1359: local #0
1360: local #13
1361: local #11
1362: local #13
1363: [] 1
1364: makelocal
1365: jmp userfunc @1559
1366: #
SleepMS(5);
1367: 5L
1368: Func(3,0): Sleepms
1369: #
1370: stepforeach @1359
1371: leave block(3)
1372: leave block(1)
foreach protection in immunities
1373: global #2
1374: initforeach @1393
var mobile_prot := GetObjProperty( item, protection );
1375: decl local #0
1376: local #0
1377: local #12
1378: Func(2,7): GetObjProperty
1379: :=
1380: #
if( mobile_prot )
1381: local #15
1382: if false goto 1389
RenameByImmunity( item, protection, mobile_prot );
1383: local #0
1384: local #12
1385: local #15
1386: makelocal
1387: jmp userfunc @1660
1388: #
SleepMS(5);
1389: 5L
1390: Func(3,0): Sleepms
1391: #
1392: leave block(1)
1393: stepforeach @1375
1394: leave block(3)
foreach prot in wardings
1395: global #3
1396: initforeach @1414
var charges := GetObjProperty( item, prot );
1397: decl local #0
1398: local #0
1399: local #12
1400: Func(2,7): GetObjProperty
1401: :=
1402: #
if( charges )
1403: local #15
1404: if false goto 1410
RenameByWardings( item, prot );
1405: local #0
1406: local #12
1407: makelocal
1408: jmp userfunc @1785
1409: #
SleepMS(5);
1410: 5L
1411: Func(3,0): Sleepms
1412: #
1413: leave block(1)
1414: stepforeach @1397
1415: leave block(3)
foreach mod in regenerations
1416: global #4
1417: initforeach @1436
var mobile_mod := GetObjProperty( item, mod );
1418: decl local #0
1419: local #0
1420: local #12
1421: Func(2,7): GetObjProperty
1422: :=
1423: #
if( mobile_mod )
1424: local #15
1425: if false goto 1432
RenameByImmunity( item, mod, mobile_mod );
1426: local #0
1427: local #12
1428: local #15
1429: makelocal
1430: jmp userfunc @1660
1431: #
SleepMS(5);
1432: 5L
1433: Func(3,0): Sleepms
1434: #
1435: leave block(1)
1436: stepforeach @1418
1437: leave block(3)
return 1;
1438: 1L
1439: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 35
function NPC_GetNPCConfig( template )
1440: pop param 'template'
if( !template.package )
1441: local #0
1442: get member 'package'
1443: if true goto 1448
template := NPC_ParseTemplateName( template );
1444: local #0
1445: makelocal
1446: jmp userfunc @1497
1447: local0 := 
var npc_cfg := ReadConfigFile( ":"+template.package+":npcdesc" );
1448: decl local #1
1449: ":"
1450: local #0
1451: get member 'package'
1452: +
1453: ":npcdesc"
1454: +
1455: Func(6,0): ReadConfigFile
1456: :=
1457: #
if( npc_cfg.errortext )
1458: local #1
1459: get member 'errortext'
1460: if false goto 1473
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not open :"+templa
1461: error
1462: "Error::NPC_GetNPCConfig() - Could not open :"
1463: local #0
1464: get member 'package'
1465: +
1466: ":npcdesc ->"
1467: +
1468: local #1
1469: get member 'errortext'
1470: +
1471: addmember-assign(errortext)
1472: return
var cfg_elem := npc_cfg[template.template];
1473: decl local #2
1474: local #1
1475: local #0
1476: get member 'template'
1477: [] 1
1478: :=
1479: #
if( cfg_elem.errortext )
1480: local #2
1481: get member 'errortext'
1482: if false goto 1495
return error{"errortext":="Error::NPC_GetNPCConfig() - Could not find elem ["+t
1483: error
1484: "Error::NPC_GetNPCConfig() - Could not find elem ["
1485: local #0
1486: get member 'template'
1487: +
1488: "] ->"
1489: +
1490: local #2
1491: get member 'errortext'
1492: +
1493: addmember-assign(errortext)
1494: return
return cfg_elem;
1495: local #2
1496: return
c:/ZH099/pkg/systems/brainAI/include/npcUtil.inc, Line 11
function NPC_ParseTemplateName( template_name )
1497: pop param 'template_name'
if( template_name.IsA( POLCLASS_NPC ))
1498: local #0
1499: 4L
1500: Call Method id isa (#0, 1 params)
1501: if false goto 1505
template_name := template_name.npctemplate;
1502: local #0
1503: get member id 'npctemplate' (62)
1504: local0 := 
var colon_a := Find( template_name, ":", 1 );
1505: decl local #1
1506: local #0
1507: ":"
1508: 1L
1509: Func(0,9): Find
1510: :=
1511: #
var colon_b := Find( template_name, ":", 2 );
1512: decl local #2
1513: local #0
1514: ":"
1515: 2L
1516: Func(0,9): Find
1517: :=
1518: #
var parsed := struct{"package", "template"};
1519: decl local #3
1520: struct
1521: addmember(package)
1522: addmember(template)
1523: :=
1524: #
if( !colon_a || !colon_b )
1525: local #1
1526: !
1527: local #2
1528: !
1529: ||
1530: if false goto 1538
parsed.package := "";
1531: local #3
1532: ""
1533: set member 'package' #
parsed.template := template_name;
1534: local #3
1535: local #0
1536: set member 'template' #
1537: goto1557
parsed.package := template_name[colon_a+1, colon_b-2];
1538: local #3
1539: local #0
1540: local #1
1541: 1L
1542: +
1543: local #2
1544: 2L
1545: -
1546: [,]
1547: set member 'package' #
parsed.template := template_name[colon_b+1, Len( template_name )];
1548: local #3
1549: local #0
1550: local #2
1551: 1L
1552: +
1553: local #0
1554: Func(0,5): Len
1555: [,]
1556: set member 'template' #
return parsed;
1557: local #3
1558: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 175
function RenameByAttriMod( item, attribute, value )
1559: pop param 'value'
1560: pop param 'attribute'
1561: pop param 'item'
if( !value )
1562: local #0
1563: if true goto 1566
return 0;
1564: 0L
1565: return
if( attribute in AP_ListAttributesByType( "Stat" ))
1566: local #1
1567: "Stat"
1568: makelocal
1569: jmp userfunc @1992
1570: in
1571: if false goto 1577
value := CInt( value / 5 );
1572: local #0
1573: 5L
1574: /
1575: Func(0,2): CInt
1576: local0 := 
var mod_elem := GetEnchantmentElem( item, attribute );
1577: decl local #3
1578: local #2
1579: local #1
1580: makelocal
1581: jmp userfunc @2017
1582: :=
1583: #
var name := CStr ( "Name"+value );
1584: decl local #4
1585: "Name"
1586: local #0
1587: +
1588: Func(0,6): CStr
1589: :=
1590: #
SetAdjective( item, mod_elem, name );
1591: local #2
1592: local #3
1593: local #4
1594: makelocal
1595: jmp userfunc @1802
1596: #
return 1;
1597: 1L
1598: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 118
function RenameByHitscript( item, hitScript )
1599: pop param 'hitScript'
1600: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_hit" );
1601: decl local #2
1602: ":loot:effects_hit"
1603: Func(6,0): ReadConfigFile
1604: :=
1605: #
if( enchantment_cfg.errortext )
1606: local #2
1607: get member 'errortext'
1608: if false goto 1621
PrintTextAbove( item, "Error reading config <:loot:effects_hit> -->"+enchantmen
1609: local #1
1610: "Error reading config <:loot:effects_hit> -->"
1611: local #2
1612: get member 'errortext'
1613: +
1614: 3L
1615: 1000L
1616: 0L
1617: Func(2,11): PrintTextAbove
1618: #
return 0;
1619: 0L
1620: return
var chant_elem := FindConfigElem( enchantment_cfg, hitScript );
1621: decl local #3
1622: local #2
1623: local #0
1624: Func(6,5): FindConfigElem
1625: :=
1626: #
if( chant_elem.errortext )
1627: local #3
1628: get member 'errortext'
1629: if false goto 1646
PrintTextAbove( item, "Error reading chant_elem <"+hitScript+"> -->"+chant_elem
1630: local #1
1631: "Error reading chant_elem <"
1632: local #0
1633: +
1634: "> -->"
1635: +
1636: local #3
1637: get member 'errortext'
1638: +
1639: 3L
1640: 1000L
1641: 0L
1642: Func(2,11): PrintTextAbove
1643: #
return 0;
1644: 0L
1645: return
SetAdjective( item, chant_elem, "Name" );
1646: local #1
1647: local #3
1648: "Name"
1649: makelocal
1650: jmp userfunc @1802
1651: #
SetObjProperty( item, "HitScript", chant_elem.HitScript );
1652: local #1
1653: "HitScript"
1654: local #3
1655: get member id 'hitscript' (94)
1656: Func(2,6): SetObjProperty
1657: #
return 1;
1658: 1L
1659: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 210
function RenameByImmunity( item, immunity, power )
1660: pop param 'power'
1661: pop param 'immunity'
1662: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1663: decl local #3
1664: local #2
1665: local #1
1666: makelocal
1667: jmp userfunc @2017
1668: :=
1669: #
var name := CStr( "Name"+power );
1670: decl local #4
1671: "Name"
1672: local #0
1673: +
1674: Func(0,6): CStr
1675: :=
1676: #
SetAdjective( item, immunity_elem, name );
1677: local #2
1678: local #3
1679: local #4
1680: makelocal
1681: jmp userfunc @1802
1682: #
return 1;
1683: 1L
1684: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 193
function RenameByMod( item, mod, value )
1685: pop param 'value'
1686: pop param 'mod'
1687: pop param 'item'
if( !value )
1688: local #0
1689: if true goto 1692
return 0;
1690: 0L
1691: return
var mod_elem := GetEnchantmentElem( item, mod );
1692: decl local #3
1693: local #2
1694: local #1
1695: makelocal
1696: jmp userfunc @2017
1697: :=
1698: #
var temp := CInt( value / 5 );
1699: decl local #4
1700: local #0
1701: 5L
1702: /
1703: Func(0,2): CInt
1704: :=
1705: #
if( temp )
1706: local #4
1707: if false goto 1722
var name := CStr( "Name"+temp );
1708: decl local #0
1709: "Name"
1710: local #4
1711: +
1712: Func(0,6): CStr
1713: :=
1714: #
SetAdjective( item, mod_elem, name );
1715: local #2
1716: local #3
1717: local #5
1718: makelocal
1719: jmp userfunc @1802
1720: #
1721: leave block(1)
return 1;
1722: 1L
1723: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 138
function RenameByOnHitscript( item, onHitScript )
1724: pop param 'onHitScript'
1725: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:effects_onhit" );
1726: decl local #2
1727: ":loot:effects_onhit"
1728: Func(6,0): ReadConfigFile
1729: :=
1730: #
if( enchantment_cfg.errortext )
1731: local #2
1732: get member 'errortext'
1733: if false goto 1746
PrintTextAbove( item, "Error reading config <:loot:effects_onhit> -->"+enchantm
1734: local #1
1735: "Error reading config <:loot:effects_onhit> -->"
1736: local #2
1737: get member 'errortext'
1738: +
1739: 3L
1740: 1000L
1741: 0L
1742: Func(2,11): PrintTextAbove
1743: #
return 0;
1744: 0L
1745: return
var chant_elem := FindConfigElem( enchantment_cfg, onHitScript );
1746: decl local #3
1747: local #2
1748: local #0
1749: Func(6,5): FindConfigElem
1750: :=
1751: #
if( chant_elem.errortext )
1752: local #3
1753: get member 'errortext'
1754: if false goto 1771
PrintTextAbove( item, "Error reading chant_elem <"+onHitScript+"> -->"+chant_el
1755: local #1
1756: "Error reading chant_elem <"
1757: local #0
1758: +
1759: "> -->"
1760: +
1761: local #3
1762: get member 'errortext'
1763: +
1764: 3L
1765: 1000L
1766: 0L
1767: Func(2,11): PrintTextAbove
1768: #
return 0;
1769: 0L
1770: return
SetAdjective( item, chant_elem, "Name" );
1771: local #1
1772: local #3
1773: "Name"
1774: makelocal
1775: jmp userfunc @1802
1776: #
SetObjProperty( item, "OnHitScript", chant_elem.OnHitScript );
1777: local #1
1778: "OnHitScript"
1779: local #3
1780: get member id 'onhitscript' (96)
1781: Func(2,6): SetObjProperty
1782: #
return 1;
1783: 1L
1784: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 220
function RenameByWardings( item, immunity )
1785: pop param 'immunity'
1786: pop param 'item'
var immunity_elem := GetEnchantmentElem( item, immunity );
1787: decl local #2
1788: local #1
1789: local #0
1790: makelocal
1791: jmp userfunc @2017
1792: :=
1793: #
SetAdjective( item, immunity_elem, "Name" );
1794: local #1
1795: local #2
1796: "Name"
1797: makelocal
1798: jmp userfunc @1802
1799: #
return 1;
1800: 1L
1801: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 229
function SetAdjective( item, elem, value )
1802: pop param 'value'
1803: pop param 'elem'
1804: pop param 'item'
var colorkey := "Color";
1805: decl local #3
1806: "Color"
1807: :=
1808: #
if( GetObjProperty( item, "Cursed" ))
1809: local #2
1810: "Cursed"
1811: Func(2,7): GetObjProperty
1812: if false goto 1821
value := "C"+value;
1813: "C"
1814: local #0
1815: +
1816: local0 := 
colorkey := "C"+colorkey;
1817: "C"
1818: local #3
1819: +
1820: local3 := 
var position := GetConfigString( elem, "Place" );
1821: decl local #4
1822: local #1
1823: "Place"
1824: Func(6,6): GetConfigString
1825: :=
1826: #
if( position.errortext )
1827: local #4
1828: get member 'errortext'
1829: if false goto 1842
PrintTextAbove( item, "Error reading position <Place> -->"+position.errortext )
1830: local #2
1831: "Error reading position <Place> -->"
1832: local #4
1833: get member 'errortext'
1834: +
1835: 3L
1836: 1000L
1837: 0L
1838: Func(2,11): PrintTextAbove
1839: #
return 0;
1840: 0L
1841: return
var adjective := GetConfigString( elem, value );
1842: decl local #5
1843: local #1
1844: local #0
1845: Func(6,6): GetConfigString
1846: :=
1847: #
if( adjective.errortext )
1848: local #5
1849: get member 'errortext'
1850: if false goto 1867
PrintTextAbove( item, "Error reading adjective <"+value+"> -->"+adjective.error
1851: local #2
1852: "Error reading adjective <"
1853: local #0
1854: +
1855: "> -->"
1856: +
1857: local #5
1858: get member 'errortext'
1859: +
1860: 3L
1861: 1000L
1862: 0L
1863: Func(2,11): PrintTextAbove
1864: #
return 0;
1865: 0L
1866: return
if( position == "Prefix" )
1867: local #4
1868: "Prefix"
1869: ==
1870: if false goto 1884
SetName( item, Lower( adjective+" "+TruncateArticle( item.desc )));
1871: local #2
1872: local #5
1873: " "
1874: +
1875: local #2
1876: get member id 'desc' (19)
1877: makelocal
1878: jmp userfunc @1921
1879: +
1880: Func(0,3): Lower
1881: Func(2,18): SetName
1882: #
1883: goto1896
SetName( item, Lower( TruncateArticle( item.desc )+" "+adjective ));
1884: local #2
1885: local #2
1886: get member id 'desc' (19)
1887: makelocal
1888: jmp userfunc @1921
1889: " "
1890: +
1891: local #5
1892: +
1893: Func(0,3): Lower
1894: Func(2,18): SetName
1895: #
SetName( item, AddArticle( item.desc ));
1896: local #2
1897: local #2
1898: get member id 'desc' (19)
1899: makelocal
1900: jmp userfunc @1959
1901: Func(2,18): SetName
1902: #
var color_elem := GetConfigString( elem, colorkey );
1903: decl local #6
1904: local #1
1905: local #3
1906: Func(6,6): GetConfigString
1907: :=
1908: #
var color_item := CInt( color_elem );
1909: decl local #7
1910: local #6
1911: Func(0,2): CInt
1912: :=
1913: #
if( color_item )
1914: local #7
1915: if false goto 1919
item.color := color_item;
1916: local #2
1917: local #7
1918: set member id 'color' (7) #
return 1;
1919: 1L
1920: return
c:/ZH099/scripts/include/string.inc, Line 22
function TruncateArticle( text )
1921: pop param 'text'
text := CStr(text);
1922: local #0
1923: Func(0,6): CStr
1924: local0 := 
var i := Len(text);
1925: decl local #1
1926: local #0
1927: Func(0,5): Len
1928: :=
1929: #
if ( Lower(text[1, 2]) == "a " )
1930: local #0
1931: 1L
1932: 2L
1933: [,]
1934: Func(0,3): Lower
1935: "a "
1936: ==
1937: if false goto 1944
text := text[3, i];
1938: local #0
1939: 3L
1940: local #1
1941: [,]
1942: local0 := 
1943: goto1957
elseif ( Lower(text[1, 3]) == "an " )
1944: local #0
1945: 1L
1946: 3L
1947: [,]
1948: Func(0,3): Lower
1949: "an "
1950: ==
1951: if false goto 1957
text := text[4, i];
1952: local #0
1953: 4L
1954: local #1
1955: [,]
1956: local0 := 
return text;
1957: local #0
1958: return
c:/ZH099/scripts/include/string.inc, Line 35
function AddArticle( text )
1959: pop param 'text'
var vowels := array{"a", "e", "i", "o", "u"};
1960: decl local #1
1961: array
1962: "a"
1963: init{}
1964: "e"
1965: init{}
1966: "i"
1967: init{}
1968: "o"
1969: init{}
1970: "u"
1971: init{}
1972: :=
1973: #
if ( Lower(text[1]) in vowels )
1974: local #0
1975: 1L
1976: [] 1
1977: Func(0,3): Lower
1978: local #1
1979: in
1980: if false goto 1986
text := "an "+text;
1981: "an "
1982: local #0
1983: +
1984: local0 := 
1985: goto1990
text := "a "+text;
1986: "a "
1987: local #0
1988: +
1989: local0 := 
return text;
1990: local #0
1991: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 69
function AP_ListAttributesByType( type:="" )
1992: pop param 'type'
if( !type )
1993: local #0
1994: if true goto 2004
var cfg_file := ReadConfigFile( ":attributes:attributes" );
1995: decl local #0
1996: ":attributes:attributes"
1997: Func(6,0): ReadConfigFile
1998: :=
1999: #
return GetConfigStringKeys( cfg_file );
2000: local #1
2001: Func(6,4): GetConfigStringKeys
2002: return
2003: leave block(1)
type := Lower( type );
2004: local #0
2005: Func(0,3): Lower
2006: local0 := 
var data_elem := AP_GetAttributeDataElem( "Categories" );
2007: decl local #1
2008: "Categories"
2009: makelocal
2010: jmp userfunc @2276
2011: :=
2012: #
return data_elem.GetProp( type );
2013: local #1
2014: local #0
2015: Call Method id getprop (#35, 1 params)
2016: return
c:/ZH099/pkg/systems/loot/include/identify.inc, Line 158
function GetEnchantmentElem( item, elem )
2017: pop param 'elem'
2018: pop param 'item'
var enchantment_cfg := ReadConfigFile( ":loot:enchant_desc" );
2019: decl local #2
2020: ":loot:enchant_desc"
2021: Func(6,0): ReadConfigFile
2022: :=
2023: #
if( enchantment_cfg.errortext )
2024: local #2
2025: get member 'errortext'
2026: if false goto 2039
PrintTextAbove( item, "Error reading config <:loot:enchant_desc> -->"+enchantme
2027: local #1
2028: "Error reading config <:loot:enchant_desc> -->"
2029: local #2
2030: get member 'errortext'
2031: +
2032: 3L
2033: 1000L
2034: 0L
2035: Func(2,11): PrintTextAbove
2036: #
return 0;
2037: 0L
2038: return
var chant_elem := FindConfigElem( enchantment_cfg, elem );
2039: decl local #3
2040: local #2
2041: local #0
2042: Func(6,5): FindConfigElem
2043: :=
2044: #
if( chant_elem.errortext )
2045: local #3
2046: get member 'errortext'
2047: if false goto 2064
PrintTextAbove( item, "Error reading chant_elem <"+elem+"> -->"+chant_elem.erro
2048: local #1
2049: "Error reading chant_elem <"
2050: local #0
2051: +
2052: "> -->"
2053: +
2054: local #3
2055: get member 'errortext'
2056: +
2057: 3L
2058: 1000L
2059: 0L
2060: Func(2,11): PrintTextAbove
2061: #
return 0;
2062: 0L
2063: return
return chant_elem;
2064: local #3
2065: return
c:/ZH099/pkg/items/equipment/include/equipment.inc, Line 81
function GetEquipmentModifiers( item, flags:=EQUIP_CSTM_OR_ITEMDESC )
2066: pop param 'flags'
2067: pop param 'item'
var cstm_mods;
2068: decl local #2
2069: #
if( flags & EQUIP_CUSTOM_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2070: local #0
2071: 2L
2072: &
2073: local #0
2074: 4L
2075: &
2076: ||
2077: if false goto 2096
cstm_mods := GetObjProperty( item, "AttribMods" );
2078: local #1
2079: "AttribMods"
2080: Func(2,7): GetObjProperty
2081: local2 := 
if( Lower( TypeOf( cstm_mods )) != "dictionary" )
2082: local #2
2083: Func(0,1): TypeOf
2084: Func(0,3): Lower
2085: "dictionary"
2086: <>
2087: if false goto 2090
cstm_mods := dictionary;
2088: dictionary
2089: local2 := 
if( flags & EQUIP_CSTM_OR_ITEMDESC )
2090: local #0
2091: 4L
2092: &
2093: if false goto 2096
return cstm_mods;
2094: local #2
2095: return
var itemdesc_mods := dictionary;
2096: decl local #3
2097: dictionary
2098: :=
2099: #
if( flags & EQUIP_ITEMDESC_MODS || flags & EQUIP_CSTM_OR_ITEMDESC )
2100: local #0
2101: 1L
2102: &
2103: local #0
2104: 4L
2105: &
2106: ||
2107: if false goto 2143
var item_cfg := ReadConfigFile( ":*:itemdesc" );
2108: decl local #0
2109: ":*:itemdesc"
2110: Func(6,0): ReadConfigFile
2111: :=
2112: #
item_cfg := item_cfg[item.objtype];
2113: local #4
2114: local #1
2115: get member id 'objtype' (4)
2116: [] 1
2117: local4 := 
var modifier := Abs( item_cfg.DefaultDex ),
2118: decl local #1
2119: local #4
2120: get member 'DefaultDex'
2121: Func(7,3): Abs
2122: :=
2123: #
2124: decl local #2
2125: local #1
2126: "DefaultDex"
2127: Func(2,7): GetObjProperty
2128: Func(0,2): CInt
2129: :=
2130: #
if( cust_modifier )
2131: local #6
2132: if false goto 2137
modifier := modifier - cust_modifier;
2133: local #5
2134: local #6
2135: -
2136: local5 := 
itemdesc_mods["dexterity"] := -modifier;
2137: local #3
2138: "dexterity"
2139: local #5
2140: unary -
2141: [] := (1) #
2142: leave block(3)
if( flags & EQUIP_BOTH_MODS )
2143: local #0
2144: 3L
2145: &
2146: if false goto 2159
foreach modifier in ( cstm_mods )
2147: local #2
2148: initforeach @2157
itemdesc_mods.Insert( _modifier_iter, modifier );
2149: local #3
2150: local #6
2151: local #4
2152: Call Method id insert (#50, 2 params)
2153: #
SleepMS(2);
2154: 2L
2155: Func(3,0): Sleepms
2156: #
2157: stepforeach @2149
2158: leave block(3)
if( itemdesc_mods.Size() > 0 )
2159: local #3
2160: Call Method id size (#48, 0 params)
2161: 0L
2162: >
2163: if false goto 2167
return itemdesc_mods;
2164: local #3
2165: return
2166: goto2169
return cstm_mods;
2167: local #2
2168: return
2169: 0L
2170: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 224
function MP_GetMount( mobile )
2171: pop param 'mobile'
var mount_piece := GetEquipmentByLayer( mobile, LAYER_MOUNT );
2172: decl local #1
2173: local #0
2174: 25L
2175: Func(2,1): GetEquipmentByLayer
2176: :=
2177: #
if( mount_piece.errortext )
2178: local #1
2179: get member 'errortext'
2180: if false goto 2186
return error{"errortext":=mount_piece.errortext};
2181: error
2182: local #1
2183: get member 'errortext'
2184: addmember-assign(errortext)
2185: return
return 1;
2186: 1L
2187: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 40
function MP_GetMountGraphic( mobile )
2188: pop param 'mobile'
var mobile_graphic;
2189: decl local #1
2190: #
if( mobile.IsA( POLCLASS_NPC ))
2191: local #0
2192: 4L
2193: Call Method id isa (#0, 1 params)
2194: if false goto 2200
mobile_graphic := Hex( mobile.graphic );
2195: local #0
2196: get member id 'graphic' (5)
2197: Func(0,7): Hex
2198: local1 := 
2199: goto2204
mobile_graphic := Hex( CInt( mobile ));
2200: local #0
2201: Func(0,2): CInt
2202: Func(0,7): Hex
2203: local1 := 
var elem := MP_GetMountsCfgElem( "MobileToMount" );
2204: decl local #2
2205: "MobileToMount"
2206: 0L
2207: makelocal
2208: jmp userfunc @2232
2209: :=
2210: #
var tile_graphic := GetConfigInt( elem, mobile_graphic );
2211: decl local #3
2212: local #2
2213: local #1
2214: Func(6,7): GetConfigInt
2215: :=
2216: #
if( tile_graphic )
2217: local #3
2218: if false goto 2222
return tile_graphic;
2219: local #3
2220: return
2221: goto2230
return error{"errortext":="Error::MP_GetMountGraphic() - No mount tile graphic 
2222: error
2223: "Error::MP_GetMountGraphic() - No mount tile graphic matches mobile graphic '"
2224: local #1
2225: +
2226: "'"
2227: +
2228: addmember-assign(errortext)
2229: return
2230: 0L
2231: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 26
function MP_GetMountsCfgElem( elem_name, byref cfg_file:=0 )
2232: pop param byref 'cfg_file'
2233: pop param 'elem_name'
if( !cfg_file )
2234: local #0
2235: if true goto 2239
cfg_file := MP_GetMountsCfgFile();
2236: makelocal
2237: jmp userfunc @2260
2238: local0 := 
var elem := cfg_file[elem_name];
2239: decl local #2
2240: local #0
2241: local #1
2242: [] 1
2243: :=
2244: #
if( elem.errortext )
2245: local #2
2246: get member 'errortext'
2247: if false goto 2258
SysLog( "Error::MP_GetMountsCfgElem() - Unable to find elem ["+elem_name+"] ->"
2248: "Error::MP_GetMountsCfgElem() - Unable to find elem ["
2249: local #1
2250: +
2251: "] ->"
2252: +
2253: local #2
2254: get member 'errortext'
2255: +
2256: Func(3,2): SysLog
2257: #
return elem;
2258: local #2
2259: return
c:/ZH099/pkg/items/mounts/include/mounts.inc, Line 18
function MP_GetMountsCfgFile()
var cfg := ReadConfigFile( ":mounts:mounts" );
2260: decl local #0
2261: ":mounts:mounts"
2262: Func(6,0): ReadConfigFile
2263: :=
2264: #
if( cfg.errortext )
2265: local #0
2266: get member 'errortext'
2267: if false goto 2274
SysLog( "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2268: "Error::MP_GetMountsCfgFile() - Unable to open [:mounts:mounts.cfg] ->"
2269: local #0
2270: get member 'errortext'
2271: +
2272: Func(3,2): SysLog
2273: #
return cfg;
2274: local #0
2275: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 57
function AP_GetAttributeDataElem( elem_name )
2276: pop param 'elem_name'
var data_file := AP_GetAttributesDataFile();
2277: decl local #1
2278: makelocal
2279: jmp userfunc @2305
2280: :=
2281: #
var data_elem := DFFindElement( data_file, elem_name, DF_CREATE );
2282: decl local #2
2283: local #1
2284: local #0
2285: 1L
2286: makelocal
2287: jmp userfunc @2324
2288: :=
2289: #
if( data_elem.errortext )
2290: local #2
2291: get member 'errortext'
2292: if false goto 2303
SysLog( "Error::AP_GetAttributeDataElem() - unable to find elem ["+elem_name+"]
2293: "Error::AP_GetAttributeDataElem() - unable to find elem ["
2294: local #0
2295: +
2296: "] ->"
2297: +
2298: local #2
2299: get member 'errortext'
2300: +
2301: Func(3,2): SysLog
2302: #
return data_elem;
2303: local #2
2304: return
c:/ZH099/pkg/systems/attributes/include/attributes.inc, Line 49
function AP_GetAttributesDataFile()
var data_file := DFOpenDataFile( ":attributes:attributes", DF_CREATE );
2305: decl local #0
2306: ":attributes:attributes"
2307: 1L
2308: 0L
2309: makelocal
2310: jmp userfunc @2386
2311: :=
2312: #
if( data_file.errortext )
2313: local #0
2314: get member 'errortext'
2315: if false goto 2322
SysLog( "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"+
2316: "Error::AP_GetAttributesDataFile() - Unable to open attributes.txt ->"
2317: local #0
2318: get member 'errortext'
2319: +
2320: Func(3,2): SysLog
2321: #
return data_file;
2322: local #0
2323: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 74
function DFFindElement(byref file_ref, elem_name, create:=DF_NO_CREATE)
2324: pop param 'create'
2325: pop param 'elem_name'
2326: pop param byref 'file_ref'
var temp := file_ref.FindElement(CStr(elem_name));
2327: decl local #3
2328: local #2
2329: local #1
2330: Func(0,6): CStr
2331: Call Method id findelement (#72, 1 params)
2332: :=
2333: #
if ( !temp && create )
2334: local #3
2335: !
2336: local #0
2337: &&
2338: if false goto 2356
DF_OutPut("Debug::DFFindElement() - Creating elem: "+CStr(elem_name));
2339: "Debug::DFFindElement() - Creating elem: "
2340: local #1
2341: Func(0,6): CStr
2342: +
2343: makelocal
2344: jmp userfunc @2442
2345: #
file_ref.CreateElement(CStr(elem_name));
2346: local #2
2347: local #1
2348: Func(0,6): CStr
2349: Call Method id createelement (#71, 1 params)
2350: #
temp := file_ref.FindElement(CStr(elem_name));
2351: local #2
2352: local #1
2353: Func(0,6): CStr
2354: Call Method id findelement (#72, 1 params)
2355: local3 := 
if ( temp )
2356: local #3
2357: if false goto 2361
return temp;
2358: local #3
2359: return
2360: goto2384
elseif (create)
2361: local #0
2362: if false goto 2384
var errmsg := error{"errortext":="Error::DFFindElement() - Could not open data 
2363: decl local #0
2364: error
2365: "Error::DFFindElement() - Could not open data elem ["
2366: local #1
2367: +
2368: "] - "
2369: +
2370: local #3
2371: get member 'errortext'
2372: +
2373: addmember-assign(errortext)
2374: :=
2375: #
DF_OutPut(errmsg.errortext);
2376: local #4
2377: get member 'errortext'
2378: makelocal
2379: jmp userfunc @2442
2380: #
return errmsg;
2381: local #4
2382: return
2383: leave block(1)
2384: 0L
2385: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 37
function DFOpenDataFile(file_name, create:=DF_NO_CREATE, flags:=DF_KEYTYPE_STRI
2386: pop param 'flags'
2387: pop param 'create'
2388: pop param 'file_name'
var data_file := OpenDataFile(file_name);
2389: decl local #3
2390: local #2
2391: Func(11,0): OpenDataFile
2392: :=
2393: #
if ( (!data_file) && (create) )
2394: local #3
2395: !
2396: local #1
2397: &&
2398: if false goto 2412
DF_OutPut("Debug::DFOpenDataFile() - Creating data file: "+file_name);
2399: "Debug::DFOpenDataFile() - Creating data file: "
2400: local #2
2401: +
2402: makelocal
2403: jmp userfunc @2442
2404: #
CreateDataFile(file_name, flags);
2405: local #2
2406: local #0
2407: Func(11,1): CreateDataFile
2408: #
data_file := OpenDataFile(file_name);
2409: local #2
2410: Func(11,0): OpenDataFile
2411: local3 := 
if ( data_file )
2412: local #3
2413: if false goto 2417
return data_file;
2414: local #3
2415: return
2416: goto2440
elseif ( create )
2417: local #1
2418: if false goto 2440
var errmsg := error{"errortext":="Error::DFOpenDataFile() - Could not open "+fi
2419: decl local #0
2420: error
2421: "Error::DFOpenDataFile() - Could not open "
2422: local #2
2423: +
2424: " : "
2425: +
2426: local #3
2427: get member 'errortext'
2428: +
2429: addmember-assign(errortext)
2430: :=
2431: #
DF_OutPut(errmsg.errortext);
2432: local #4
2433: get member 'errortext'
2434: makelocal
2435: jmp userfunc @2442
2436: #
return errmsg;
2437: local #4
2438: return
2439: leave block(1)
2440: 0L
2441: return
c:/ZH099/pkg/utils/datafile/include/datafile.inc, Line 122
function DF_OutPut(text)
2442: pop param 'text'
if ( DF_DEBUG_MODE )
2443: global #1
2444: if false goto 2463
var script_name := GetProcess(GetPid()).name;
2445: decl local #0
2446: Func(3,4): GetPid
2447: Func(3,3): GetProcess
2448: get member id 'name' (3)
2449: :=
2450: #
LogToFile("::log/dataFile.log", "["+script_name+"]: "+text, LOG_DATETIME);
2451: "::log/dataFile.log"
2452: "["
2453: local #1
2454: +
2455: "]: "
2456: +
2457: local #0
2458: +
2459: 1L
2460: Func(10,0): LogToFile
2461: #
2462: leave block(1)
return 1;
2463: 1L
2464: return
