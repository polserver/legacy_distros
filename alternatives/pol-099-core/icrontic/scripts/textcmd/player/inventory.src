use uo;
use os;
use util;
use basic;
use cfgfile;

include "include/myutil";
include "include/client";

var bag;

program inventorylist( who, textline )
        if(who.dead)
       	  SendSysMessage( who, "You are dead and cannot perform this action!" );
          return;
        endif

	if ( textline="bag")
		bag := Target( who );
		if ( bag = who )
			bag := who.backpack;
		elseif (!InInventory( who.backpack, bag ) )
			SendSysMessage( who, "That isn't in your inventory!" );
			return;
		endif
	else
		bag := who.backpack;
	endif

	var menuname := "Inventory of " + cstr(who.name);
	var allitems := InventoryListing( who );
	var itemnamelist := dictionary;
	foreach item in allitems
		itemnamelist[ item.desc ] := item.objtype;
	endforeach

	var itemnum := 1;
	var selection := { };
	repeat
		var inventorymenu := createmenu(menuname);
		var i;
		for ( i := itemnum; i <= itemnum+19; i := i + 1 )
			if ( i <= allitems.size() )
				AddMenuItem (inventorymenu, 0, allitems[ i ].desc);
			endif
		endfor

		if ( allitems.size() > (itemnum+19) )
			AddMenuItem (inventorymenu, 0, "NEXT PAGE");
		endif
		selection := SelectMenuItem2(who, inventorymenu);
		if (!selection)
			SendSysMessage( who, "Canceled" );
			return;
		endif
		if ( selection[3] = 21 )
			itemnum := itemnum + 20;
		else
			var selecteditem := (selection[3] + (itemnum-1) );
			if (!selecteditem) return; endif
			MoveTheJunk( who, itemnamelist[ allitems[ selecteditem ].desc ], 
				allitems[ selecteditem ].desc  );
			return;
		endif
	until (selection[3] != 21);

endprogram

function InventoryListing( who )

	var allitems := EnumerateItemsInContainer( bag );
	if ( bag = who.backpack )
		var hair := GetEquipmentByLayer( who, LAYER_HAIR );
		var beard := GetEquipmentByLayer(who, LAYER_BEARD );
		var backpack := who.backpack;
		var mount := GetEquipmentByLayer( who, LAYER_MOUNT );
		foreach item in ListEquippedItems( who );
			if (item != hair and item != beard and item != backpack and item != mount )
				allitems.append( item );
			endif
		endforeach
	endif

	var someitems := { };
	var desclist := dictionary;
	var objtypelist := dictionary;
	foreach item in allitems
		if ( item.container.objtype != 0xEFA )
			if (!desclist.exists(item.desc))
				if (!objtypelist.exists( item.objtype ))
					someitems.append( item );
					objtypelist[ item.objtype ] := item.objtype;
				endif
			endif
		endif
	endforeach

	return someitems;

endfunction

function MajorInventoryListing( who )

	var allitems := EnumerateItemsInContainer( bag );
	if ( bag = who.backpack )
		var hair := GetEquipmentByLayer( who, LAYER_HAIR );
		var beard := GetEquipmentByLayer( who, LAYER_BEARD );
		var backpack := who.backpack;
		var mount := GetEquipmentByLayer( who, LAYER_MOUNT );
		foreach item in ListEquippedItems( who );
			if (item != hair and item != beard and item != backpack and item != mount )
				allitems.append( item );
			endif
		endforeach
	endif

	var someitems := { };
	foreach item in allitems
		if ( item.container.objtype != 0xEFA )
			someitems.append( item );
		endif
	endforeach

	return someitems;

endfunction

function MoveTheJunk( who, objtype, itemdesc )

	SendSysMessage( who, "Moving " + itemdesc + " to the toplevel of your pack" );

	var allitems := MajorInventoryListing( who );

	foreach item in allitems
		if (!reserveitem( item ))
			SendSysMessage( who, "Canceled" );
			return;
		endif
		if ( item.objtype = objtype )
			If (!IsStackable( item ) )
				MoveItemToContainer( item, who.backpack );
			else
				var amt := item.amount;
				var objtype := item.objtype;
				if (DestroyItem( item ))
					CreateItemInContainer( who.backpack, objtype, amt );
				endif
			endif
		endif
	endforeach
				
endfunction

function IsStackable( item )

	set_critical(1);
	var container := item.container;
	if (!item.container) return 0; endif
	var stackable := 0;
	var it := CreateItemInContainer( container, item.objtype, 2 );
	if (!it)
		stackable := 0;
	else
		SubtractAmount( it, 2 );
		stackable := 1;
	endif
	set_critical(0);
	return stackable;

endfunction
