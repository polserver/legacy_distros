use npc;
use os;
use uo;

include "include/eventID";
include "include/sysEvent";
include "include/randName";
include "include/utility";
include "include/mrcSpawn";
include "include/speech";
include "include/client";
include "include/vetement";
include "include/NPCBackpacks";
include "include/vetement";
include "include/findCity";

const RESPAWN_MINUTES := 30;     // In how many minutes will the NPC respawn if killed.
const MAX_SKILLS      := 48;     // There are currently 48 Skills.
const UOBJ_GOLDCOIN   := 0x0eed; // A gold coin
const UOBJ_METALCHEST := 0x0e7c; // A Metal Chest
const REACT_THRESHOLD := 2;

set_priority( 50 );

var storage, inv_fs, inv_pb, inv_1c, inv_rs;
var merchant_type := GetObjProperty( Self(), "MerchantType" );
var me := Self();
if(!merchant_type)
  SetObjProperty(me, "MerchantType", "Mage");
  merchant_type := "Mage";
endif
start_script("NPCKeeper", me);
var sn := GetObjProperty(me,"restockserial");

  storage := FindStorageArea("Merchant Storage");
  if(!storage) exit; endif

inv_fs := find_or_create_item(storage, me.serial + " FS", 0x0e40);
inv_pb := find_or_create_item(storage, me.serial + " PB", 0x0e40);
inv_1c := find_or_create_item(storage, me.serial + " 1C", 0x0e40);
inv_rs := find_or_create_merc(me.serial + " " + merchant_type + " " + FindCity(me), sn, merchant_type);
if(!inv_fs || !inv_pb || !inv_1c)
  exit;
endif
//var npccfg := ReadConfigFile("npcdesc");
//var speechelem := npccfg[me.npctemplate];
//var speech := GetConfigString(speechelem, "speech");
var speech := 1;
if(!GetGlobalProperty("NoRestock"))
  RestockMyInventory( inv_rs, inv_fs);
endif
var next_restock := ReadGameClock() + RESPAWN_MINUTES*60;
EnableEvents(SYSEVENT_SPEECH, REACT_THRESHOLD );
if (GetObjProperty(me, "frozen"))
  me.frozen := 1;
endif
var ev, hairwhere, hairtemp, hairold, res;
while (1)
  ev := os::wait_for_event( 120 );
  if (ev)
    case (ev.type)
      SYSEVENT_SPEECH: check_speech(ev.text, ev.source);
                       if(((ev.text["vendor"]) || (ev.text["merchant"])) || (ev.text["buy"]))
                         TurnToward( ev.source );
                         res := SendBuyWindow( ev.source, inv_fs, Self(), inv_pb );
                       elseif(((ev.text["vendor"]) || (ev.text["merchant"])) && (ev.text["sell"]))
                         TurnToward( ev.source );
                         res := SendSellWindow( ev.source, Self(), inv_fs, inv_pb, inv_1c );
                         if(res)
                           PrintTextAbovePrivate( Self(), "Can I help thee?", ev.source );
                         endif
                       else
                       say(process_text(ev.text, "default",speech));
                       endif
      EVID_MERCHANT_BOUGHT: TurnToward( ev.source );
                       PrintTextAbovePrivate( Self(), "The total of thy sale is " + ev.amount, ev.source );
                       foreach item in EnumerateItemsInContainer( inv_pb )
                         DestroyItem( item );
                       endforeach
      EVID_MERCHANT_SOLD: TurnToward( ev.source );
                       PrintTextAbovePrivate( Self(), "The total of thy purchase is " + ev.amount, ev.source );
                       foreach item in EnumerateItemsInContainer( ev.source.backpack )
	                    hairwhere :=GetObjProperty(item, "faceloc");
	                    if(hairwhere)
		                  if(hairwhere==11)//hair
			                EraseObjProperty(item, "faceloc");
			                hairtemp := GetEquipmentByLayer(ev.source, 0x0b);
			                DestroyItem(hairtemp);
			                EquipItem(ev.source, item);
			                hairold := GetEquipmentByLayer(ev.source, 0x10);
			                if (hairold.color)
				              item.color :=hairold.color;
			                endif
		                  elseif(hairwhere==16)
			                EraseObjProperty( item, "faceloc" );
			                hairtemp := GetEquipmentByLayer(ev.source, 0x10);
			                DestroyItem(hairtemp);
			                EquipItem(ev.source, item);
			                hairold := GetEquipmentByLayer(ev.source, 0x0b);
			              if (hairold.color)
				            item.color :=hairold.color;
			              endif
		                endif
		              endif
                    endforeach
    endcase
  elseif (ReadGameClock() > next_restock)
    RestockMyInventory(inv_rs, inv_fs );
    next_restock := ReadGameClock() + RESPAWN_MINUTES*60;
  endif
endwhile
