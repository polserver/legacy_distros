////////////////
// smelting.src
//
// Turns normal or colored ore into its respective ingot.
// Some ores are harder to work with than others.
//
// Author: Racalac, 5/8/99
//
// Modifications: 
//     19990525 Syz moved UOBJ_XX definitions to include/objtype.inc
//
////////////////

use uo;
use os;

include "include/client";
include "include/objtype";

program smelt_that_ore ( character , ore )

    case( ore.objtype )
        0x6300: 		SmeltOre( character , ore , 0x6309, 1, 1 );     // Iron
        0x6301: 		SmeltOre( character , ore , 0x630a, 5, 5 );     // Dull Copper
        0x631a:  	        SmeltOre( character , ore , 0x631b, 40, 40 );   // Granite
        0x6302: 	        SmeltOre( character , ore , 0x630b, 40, 10 );   // Shadow
        0x6303: 	        SmeltOre( character , ore , 0x630c, 50, 20 );   // Copper
        0x6304: 	        SmeltOre( character , ore , 0x630d, 60, 30 );   // Bronze
        0x6305: 	        SmeltOre( character , ore , 0x630e, 70, 40 );   // Golden
        0x631c: 	        SmeltOre( character , ore , 0x631d, 75, 45 );   // Obsidian
        0x6306: 	        SmeltOre( character , ore , 0x630f, 80, 50 );   // Agapite
        0x631e: 	        SmeltOre( character , ore , 0x631f, 85, 45 );   // Silver
        0x6307: 	        SmeltOre( character , ore , 0x6310, 90, 50 );   // Veritre
        0x6308: 	        SmeltOre( character , ore , 0x6311, 100, 50 );  // Valorite
        0x6319:                 SmeltOre( character , ore , 0x6312, 105, 105 ); // Mithril
        0x6317:	                SmeltOre( character , ore , 0x6313, 110, 110 ); // Daemon
        0x6318:  	        SmeltOre( character , ore , 0x6314, 120, 120 ); // Acid
        0x6316:  	        SmeltOre( character , ore , 0x6315, 125, 125 ); // Titan

	default: SendSysmessage( character , "You can't smelt that." );
    endcase                     
endprogram                      
                                
                                
function SmeltOre( character , ore , ingot , difficulty , points )
                                
                                
    if ( !ReserveItem(ore) )
      SendSysmessage( character, "Item still in use" );
      return;                 
    endif      
                                
    if ( !Accessible( character, ore ) )
        SendSysmessage( character, "You can't reach that." );
        return;                 
    endif                       
                                
    var Near_Items := ListItemsNearLocation(character.x, character.y, character.z,2);
    foreach forge in Near_Items 
    	if ( ((forge.objtype >= UOBJ_FORGE_START) and (forge.objtype <= UOBJ_FORGE_END)) or (forge.objtype = UOBJ_SMALL_FORGE) )
                                
        	if ( checkskill( character, SKILLID_MINING, difficulty, points ) )
                        sleep(1);        
                    var iOreAmt :=GetAmount( ore );
                    DestroyItem(ore);
            		var ingots := CreateItemInBackpack( character, ingot, iOreAmt );
            		SendSysmessage( character, "You create some ingots and place them in your pack." );
			return;
		else
			sleep(1);
        		SubtractAmount( ore, 1);
        		SendSysmessage( character, "You destroy some ore." );
			return;
		endif
    	endif
    endforeach
    SendSysmessage( character, "You must be near a forge to smelt ore!" );
    
endfunction

