use uo;
use os;
use cfgfile;

include "include/client";
include "druid";

program display_druidbag (character, bag)

	//initialize some variables
	var spell_cfg_file := ReadConfigFile ("druidspells");
	var number_of_spells := GetConfigMaxIntKey (spell_cfg_file);
	var string_counter := 1;
	var i;
	var string_location_y := 100;

	//now we define and set up some of the original data for the gump layout
	var gump_layout := {
		"page 0",
		"gumppic 155 50 3501",
		"gumppic 395 50 3502",
		"gumppic 130 75 3503",
		"gumppic 155 75 3504",
		"gumppic 395 75 3505",
		"gumppic 130 315 3506",
		"gumppic 155 315 3507",
		"gumppic 395 315 3508",
		"gumppic 20 20 61"
	};

	//now create the bag data
	var gump_data := array ( "filler" );

	//the add button that gives GM the ability to add all the runes at once
	if (character.cmdlevel)
		gump_layout.append ("button 250 310 2462 2461 1 0 9999");
	endif

	//the first 8 spells
	gump_layout.append ("page 1");
	gump_layout.append ("button 380 310 5601 5605 0 2");
	for (i := 1; i <= 8; i := i + 1)
		if (CheckForRuneInBag (character, bag, spell_cfg_file[i].rune_objtype ) and spell_cfg_file[i].name )
			gump_layout.append ("button 200 " + (string_location_y + 5) + " 2103 2104 1 0 " + i);
			gump_layout.append ("text 220 " + string_location_y + " 94 " + string_counter);
			gump_data.append (spell_cfg_file[i].name);
			gump_layout.append ("button 370 " + (string_location_y + 3) + " 5401 5401 1 0 " + (100+i));
			gump_layout.append ("button 390 " + (string_location_y + 3) + " 4033 4033 1 0 " + (200+i));
			string_counter := string_counter + 1;
			string_location_y := string_location_y + 25;
		endif
	endfor

	//the second 8 spells
	string_location_y := 100;
	gump_layout.append ("page 2");
	gump_layout.append ("button 160 310 5603 5607 0 1");
	for (i := 9; i <= 16; i := i + 1)
		if (CheckForRuneInBag (character, bag, spell_cfg_file[i].rune_objtype ) and spell_cfg_file[i].name )
			gump_layout.append ("button 200 " + (string_location_y + 5) + " 2103 2104 1 0 " + i);
			gump_layout.append ("text 220 " + string_location_y + " 94 " + string_counter);
			gump_data.append (spell_cfg_file[i].name);
			gump_layout.append ("button 370 " + (string_location_y + 3) + " 5401 5401 1 0 " + (100+i));
			gump_layout.append ("button 390 " + (string_location_y + 3) + " 4033 4033 1 0 " + (200+i));
			string_counter := string_counter + 1;
			string_location_y := string_location_y + 25;
		endif
	endfor

	//send the completed gump to the character
	var gump_return := SendDialogGump( character, gump_layout, gump_data );

	//if there's no return value, exit
	if (!gump_return[0])
		return;

	//if the return value is in the range dedicated to spells, try to cast that spell
	elseif (gump_return[0] < 100)
		//make sure the staff is equipped
		var staff := FindEquippedStaff (character);
		if (!staff)
			SendSysMessage (character, "You must equip your staff to cast a spell.");
			return;
		endif

		//display powerwords and cast the spell
		PrintTextAbove (character, spell_cfg_file[gump_return[0]].power_words);
		if (!castdruidspell(character, staff, gump_return[0] ))
			Fizzle(character);
		endif

	//if the return value is 9999, try to add all the runes to the bag
	elseif (gump_return[0] = 9999 and character.cmdlevel)
		AddAllRunes (character, bag);
		SendSysMessage (character, "All runes added.");

	//if its between 100 and 200, try to remove the rune
	elseif (gump_return[0] >= 100 and gump_return[0] < 200)
		var spell_number := gump_return[0]-100;
		if (!CheckForRuneInBag (character, bag, spell_cfg_file[spell_number].rune_objtype) )
			SendSysMessage (character, "Cannot remove that rune.");
			return;
		endif

		TakeRuneOutOfBag (character, bag, spell_cfg_file[spell_number].rune_objtype);
		CreateItemInBackpack (character, spell_cfg_file[spell_number].rune_objtype, 1);
		SendSysMessage (character, "You take the rune out of the bag.");

	elseif (gump_return[0] >= 200 and gump_return[0] < 300)
		DisplayReagentRequirements (character, gump_return[0]-200);
	endif
endprogram

///////////////////
//  this spell is used so that GMs can easily fill a rune bag
///////////////////

function AddAllRunes (character, bag)
	var spell_cfg_file := ReadConfigFile("druidspells");
	var current_spell;
	var i;

	EraseObjProperty (bag, "runes");

	for (i := 1; i <= 16; i := i + 1)
		current_spell := FindConfigelem(spell_cfg_file, i);
		if (current_spell.name)
			PutRuneInBag (character, bag, current_spell.rune_objtype);
		endif
	endfor
endfunction



///////////////////
//  Sends a new gump that shows the reagent requirements for the spell
///////////////////

function DisplayReagentRequirements (character, spell_number);
	var string_counter := 1;
	var spell_cfg_file := ReadConfigFile ("druidspells");
	var current_spell := spell_cfg_file[spell_number];

	//new gump layout
	var gump_layout := {
		"page 0",
		"gumppic 155 50 3501",
		"gumppic 395 50 3502",
		"gumppic 130 75 3503",
		"gumppic 155 75 3504",
		"gumppic 395 75 3505",
		"gumppic 130 315 3506",
		"gumppic 155 315 3507",
		"gumppic 395 315 3508",
		"gumppic 20 20 61",
		"gumppic 220 105 41",
	};

	//new gump data
	var gump_data := array ( "filler" );

	gump_layout.append ("text 220 80 94 " + string_counter);
	gump_data.append (current_spell.name);
	string_counter := string_counter + 1;
	gump_layout.append ("text 220 120 0 " + string_counter);
	gump_data.append ("Power words:");
	string_counter := string_counter + 1;
	gump_layout.append ("text 240 140 32 " + string_counter);
	gump_data.append (current_spell.power_words);
	string_counter := string_counter + 1;
	gump_layout.append ("text 220 160 0 " + string_counter);
	gump_data.append ("Reagents:");
	string_counter := string_counter + 1;

	//load the reagent list from the current potion into an array
	var reagent_array := GetConfigStringArray( current_spell, "reagent" );
	var current_reagent;
	var temporary_string;
	var temporary_string_position := 180;
	foreach current_reagent in reagent_array
		temporary_string := DescribeReagent (current_reagent);
		gump_data.append(temporary_string);
		gump_layout.append ("text 240 " + temporary_string_position + " 0 " + string_counter );
		string_counter := string_counter + 1;
		temporary_string_position := temporary_string_position + 15;
	endforeach



	//send the completed gump to the character
	var gump_return := SendDialogGump( character, gump_layout, gump_data );



endfunction




///////////////////
//  Creates a dictionary for all the names of reagents
///////////////////

function LoadReagentDictionary ()
	var reagent := dictionary;

	//normal reagents
	reagent [ 0x0F78 ]		:= "bat wing";
	reagent [ 0x0F79 ]		:= "blackmoor";
	reagent [ 0x0F7a ]		:= "black pearl";
	reagent [ 0x0F7b ]		:= "blood moss";
	reagent [ 0x0F7c ]		:= "blood spawn";
	reagent [ 0x0F7d ]		:= "vial of blood";
	reagent [ 0x0F7e ]		:= "bone";
	reagent [ 0x0F7f ]		:= "brimstone";
	reagent [ 0x0F80 ]		:= "deamon bone";
	reagent [ 0x0F81 ]		:= "fertile dirt";
	reagent [ 0x0F82 ]		:= "dragon's blood";
	reagent [ 0x0F83 ]		:= "executioner's cap";
	reagent [ 0x0F84 ]		:= "garlic";
	reagent [ 0x0F85 ]		:= "ginseng";
	reagent [ 0x0F86 ]		:= "mandrake root";
	reagent [ 0x0F87 ]		:= "eye of newt";
	reagent [ 0x0F88 ]		:= "nightshade";
	reagent [ 0x0F89 ]		:= "obsidian";
	reagent [ 0x0F8a ]		:= "pig iron";
	reagent [ 0x0F8b ]		:= "pumice";
	reagent [ 0x0F8c ]		:= "sulfurous ash";
	reagent [ 0x0F8d ]		:= "spider's silk";
	reagent [ 0x0F8e ]		:= "serpent scale";
	reagent [ 0x0F8f ]		:= "volcanic ash";
	reagent [ 0x0F90 ]		:= "dead wood";
	reagent [ 0x0F91 ]		:= "wyrm's heart";

	//raw reagents
	reagent [ 0x18de ]		:= "raw mandrake root";
	reagent [ 0x18e3 ]		:= "raw garlic";
	reagent [ 0x18e7 ]		:= "raw nightshade";
	reagent [ 0x18eb ]		:= "raw ginseng";

	//gems
	reagent [ 0x0F0F ]		:= "star sapphire";
	reagent [ 0x0F10 ]		:= "emerald";
	reagent [ 0x0F11 ]		:= "sapphire";
	reagent [ 0x0F13 ]		:= "ruby";
	reagent [ 0x0F15 ]		:= "citrine";
	reagent [ 0x0F16 ]		:= "amethyst";
	reagent [ 0x0F18 ]		:= "tourmaline";
	reagent [ 0x0F25 ]		:= "amber";
	reagent [ 0x0F30 ]		:= "diamond";

	//other stuff
	reagent [ 0x0F0E ]		:= "empty bottle";
	reagent [ 0x1422 ]		:= "beeswax";
	reagent [ 0x7052 ]		:= "troll hide";
	reagent [ 0x09f1 ]		:= "raw rib";

	return reagent;

endfunction




///////////////////
//  this function looks at the reagent that was passed to it, and returns a string that best describes
//  that reagents
///////////////////

function DescribeReagent (reagent)

	var return_string := "";
	var temp_split_words := splitwords(reagent);
	var reagent_type := cint(temp_split_words[1]);
	var reagent_number := cint(temp_split_words[2]);
	var reagent_dictionary := LoadReagentDictionary ();

	//if the potion requires 1 or 0 of an item, just use the default string
	if ( reagent_number = 1 or reagent_number = 0)
		return_string := cstr ( "1 " + reagent_dictionary[reagent_type] );
	elseif (reagent_type = 0x0F7d)
		return_string := cstr ( reagent_number + " vials of blood");
	elseif (reagent_type = 0x0F8f or reagent_type = 0x0F84 or reagent_type = 0x0F85 or reagent_type = 0x0F7b or reagent_type = 0x0F8d)
		return_string := cstr ( reagent_number + " " + reagent_dictionary[reagent_type] );
	elseif (reagent_type = 0x0F8c or reagent_type = 0x0F88 or reagent_type = 0x0F81 or reagent_type = 0x0F86or reagent_type = 0x0F7F)
		return_string := cstr ( reagent_number + " " + reagent_dictionary[reagent_type] );
	elseif (reagent_type = 0x0F13 or reagent_type = 0x0F14 or reagent_type = 0x0F1a or reagent_type = 0x0F1c or reagent_type = 0x0F1d or reagent_type = 0x0F2a or reagent_type = 0x0F2b)
		return_string := cstr ( reagent_number + " rubies");
	else
		return_string := cstr ( reagent_number + " " + reagent_dictionary[reagent_type] + "s");
	endif

	return return_string;
endfunction
