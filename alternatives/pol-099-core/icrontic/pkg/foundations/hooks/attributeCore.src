use uo;
use os;
use util;
use cfgfile;

include "include/attributes";
include "include/eventID";

var STATCAP;
const CONST_SKILLCAP := 700;
const MAXSTAT := 125;
const MINSTAT := 10;
const WARNING_THRESHHOLD := 5; // Warn player if he is WARNING_THRESHHOLD points or less below his cap
SCRIPTOPT_NO_RUNAWAY  := 1;
set_priority( 4 );

var skillscfg := ReadConfigFile(":*:skills");

program Attribute_server(who)

  SetObjProperty(who, "cap_pid", getpid());
  var ev;
  var counter := ReadGameClock() + 600;
  while(GetObjProperty(who, "LoggedIn"))
	ev := wait_for_event(120);
	if(GetObjProperty(who, "cap_pid") != GetPid())
	  break;
	endif
	if(ev)
	  STATCAP := getstatcap(who);
      case(ev.type)
	    EVID_SKILLCAP: CheckSkillCap(who, ev);
	    EVID_STATCAP: CheckStatCap(who, ev);
      endcase
        endif
    if(counter < ReadgameClock())
      counter := ReadGameClock() + 600;
      Start_Script(":hooks:titleCheck", who);
    endif
  endwhile
endprogram

function CheckStatCap(char, ev)
  var unmod_str := GetUnModStat (char, "Strength");
  var unmod_dex := GetUnModStat (char, "Dexterity");
  var unmod_int := GetUnModStat (char, "Intelligence");
  var total := unmod_str + unmod_dex + unmod_int;
  // handle locks
  if( ev.skid==ATTRIBUTEID_STRENGTH || ev.skid==ATTRIBUTEID_DEXTERITY || ev.skid==ATTRIBUTEID_INTELLIGENCE )
    statchange(char,ev);
  endif
  // start stat limiting //
  if (GetUnModStat (char, "Strength")> MAXSTAT)
    unmod_str:=MAXSTAT;
    SetAttributeBaseValue(char, "Strength", (unmod_str*10));
  endif
  if (GetUnModStat (char, "Dexterity")> MAXSTAT)
    unmod_dex:=MAXSTAT;
    SetAttributeBaseValue(char, "Dexterity", (unmod_dex*10));
  endif
  if (GetUnModStat (char, "Intelligence")> MAXSTAT)
    unmod_int:=MAXSTAT;
    SetAttributeBaseValue(char, "Intelligence", (unmod_int*10));
  endif
  // end stat limiting //
  if(total>STATCAP)
    statdrop(char);	// should never run since there are hard caps...
  endif
endfunction

function statchange(char, ev)
  var Msta := GetObjProperty(char,"Mstats"); // stat locks (1=down, 2=lock, 3=up)
  var unmod_str := GetUnModStat (char, "Strength");
  var unmod_dex := GetUnModStat (char, "Dexterity");
  var unmod_int := GetUnModStat (char, "Intelligence");
  var total := unmod_str + unmod_dex + unmod_int;
  var statnum; // the array position of the skill in Msta
  case(ev.skid)
    ATTRIBUTEID_STRENGTH: statnum := 1;break;
    ATTRIBUTEID_DEXTERITY: statnum := 2;break;
    ATTRIBUTEID_INTELLIGENCE: statnum := 3;break;
  endcase
  if(Msta[statnum]!=3)		// if the stat isn't set to gain why do anything else
    SendSysMessage(char,"Your "+ev.skid+" is locked or dropping");
    return;
  endif
  if(total>=STATCAP)
    var numdown:=0;		// only 2 of the three can work...so the numdown is 0,1,2
    if(Msta[1]==1)
      numdown := numdown+1;
    endif
    if(Msta[2]==1)
      numdown := numdown+1;
    endif
    if(Msta[3]==1)
      numdown := numdown+1;
    endif
    if(Msta[1]==1 && (numdown==1 || randomint(2)))
      SetBaseStrength(char, unmod_str-1);
      SendSysMessage(char, "Your Strength is in Dropping Status (Loss)");
    elseif(Msta[2]==1 && (numdown==1 || randomint(2)))
      SetBaseDexterity(char, unmod_dex-1);
      SendSysMessage(char, "Your Dexterity is in Dropping Status (Loss)");
    elseif(Msta[3]==1 && (numdown==1 || randomint(2)))
      SetBaseIntelligence(char, unmod_int-1);
      SendSysMessage(char, "Your Intelligence is in Dropping Status (Loss)");
    else
      SendSysMessage(char, "You are at your statcap and have no stats marked down!");
      return;
    endif
  endif
  SetAttributeBaseValue(char, ev.skid, Cint(ev.base));
endfunction

function statdrop(char)
  var Msta := GetObjProperty(char,"Mstats"); // stat locks (1=down, 2=lock, 3=up)
  var unmod_str := GetUnModStat (char, "Strength");
  var unmod_dex := GetUnModStat (char, "Dexterity");
  var unmod_int := GetUnModStat (char, "Intelligence");
  var total := unmod_str + unmod_dex + unmod_int;
  while(total>STATCAP)		// try to use down stats to get under the cap
    if(Msta[1]==1 && unmod_str>MINSTAT)
      unmod_str:=unmod_str-1;
    endif
    if(Msta[2]==1 && unmod_dex>MINSTAT)
      unmod_dex:=unmod_dex-1;
    endif
    if(Msta[3]==1 && unmod_int>MINSTAT)
      unmod_int:=unmod_int-1;
    endif
    total := unmod_str + unmod_dex + unmod_int;
    if((Msta[1]!=1 || unmod_str<=MINSTAT)&&(Msta[2]!=1 || unmod_dex<=MINSTAT)&&(Msta[3]!=1 || unmod_int<=MINSTAT))
      break;
    endif
    sleepms(500);
  endwhile
  while(total>STATCAP)		// if still over cap use up stats to get under cap
    if(Msta[1]==3 && unmod_str>MINSTAT)
      unmod_str:=unmod_str-1;
    endif
    if(Msta[2]==3 && unmod_dex>MINSTAT)
      unmod_dex:=unmod_dex-1;
    endif
    if(Msta[3]==3 && unmod_int>MINSTAT)
      unmod_int:=unmod_int-1;
    endif
    total := unmod_str + unmod_dex + unmod_int;
    if((Msta[1]!=3 || unmod_str<=MINSTAT)&&(Msta[2]!=3 || unmod_dex<=MINSTAT)&&(Msta[3]!=3 || unmod_int<=MINSTAT))
      break;
    endif
    sleepms(500);
  endwhile
  while(total>STATCAP)		// just get under the cap using all stats regardless of state
    if(unmod_str>MINSTAT)
      unmod_str:=unmod_str-1;
    endif
    if(unmod_dex>MINSTAT)
      unmod_dex:=unmod_dex-1;
    endif
    if(unmod_int>MINSTAT)
      unmod_int:=unmod_int-1;
    endif
    total := unmod_str + unmod_dex + unmod_int;
    sleepms(500);
  endwhile
  SetBaseStrength(char, unmod_str);
  SetBaseDexterity(char, unmod_dex);
  SetBaseIntelligence(char, unmod_int);
endfunction

function CheckSkillCap(chr, ev)

  var attributeid := ev.skid;
  var skillbonus := cInt(GetObjProperty(chr,"SkillBonus"))*10;
  var skillcap := ( 7000 + cInt(skillbonus) );
  var intSkillTotal := 0;
  var intSkillcntr := 0;
  var intSkill := {};
  var raised := 0;
  var skill := GetObjProperty( chr, "skill" );
  var base, true, newval, final;

  if(GetAttributeBaseValue(chr, attributeid) < 1000)
    var skillstatus := hfunc(skill[getskillnum( attributeid )+1]);
    //sendsysmessage(chr, "Skill: " + attributeid + " Numero: " + getskillnum( attributeid ) + " Status: " + hfunc(skill[getskillnum( attributeid )+1]) + ".");
    if (skillstatus = 1)
      var Statusx;
       for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
         Statusx := hfunc(skill[intSkillcntr+1]);
         sleepms(1);
	 if(Statusx = 2)
	   SetSkill( chr, intSkillcntr, ( intSkill[intSkillcntr + 1]-1));
	 endif
       endfor
      SetAttributeBaseValue(chr, attributeid, Cint(ev.base));
      raised := 1;
    elseif (skillstatus = 0)
      //SendSysMessage(chr, "Your Skill is Locked (No Gain)");
      return;
    elseif (skillstatus = 2)
      newval := GetBaseSkillBaseValue(chr, attributeid);
      final := (newval - 1);
      SetAttributeBaseValue( chr, attributeid, final);
      //SendSysMessage(chr, "Your Skill is in Dropping Status (No Gain)");
      return;
    endif
  endif

  IF (raised)
    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
      sleepms(1);
      intSkill[intSkillcntr + 1] := 0;
      intSkill[intSkillcntr + 1] := ( GetAttributeBaseValue( chr, getskillattrib(intSkillcntr) ) );
      intSkillTotal := intSkillTotal + intSkill[intSkillcntr + 1];
    endfor

  		if (intSkillTotal > skillcap)
		    var howmuch := cint(intSkillTotal) - CInt(skillcap);
		    var Status;
		    var intSkillTotaldown := 0;
		    var numberskilldown := 0;
		    var intSkillTotalup := 0;
		    var numberskillup := 0;


		    SendSysMessage(chr, "You have reached your skill cap of " + (skillcap / 10)+ ". Your skills are being adjusted.", 3, 27);
		    SetObjProperty(chr, "capwarned", 0);

		    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                        sleepms(1);
		        intSkill[intSkillcntr + 1] := 0;
			intSkill[intSkillcntr + 1] := ( GetAttributeBaseValue( chr, getskillattrib(intSkillcntr) ) );
			Status := cint(intSkillcntr)+1;
			Status := skill[Status];
			//SendSysMessage(chr, "Skill (" + (cint(intSkillcntr)+1) + ") status is " + Status + " now.", 3, 27);
		            if(Status == 2)
			      intSkillTotaldown := cint(intSkillTotaldown) + intSkill[intSkillcntr + 1];
			      numberskilldown := cint(numberskilldown) + 1;
			    endif
                            var skillcheck := getskillnum(attributeid);
                            if(intSkillcntr != skillcheck)
		              if(Status == 1)
			        intSkillTotalup := cint(intSkillTotalup) + intSkill[intSkillcntr + 1];
			        numberskillup := cint(numberskillup) + 1;
			      endif
                            endif
		    endfor
//		   SendSysMessage(chr, "ToT: " + intSkillTotaldown + " Points of Skills down.", 3, 27);
//		   SendSysMessage(chr, "ToT: " + intSkillTotalup + " Points of Skills up.", 3, 27);
     
		   if((howmuch > intSkillTotaldown) && intSkillTotalup != 0)

		    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                      if((GetBaseSkillBaseValue(chr, intSkillcntr)) > 0)
		            Status := hfunc(skill[intSkillcntr+1]);
                            sleepms(1);
		            if(Status == 2)
                              newval := GetBaseSkillBaseValue(chr, intSkillcntr);
                              final := (newval - 1);
		              SetAttributeBaseValue( chr, getskillattrib(intSkillcntr), final);
			    endif
                      endif
		    endfor

		    var newtotal := intSkillTotal - intSkillTotaldown;
	            for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                      if((GetBaseSkillBaseValue(chr, intSkillcntr)) > 0)
			Status := hfunc(skill[intSkillcntr+1]);
                        sleepms(1);
			if(Status == 1)
                         newval := GetBaseSkillBaseValue(chr, intSkillcntr);
                         final := (newval - 1);
	                 SetAttributeBaseValue( chr, getskillattrib(intSkillcntr), final);
			 SetSkill( chr, intSkillcntr, ( intSkill[intSkillcntr + 1] * SKILLCAP / newtotal ));
		        endif
                      endif
		    endfor

                  elseif((howmuch > intSkillTotaldown) && intSkillTotalup == 0)
                   // if need more dropped than totaldown and up, kick thier ass

		    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                      if((GetBaseSkillBaseValue(chr, intSkillcntr)) > 0)
		            Status := hfunc(skill[intSkillcntr+1]);
                            sleepms(1);
		            if(Status == 2)
                              newval := GetBaseSkillBaseValue(chr, intSkillcntr);
                              final := (newval - 1);
		              SetAttributeBaseValue( chr, getskillattrib(intSkillcntr), final);
			    endif
                      endif
		    endfor

		    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                       if((GetBaseSkillBaseValue(chr, intSkillcntr)) > 0)
                           sleepms(1);
                           newval := GetBaseSkillBaseValue(chr, intSkillcntr);
                           final := (newval - 1);
                           SetAttributeBaseValue( chr, getskillattrib(intSkillcntr), final);
                       endif
		    endfor

		   else
		    for( intSkillcntr := 0; intSkillcntr < 49; intSkillcntr := intSkillcntr + 1 )
                      if((GetBaseSkillBaseValue(chr, intSkillcntr)) > 0)
		            Status := hfunc(skill[intSkillcntr+1]);
                            sleepms(1);
		            if(Status == 2)
			      SetSkill( chr, intSkillcntr, ( intSkill[intSkillcntr + 1] - (howmuch / cint(numberskilldown)) ));
			      //SendSysMessage(chr, "SetSkill( chr, " + intSkillcntr + ", " + intSkill[intSkillcntr + 1] - (howmuch / cint(numberskilldown)) + " );");
			    endif
                      endif
		    endfor
		   endif
		  elseif((intSkillTotal > (skillcap - WARNING_THRESHHOLD)) and (!GetObjProperty(chr, "capwarned") = 1))
		    SendSysMessage(chr, "You are about to reach your skill cap of " + skillcap, 3, 27);
		    SetObjProperty(chr, "capwarned", 1);
		endif
  ENDIF
  return 1;
endfunction

function getstatcap(who)

var age:= getobjproperty (who, "onlinetimer");
age := age/60;
if(age > 2400 && age <= 5000)
	   statcap := 230;
	elseif (age > 5000 && age <= 10060)
	   statcap := 235;
	elseif (age > 10060 && age <= 15120)
	   statcap := 240;
	elseif (age > 15120 && age <= 20180)
	   statcap := 245;
	elseif (age > 20180 && age <= 25240)
	   statcap := 250;
	elseif (age > 25240 && age <= 35300)
	   statcap := 255;
	elseif (age > 35300 && age <= 45360)
	   statcap := 260;
	elseif (age > 45360 && age <= 55420)
	   statcap := 265;
	elseif (age > 55420 && age <= 65480)
	   statcap := 270;
	elseif (age > 65480 && age <= 75540)
	   statcap := 275;
	elseif (age > 75540 && age <= 85600)
	   statcap := 280;
	elseif (age > 85600 && age <= 100660)
	   statcap := 285;
	elseif (age > 100660 && age <= 115720)
	   statcap := 290;
	elseif (age > 115720 && age <= 130780)
	   statcap := 295;
	elseif (age > 130780)
	   statcap := 300;
	else
	   statcap := 225;
	endif

	return statcap;

endfunction

function SetSkill( who, skill, amount)

/////////// Debug
//    var basevalue := CInt( CDbl(amount) * 10 );
//    var rawvalue := BaseSkillToRawSkill( basevalue );
//    sendsysmessage(who, "Amount: " + basevalue + ".");
/////////// Debug End
    if ((skill != error) and (amount != error))
        SetAttributeBaseValue( who, getskillattrib(skill), amount );
    endif

    Sleepms(1);
endfunction

function hfunc(num)
	if(num = 0) return 0; // lock
	elseif (num = 1) return 1; // up
	elseif (num = 2) return 2; // down
	endif
endfunction

function skillprio(name)
	var num;

	num := skillnum(name);

	return hfunc(skill[num+1]);
endfunction

function exchange(name)
	var num;

	num := skillnum(name);
	if(skill[num+1]=0) skill[num+1]:=1;
	elseif (skill[num+1]=1) skill[num+1]:=2;
	else skill[num+1]:=0;
	endif

	return 0;
endfunction

function skillnum(name)

	if (name="ALCHEMY") return 0;
	elseif (name="ANATOMY") return 1;
	elseif (name="ANIMALLORE") return 2;
	elseif (name="ITEMID") return 3;
	elseif (name="ARMSLORE") return 4;
	elseif (name="BATTLE_DEFENSE") return 5;
	elseif (name="BEGGING") return 6;
	elseif (name="BLACKSMITHY") return 7;
	elseif (name="BOWCRAFT") return 8;
	elseif (name="PEACEMAKING") return 9;
	elseif (name="CAMPING") return 10;
	elseif (name="CARPENTRY") return 11;
	elseif (name="CARTOGRAPHY") return 12;
	elseif (name="COOKING") return 13;
	elseif (name="DETECTINGHIDDEN") return 14;
	elseif (name="ENTICEMENT") return 15;
	elseif (name="EVALINT") return 16;
	elseif (name="HEALING") return 17;
	elseif (name="FISHING") return 18;
	elseif (name="FORENSICS") return 19;
	elseif (name="HERDING") return 20;
	elseif (name="HIDING") return 21;
	elseif (name="PROVOCATION") return 22;
	elseif (name="INSCRIPTION") return 23;
	elseif (name="LOCKPICKING") return 24;
	elseif (name="MAGERY") return 25;
	elseif (name="MAGICRESISTANCE") return 26;
	elseif (name="TACTICS") return 27;
	elseif (name="SNOOPING") return 28;
	elseif (name="MUSICIANSHIP") return 29;
	elseif (name="POISONING") return 30;
	elseif (name="ARCHERY") return 31;
	elseif (name="SPIRITSPEAK") return 32;
	elseif (name="STEALING") return 33;
	elseif (name="TAILORING") return 34;
	elseif (name="TAMING") return 35;
	elseif (name="TASTEID") return 36;
	elseif (name="TINKERING") return 37;
	elseif (name="TRACKING") return 38;
	elseif (name="VETERINARY") return 39;
	elseif (name="SWORDSMANSHIP") return 40;
	elseif (name="MACEFIGHTING") return 41;
	elseif (name="FENCING") return 42;
	elseif (name="WRESTLING") return 43;
	elseif (name="LUMBERJACKING") return 44;
	elseif (name="MINING") return 45;
	elseif (name="MEDITATION") return 46;
	elseif (name="STEALTH") return 47;
	elseif (name="REMOVETRAP") return 48;
	endif
endfunction

function getskillattrib( num )

case(num)
0: return ATTRIBUTEID_ALCHEMY;
1: return ATTRIBUTEID_ANATOMY;
2: return ATTRIBUTEID_ANIMALLORE;
3: return ATTRIBUTEID_ITEMID;
4: return ATTRIBUTEID_ARMSLORE;
5: return ATTRIBUTEID_PARRY;
6: return ATTRIBUTEID_BEGGING;
7: return ATTRIBUTEID_BLACKSMITHY;
8: return ATTRIBUTEID_BOWCRAFT;
9: return ATTRIBUTEID_PEACEMAKING;
10: return ATTRIBUTEID_CAMPING;
11: return ATTRIBUTEID_CARPENTRY;
12: return ATTRIBUTEID_CARTOGRAPHY;
13: return ATTRIBUTEID_COOKING;
14: return ATTRIBUTEID_DETECTINGHIDDEN;
15: return ATTRIBUTEID_ENTICEMENT;
16: return ATTRIBUTEID_EVALINT;
17: return ATTRIBUTEID_HEALING;
18: return ATTRIBUTEID_FISHING;
19: return ATTRIBUTEID_FORENSICS;
20: return ATTRIBUTEID_HERDING;
21: return ATTRIBUTEID_HIDING;
22: return ATTRIBUTEID_PROVOCATION;
23: return ATTRIBUTEID_INSCRIPTION;
24: return ATTRIBUTEID_LOCKPICKING;
25: return ATTRIBUTEID_MAGERY;
26: return ATTRIBUTEID_MAGICRESISTANCE;
27: return ATTRIBUTEID_TACTICS;
28: return ATTRIBUTEID_SNOOPING;
29: return ATTRIBUTEID_MUSICIANSHIP;
30: return ATTRIBUTEID_POISONING;
31: return ATTRIBUTEID_ARCHERY;
32: return ATTRIBUTEID_SPIRITSPEAK;
33: return ATTRIBUTEID_STEALING;
34: return ATTRIBUTEID_TAILORING;
35: return ATTRIBUTEID_TAMING;
36: return ATTRIBUTEID_TASTEID;
37: return ATTRIBUTEID_TINKERING;
38: return ATTRIBUTEID_TRACKING;
39: return ATTRIBUTEID_VETERINARY;
40: return ATTRIBUTEID_SWORDSMANSHIP;
41: return ATTRIBUTEID_MACEFIGHTING;
42: return ATTRIBUTEID_FENCING;
43: return ATTRIBUTEID_WRESTLING;
44: return ATTRIBUTEID_LUMBERJACKING;
45: return ATTRIBUTEID_MINING;
46: return ATTRIBUTEID_MEDITATION;
47: return ATTRIBUTEID_STEALTH;
48: return ATTRIBUTEID_REMOVETRAP;
default: return;
endcase

endfunction

function getskillnum( skill )

case(skill)
ATTRIBUTEID_ALCHEMY: return 0;
ATTRIBUTEID_ANATOMY: return 1;
ATTRIBUTEID_ANIMALLORE: return 2;
ATTRIBUTEID_ITEMID: return 3;
ATTRIBUTEID_ARMSLORE: return 4;
ATTRIBUTEID_PARRY: return 5;
ATTRIBUTEID_BEGGING: return 6;
ATTRIBUTEID_BLACKSMITHY: return 7;
ATTRIBUTEID_BOWCRAFT: return 8;
ATTRIBUTEID_PEACEMAKING: return 9;
ATTRIBUTEID_CAMPING: return 10;
ATTRIBUTEID_CARPENTRY: return 11;
ATTRIBUTEID_CARTOGRAPHY: return 12;
ATTRIBUTEID_COOKING: return 13;
ATTRIBUTEID_DETECTINGHIDDEN: return 14;
ATTRIBUTEID_ENTICEMENT: return 15;
ATTRIBUTEID_EVALINT: return 16;
ATTRIBUTEID_HEALING: return 17;
ATTRIBUTEID_FISHING: return 18;
ATTRIBUTEID_FORENSICS: return 19;
ATTRIBUTEID_HERDING: return 20;
ATTRIBUTEID_HIDING: return 21;
ATTRIBUTEID_PROVOCATION: return 22;
ATTRIBUTEID_INSCRIPTION: return 23;
ATTRIBUTEID_LOCKPICKING: return 24;
ATTRIBUTEID_MAGERY: return 25;
ATTRIBUTEID_MAGICRESISTANCE: return 26;
ATTRIBUTEID_TACTICS: return 27;
ATTRIBUTEID_SNOOPING: return 28;
ATTRIBUTEID_MUSICIANSHIP: return 29;
ATTRIBUTEID_POISONING: return 30;
ATTRIBUTEID_ARCHERY: return 31;
ATTRIBUTEID_SPIRITSPEAK: return 32;
ATTRIBUTEID_STEALING: return 33;
ATTRIBUTEID_TAILORING: return 34;
ATTRIBUTEID_TAMING: return 35;
ATTRIBUTEID_TASTEID: return 36;
ATTRIBUTEID_TINKERING: return 37;
ATTRIBUTEID_TRACKING: return 38;
ATTRIBUTEID_VETERINARY: return 39;
ATTRIBUTEID_SWORDSMANSHIP: return 40;
ATTRIBUTEID_MACEFIGHTING: return 41;
ATTRIBUTEID_FENCING: return 42;
ATTRIBUTEID_WRESTLING: return 43;
ATTRIBUTEID_LUMBERJACKING: return 44;
ATTRIBUTEID_MINING: return 45;
ATTRIBUTEID_MEDITATION: return 46;
ATTRIBUTEID_STEALTH: return 47;
ATTRIBUTEID_REMOVETRAP: return 48;
default: return;
endcase

endfunction

function GetUnModStat(char, statname)
  var MyStat, NewStat;
  MyStat := GetAttributeBaseValue(char, statname ) / 10;   // we need the base stats
  NewStat := Floor(MyStat);
  return NewStat;
endfunction
