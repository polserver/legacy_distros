use uo;
use os;
use cfgfile;

include "include/attributes";

const DEFAULT_SETTING_SKILL_ALWAYS_GAIN_UNTIL  := 10.0;
const DEFAULT_SETTING_SKILL_CHECK_MAX_CHANCE  := 100;
const DEFAULT_SETTING_SKILL_CHECK_MIN_CHANCE  := 0;

var always_gain_until;
var min_chance;
var max_chance;

program shilskill()
  always_gain_until := Cint(Cdbl(DEFAULT_SETTING_SKILL_ALWAYS_GAIN_UNTIL) * 10);
  min_chance        := Cint(Cint(DEFAULT_SETTING_SKILL_CHECK_MIN_CHANCE) * 10);
  max_chance        := Cint(Cint(DEFAULT_SETTING_SKILL_CHECK_MAX_CHANCE) * 10);
  return 1;
endprogram

exported function ShilCheckSkill( who, skillid, difficulty, points )
  difficulty := CDbl(difficulty);
  if( difficulty == error )
    return 0;
//  elseif( who.cmdlevel )
//    return 1;
  elseif( difficulty == 0.0 )
    return 1;
  else
    difficulty := difficulty * 10.0;
  endif
  var chance;
  var attributeid := GetAttributeIdBySkillId(skillid);
  var baseskill  := GetBaseSkillBaseValue(who, skillid);
  var tempmod  := GetSkillTemporaryModBaseValue(who, skillid);
  var intrisicmod  := GetSkillIntrinsicModBaseValue(who, skillid);
  var effective  := baseskill + tempmod + intrisicmod;
  var hunger  := CInt(GetObjProperty(who, "hunger"));
  case( hunger )
     0: effective := (effective - 50); points := (points * 0.95);
     1: effective := (effective + 50); points := (points * 1.05);
     5:
     6: effective := (effective - 10); points := (points * 0.95);
     7:
     8: effective := (effective - 30); points := (points * 0.97);
     9:
    10: effective := (effective - 50); points := (points * 0.95);
  endcase
  if( effective < 0 )
    effective := 0;
  endif
  if( difficulty < 0 )
    chance := effective + ((difficulty+10) * 15);
  else
    chance := (effective - difficulty) * 2.5 + 500;
    var temp_chance;
    if( effective != baseskill )
      temp_chance := (baseskill - difficulty) * 2.5 + 500;
    else
      temp_chance := chance;
    endif
    if( temp_chance < min_chance )
      temp_chance := min_chance;
    elseif( temp_chance > max_chance )
      temp_chance := max_chance;
    endif
    points  := points * ((1000-temp_chance) / 1000);
  endif
  if( chance < min_chance )
    chance := min_chance;
  elseif( chance > max_chance )
    chance := max_chance;
  endif
///// Added to block stat gains if a skill is locked
  var chr := who;
  var skill := GetObjProperty( chr, "skill" );
  var skillstatus := hfunc(skill[getskillnum( attributeid )+1]);
  var skillbonus := cInt(GetObjProperty(chr,"SkillBonus"))*10;
  var skillcap := ( 7000 + cInt(skillbonus) );
  var intSkillTotal := 0;
  var intSkillcntr := 0;
  var intSkill := {};
  var raised := 0;
  if (skillstatus = 1)
    if( RandomInt(1000) < chance )
      AwardPoints(who, skillid, points);
      return 1;
    else
      if( baseskill < always_gain_until )
        points := Cint(points / 2);
        AwardPoints( who, skillid, points);
      endif
      return 0;
    endif
    elseif (skillstatus = 0)
      //SendSysMessage(chr, "Your Skill is Locked (No Gain)");
    if( RandomInt(1000) < chance )
      return 1;
    else
      if( baseskill < always_gain_until )
        points := Cint(points / 2);
      endif
      return 0;
    endif
    elseif (skillstatus = 2)
      //SendSysMessage(chr, "Your Skill is in Dropping Status (No Gain)");
    if( RandomInt(1000) < chance )
      return 1;
    else
      if( baseskill < always_gain_until )
        points := Cint(points / 2);
      endif
      return 0;
    endif
    endif
endfunction

function hfunc(num)
	if(num = 0) return 0; // lock
	elseif (num = 1) return 1; // up
	elseif (num = 2) return 2; // down
	endif
endfunction

function getskillnum( skill )

case(skill)
ATTRIBUTEID_ALCHEMY: return 0;
ATTRIBUTEID_ANATOMY: return 1;
ATTRIBUTEID_ANIMALLORE: return 2;
ATTRIBUTEID_ITEMID: return 3;
ATTRIBUTEID_ARMSLORE: return 4;
ATTRIBUTEID_PARRY: return 5;
ATTRIBUTEID_BEGGING: return 6;
ATTRIBUTEID_BLACKSMITHY: return 7;
ATTRIBUTEID_BOWCRAFT: return 8;
ATTRIBUTEID_PEACEMAKING: return 9;
ATTRIBUTEID_CAMPING: return 10;
ATTRIBUTEID_CARPENTRY: return 11;
ATTRIBUTEID_CARTOGRAPHY: return 12;
ATTRIBUTEID_COOKING: return 13;
ATTRIBUTEID_DETECTINGHIDDEN: return 14;
ATTRIBUTEID_ENTICEMENT: return 15;
ATTRIBUTEID_EVALINT: return 16;
ATTRIBUTEID_HEALING: return 17;
ATTRIBUTEID_FISHING: return 18;
ATTRIBUTEID_FORENSICS: return 19;
ATTRIBUTEID_HERDING: return 20;
ATTRIBUTEID_HIDING: return 21;
ATTRIBUTEID_PROVOCATION: return 22;
ATTRIBUTEID_INSCRIPTION: return 23;
ATTRIBUTEID_LOCKPICKING: return 24;
ATTRIBUTEID_MAGERY: return 25;
ATTRIBUTEID_MAGICRESISTANCE: return 26;
ATTRIBUTEID_TACTICS: return 27;
ATTRIBUTEID_SNOOPING: return 28;
ATTRIBUTEID_MUSICIANSHIP: return 29;
ATTRIBUTEID_POISONING: return 30;
ATTRIBUTEID_ARCHERY: return 31;
ATTRIBUTEID_SPIRITSPEAK: return 32;
ATTRIBUTEID_STEALING: return 33;
ATTRIBUTEID_TAILORING: return 34;
ATTRIBUTEID_TAMING: return 35;
ATTRIBUTEID_TASTEID: return 36;
ATTRIBUTEID_TINKERING: return 37;
ATTRIBUTEID_TRACKING: return 38;
ATTRIBUTEID_VETERINARY: return 39;
ATTRIBUTEID_SWORDSMANSHIP: return 40;
ATTRIBUTEID_MACEFIGHTING: return 41;
ATTRIBUTEID_FENCING: return 42;
ATTRIBUTEID_WRESTLING: return 43;
ATTRIBUTEID_LUMBERJACKING: return 44;
ATTRIBUTEID_MINING: return 45;
ATTRIBUTEID_MEDITATION: return 46;
ATTRIBUTEID_STEALTH: return 47;
ATTRIBUTEID_REMOVETRAP: return 48;
default: return;
endcase

endfunction

