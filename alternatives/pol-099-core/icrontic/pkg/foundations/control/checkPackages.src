use uo;
use os;
use cfgfile;

include "include/datafile";

// Run 255 lines before going to the next script.
// Its as close as it gets to critical without the console
// whining about it.
set_priority(255);
set_script_option(SCRIPTOPT_NO_RUNAWAY, 1);

var data_file := DFOpenDataFile("packages", DF_CREATE);

program CheckPackages()
	
	// This foreach loop is here until 
	// DeleteDataFile() in datafile.em works
	// Its purpose is to wipe the datafile so its updated
	// for the new package settings.
	foreach elem in (data_file.keys())
		data_file.DeleteElement(elem);
	endforeach
	
	DF_DEBUG_MODE := 0;
	
	// Run through each package
	// If it has an ICP.cfg get the settings we want from it.
	// If not, itll go on the gump as packagename [No ICP support]
	foreach package in (polcore().packages);
		var pkg_info := struct;
		
		var data_elem := DFFindElement(data_file, package, DF_CREATE);
		
		var icp_cfg := ReadConfigFile(":"+package+":icp");
		icp_cfg := icp_cfg["Register"];
		
		if ( icp_cfg )
			pkg_info.+Name := GetCfgValue(icp_cfg, "Name");
			pkg_info.+Version := GetCfgValue(icp_cfg, "Version");
			pkg_info.+Description := GetCfgValue(icp_cfg, "Description");
			pkg_info.+Creator := GetCfgValue(icp_cfg, "Creator");
			pkg_info.+C_Email := GetCfgValue(icp_cfg, "C_Email");
			pkg_info.+Maintainer := GetCfgValue(icp_cfg, "Maintainer");
			pkg_info.+M_Email := GetCfgValue(icp_cfg, "M_Email");
			
			// Makes a list of scripts and text commands that will be on the gump.
			var script_list := GetConfigStringArray(icp_cfg, "Script");
			var cmd_list := GetConfigStringArray(icp_cfg, "TextCmd");
			
			data_elem.SetProp("Main", pkg_info);
			data_elem.SetProp("Scripts", script_list);
			data_elem.SetProp("TextCommands", cmd_list);
		else
			pkg_info.+Name := package;
			pkg_info.+NoSupport := 1;
			data_elem.SetProp("Main", pkg_info);
		endif
		
		UnloadConfigFile(":"+package+":icp");
	endforeach
	
	Print("[CONTROL] Finished setting up packages.");	
endprogram

// * GetCfgValue(byref cfg_elem, value)
//
// Used to get values from the config file.
// Makes sure that the value returned is "clean"
// so <uninitialized object> is not seen on the gump.
//
function GetCfgValue(byref cfg_elem, value)
	value := GetConfigString(cfg_elem, value);
	if ( !value )
		value := "";
	endif
	return value;
endfunction
