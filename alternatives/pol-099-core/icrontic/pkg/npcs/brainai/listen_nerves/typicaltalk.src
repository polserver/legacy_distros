///////////////////////////////////////////////
// typicaltalk.src
//
// Created 8/21/2002 
// Updated 8/21/2002 
//
// By Birdy
//
///////////////////////////////////////////////
//
// This nerve uses the 094 standard distro 
// speech files to allow NPC's to respond to
// speech.  As an added bonus, some of the bugs
// in the original 094 distro speech code were
// fixed as well, and a slight added
// functionality was added in allowing for a 
// speechgroup and speechmood cprop you can set
// on the fly to change the mob's responses.
// Also added, non letter/digit characters were
// stripped out of conversation, so that you 
// can now say "Who is Lord British?" and get
// the "British" response.
// 
// Also added, the ability of the npc to 
// respond to the keyword "name" and reply 
// with their name.
//
// While not terribly complex, these speech
// files do allow for a little added flavor
// to a shard's sentient NPC's.
//
///////////////////////////////////////////////
//
// Presently this nerve runs only when fired
// by the brain, since it is assumed any given
// NPC will on average not be responding to 
// speech too often.  You should also take care
// to set the listen_range AI_setting to a low
// enough value that you are usually fairly 
// close to the NPC to get a response.
//
///////////////////////////////////////////////
use uo;
use os;
use cfgfile;

include "../ai_include/NPC_Commands";

var speech_cfg;

program ListenNerve(params)
	var nerve_name	:= params[1];
	var thenpc	:= params[2];
	var ev		:= params[3];

	var talker := ev.source;
	var speech := ev.text;

	speech := lower(speech);
	if ( CheckLineOfSight(thenpc, talker) )
	  AI_Turn(thenpc, talker, NETURN_TOWARD);
          if (speech["name"])
            AI_Speak(thenpc, "My name is " + thenpc.name);
          else
            AI_Speak(thenpc, GetTypicalReply(speech, talker, thenpc));
          endif
        endif

endprogram

function GetTypicalReply(theText, theSpeaker, theRecipient)

  var speechgroup;
  var speechmood;
  var tspeech;

    speechgroup := GetObjProperty( theRecipient, "speechgroup" );
    speechmood  := GetObjProperty( theRecipient, "speechmood" );
    if (!speechmood)
      speechmood := "default";
    endif
  
    if (!speechgroup)
      speechgroup := "default";
    endif

    tspeech := process_text(stripPunctuation(theText), speechmood, speechgroup);

    return tspeech;
                        
endfunction

function process_text(inspeech, mood, templatename)
  var retval;
  var elem;
  var tmpword;
  var words := SplitWords(inspeech);

  speech_cfg := ReadConfigFile("::speechgroup");
  elem := speech_cfg[templatename];

  if (!elem)
    return "";
  endif

  var wordgroup := GetConfigInt(elem, mood);

  if(!wordgroup)
    wordgroup := GetConfigInt(elem, "default");
  endif

  if(!wordgroup)
    wordgroup := templatename;
  endif

  elem := speech_cfg[wordgroup];

  foreach word in words
    tmpword := GetConfigString(elem,  word );
    if(tmpword)
      retval := tmpword;
    endif
  endforeach

  if(!retval)
    retval := GetConfigString(elem, "default" );
  endif

  if(!retval)
    retval := "";
  endif

  return retval;

endfunction

function stripPunctuation(inString)
var outString := "";
var asciiValue;
var i;

  for (i:=1; i<=len(inString); i:=i+1)
    asciiValue := CAsc(inString[i]);
    if (((asciiValue >= 48) && (asciiValue <= 57)) ||   // Numbers
        ((asciiValue >= 65) && (asciiValue <= 90)) ||   // Uppercase
        ((asciiValue >= 97) && (asciiValue <= 122))     // Lowercase
       )
      outString := outString + inString[i];
    else
      outSTring := outString + " ";
    endif
  endfor

  return outString;
    
endfunction
