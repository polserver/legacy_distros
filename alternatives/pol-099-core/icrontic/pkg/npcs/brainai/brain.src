// 4.0
//
// brain.src
//
// NPC AI-Script to control all non-setup actions. Acts as the "brain"
// and fires off external scripts that act as the "nerves" of the NPC.
//
// Created: 10/06/2001 23:32
// Updated: 2/13/2003 12:12AM
//
use uo;
use os;
use npc;
use cfgfile;

include "ai_include/NPC_Event";
include "ai_include/NPC_Errors";
include "ai_include/NPC_Setup";
include "ai_include/NPC_Nerves";
include "ai_include/Movement";
include "include/sysevent";

var me := self();
var sleep_mode := 0;
var idle_ticks := 0;
var settings := dictionary;

program BrainAI()

	//Spawner compatability
	SetObjProperty(me, "AiSerial", CInt(me.serial));
	
	//Run setup steps for the npc.
	Initialize();

	//Begin thinking.
	while ( me )
		var ev := 0;
			
		//If the npc is not in sleep mode, run its cycle script.
		if ( !sleep_mode )
			if ( settings["cycle_script"] )
				//Useful for looking around and targetting a player.
				var cyc_script := Run_Script_To_Completion(settings["cycle_script"], {me, settings});
				
				if ( cyc_script.errortext )
					Say("Cycle Script:"+cyc_script.errortext+" -> "+settings["cycle_script"]);
				endif
			endif
			
			//Wait for an event for up to "cycle_wait" seconds.
			//The smaller this number, the faster the npc thinks while
			//it is awake. The larger this number, the longer the npc
			//will take to reach "idle ticks".
			ev := wait_for_event(settings["cycle_wait"]);
		endif
		
		//If no event was received, check to see if it is time to go to sleep.
		if ( !ev )
			//If the AI has looped more than "idle_ticks" times
			//without getting any events, start the sleep process.
			if ( idle_ticks >= settings["idle_ticks"] )
				//If the NPC is not already in sleep mode, stop the appropriate 
				//nerves leave warmode, and start the sleep script up, if it has one.
				if ( !sleep_mode )
					StopNerves();
					SetWarMode(0);
					
					if ( settings["sleep_script"] )
						var process := GetNerve("Idle");
						if ( !process )
							StartNerve("Idle", settings["sleep_script"], {me, ev, settings});
						endif
					endif
					
					//The brain is now in sleep mode, isnt it cute?
					sleep_mode := 1;
				endif
				
				//Stay in this mini-loop waiting up to "sleep_time" seconds
				//between waiting for an event. Higher numbers are better here.
				//We still want to wait for events here though so you can do stuff
				//like AI_Wander() in the sleep script, and pass NO_WAKE so we dont
				//kill the sleep nerve.
				while ( !ev )
					ev := wait_for_event(settings["sleep_time"]);
				endwhile
			endif
		endif

		if ( !ev )
			if ( !sleep_mode )
				//Don't increment if we are already asleep.
				//This is a fix for theoretically exceeding MAX_INT
				//and a mobile not going to sleep for a very long time.
				//Better to be safe than sorry. ;)
				idle_ticks := idle_ticks+1;
			endif
		else
			//If an event was received, check to see if it is telling
			//the npc not to get drowsy. Assumes .WakeUp == WAKEUP by
			//default for compatability with core events.
			if ( ev.WakeUp != NOWAKE )
	   			//What ever sent the nerve didnt give the
	   			//brain permission to stay asleep.
	   			//If the brain is asleep, kill the sleep nerve, 
	   			//and set the sleep_mode to 0.
	   			if ( sleep_mode )
	   				KillNerve("Idle");
	   				sleep_mode := 0;
	   			endif
	   			
	   			//Set idle_ticks to 0 since an event was received and
	   			//the NO_WAKE constant was not sent with the event.
	   			idle_ticks := 0;
	   		endif
			
			//Process the event received.
	   		ProcessEvent(ev, settings);
	   	endif
	endwhile
endprogram

function ProcessEvent(byref ev, byref settings)
	//Should be set to approx. the number of case possibilities.
	var old_priority := set_priority(25);
	
	case( ev.type )
		//Check movement first, since its the event
		//that seems to be sent most often.

		// Move NPC
		// .source	: From/To whom/what?
		// .speed	: Walk/Run
		// .direction	: Away/Towards
		// .loop	: Number of times to attempt to loop the movement.
		NPCEVENT_MOVE:
			Movement(ev);
		
		// Instructs the npc to walk toward an XY coordinate.
		// .x and .y	: From/To  coordinates
		// .speed	: Walk/Run
		// .direction	: Away/Towards
		// .loop	: Number of times to attempt to loop the movement.
		NPCEVENT_MOVE_XYZ:
			MovementXYZ(ev);
		
		// Triggered when a mobile enter's the npcs "reaction_range".
		// .source	: What entered the area
		SYSEVENT_ENTEREDAREA:
			if ( settings.exists("enter_react_script") )
				var process := GetNerve("EnterReaction");
				if ( !process )
					StartNerve("EnterReaction", settings["enter_react_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
		
		// Triggered when a mobile leaves the npc's "leave_react_range".
		// .source	: What left the area
		SYSEVENT_LEFTAREA:
			if ( settings.exists("leave_react_script") )
				var process := GetNerve("LeaveReaction");
				if ( !process )
					StartNerve("LeaveReaction", settings["leave_react_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
		
		// Sent when something targets the npc to begin combat or
		// when something has damaged the npc.
		// .source	: What caused the damage or engaged the npc
		// For SYSEVENT_DAMAGED
		// .damaged	: Integer amount of damage.
		SYSEVENT_ENGAGED:
		SYSEVENT_DAMAGED:
			if ( settings.exists("combat_script") )
				var thing := ev.source;
				if ( thing.ISA(POLCLASS_MOBILE) )
					var process := GetNerve("Combat");
					if ( !process )
						StartNerve("Combat", settings["combat_script"], {me, ev, settings});
					else
						process.SendEvent(ev);
					endif
				endif
			endif
		
		// Instructs the npc to run its disengage nerve.
		// When something attacking it goes out of warmode, this is run.
		// .source	: What was targetting this npc but has now left combat mode.
		SYSEVENT_DISENGAGED:
			if ( settings.exists("disengage_script") )
				var process := GetNerve("Disengage");
				if ( !process )
					StartNerve("Disengage", settings["disengage_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
		
		// When speech is made by a player, this nerve is used.
		// Note: The NPC function Say() doesnt yet pass around the speech event.
		// .source	: Where the speech originated.
		// .text	: The actual speech
		// extra 095 stuff
		// .uc_text	: a "Unicode array" of 2-byte "Big Endian" integers.
		// .langcode	: a 3-character, uppercase language code.
		// .texttype	: "yell", "whisper", "emote", "default".
		SYSEVENT_SPEECH:
			if( settings.exists("listen_script") )
				var process := GetNerve("Speech");
				if ( !process )
					StartNerve("Speech", settings["listen_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
		
		// Instructs the npc to run its double click script.
		// Run when the npc is double clicked by a player.
		// .source	: What sent the double click
		SYSEVENT_DOUBLECLICKED:
			if ( settings.exists("dbl_click_script") )
				if ( Distance(ev.source, me) <= settings["dbl_click_range"] )
					var process := GetNerve("DblClick");
					if ( !process )
						StartNerve("DblClick", settings["dbl_click_script"], {me, ev, settings});
					else
						process.SendEvent(ev);
					endif
				endif
			endif
			
		// The NPC is a merchant, and has sold or purchased something.
		// Both sold and bought events are sent to this same nerve.
		// The best thing to do is fork it into two functions inside the
		// nerve script to handle each event type.
		// MERCHANT_SOLD means the merchant sold an item to the player.
		// MERCHANT_BOUGHT means the merchatn bought something from the player.
		//
		// .source	: Who the merchant is selling to/buying from.
		// .amount	: Gold amount for the sale/purchase.
		SYSEVENT_MERCHANT_SOLD:
		SYSEVENT_MERCHANT_BOUGHT:
			if ( settings.exists("merchant_script") )
				var process := GetNerve("Merchant");
				if ( !process )
					StartNerve("Merchant", settings["merchant_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
				
		// Instructs the npc to run its flee script.
		// .source	: What to flee from.
		NPCEVENT_FLEE:
			if ( settings.exists("flee_script") )
				var process := GetNerve("Flee");
				if ( !process )
					StartNerve("Flee", settings["flee_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
			
		// The npc has killed its opponent and
		// the combat script has sent the winfight event
		// .source	: Defeated foe!
		NPCEVENT_WINFIGHT:
			if ( settings.exists("win_script") )
				var process := GetNerve("Win");
				if ( !process )
					StartNerve("Win", settings["win_script"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
			
		//A nerve has instructed the brain to kill another nerve or its self.
		// .name	: Nerve name
		NPCEVENT_ENDNERVE:
			KillNerve(ev.name);
			
		//A nerve has instructed the brain to start another nerve.
		// .name	: Nerve name
		// .script	: Nerve script
		// .data	: array of goodies
		NPCEVENT_STARTNERVE:
			StartNerve(ev.name, ev.script, ev.data);
		
		// Set a new opponent!
		// NOTE: Auto-sets Warmode=1!
		// .source	: Opponent (mobile)
		NPCEVENT_OPPONENT:
			SetOpponent(ev.source);
		
		// Say something
		// .text	: Speech content
		NPCEVENT_SPEAK:
			say(ev.text);
		
		// Turn toward something
		// .source	: Target (anything)
		// .direction	: NETURN_TOWARD or NETURN_AWAY
		NPCEVENT_TURN:
			case (ev.direction)
				NETURN_TOWARD:
					TurnToward(ev.source);
				NETURN_AWAY:
					TurnAwayFrom(ev.source);
			endcase
		
		// Face towards or away from XY coordinates.
		// .x and .y replace .source for TURN_XYZ
		// .direction	: NETURN_TOWARD or NETURN_AWAY
		NPCEVENT_TURN_XYZ:
			case (ev.direction)
				NETURN_TOWARD:
					TurnTowardLocation(ev.x, ev.y);
				NETURN_AWAY:
					TurnAwayFromLocation(ev.x, ev.y);
			endcase
		
		// Set WarMode state
		// NOTE: Auto-clears Opponent if turned off!
		// .value : 0=Off. 1=On.
		NPCEVENT_WARMODE:
			SetWarmode( ev.value );
		
		// Wander somewhere
		NPCEVENT_WANDER:
	   		Wander();
	   	
	   	// Force the npc to go into its sleep mode.
	   	// If the next event in the queue tells it to wake up,
	   	// this command will be useless.
	   	NPCEVENT_SLEEP:
	   		idle_ticks := settings["idle_ticks"]+1;
	   	
	   	// Force the npc out of sleep mode.
	   	NPCEVENT_WAKEUP:
	   		sleep_mode := 0;
	   		idle_ticks := 0;
	   		
	   	// Forward an event from one nerve to another.
	   	// .NerveName	: The name of the nerve to forward the event to.
	   	// .mask	: Type of event for the nerve to receive.
	   	// .data	: Data to forward to the nerve.
	   	NPCEVENT_FWDNERVE:
	   		var process := GetNerve(ev.NerveName);
			if ( process )
				process.SendEvent(ev);
			endif
			
		// If the event .type is unknown, send it to the
		// npc's "virtual" nerve if it has one.
	   	default:
	   		if ( settings["virtual_nerve"] )
	   			var process := GetNerve("Virtual");
				if ( !process )
					StartNerve("Virtual", settings["virtual_nerve"], {me, ev, settings});
				else
					process.SendEvent(ev);
				endif
			endif
	   endcase

	   // If the event has a .process, reply to it by sending
	   // an event with .type being the NPCEVENT_DONE constant
	   // and telling it what event it sent that has finished
	   // being processed.
	   if ( ev.process )
	   	var temp := struct;
	   	temp.+type := NPCEVENT_DONE;
	   	temp.+source := ev.type;
	   	(ev.process).SendEvent(temp);
	   endif
	   
	   set_priority(old_priority);
endfunction

function Initialize()
	//This is one of the heavier parts of the brain, 
	//so keep its priority under 5. It gets restored to its
	//previous priority at the end of the initialize() function.
	var old_priority := set_priority(3);

	var npc_cfg := ReadConfigFile("::npcdesc");
	var my_info := npc_cfg[me.npctemplate];
	if ( !npc_cfg )
		KillMe("Unable to load NPCDESC.CFG in the brain.");
		return;
	elseif ( !my_info )
		KillMe("Unable to find my info in NPCDESC.CFG.");
		return;
	endif
	//Free up memory by clearing "npc_cfg" since it is not needed
	//in this function anymore.
	npc_cfg := {};

	//NPC Settings
	//Stored in a dictionary to pass to nerves so they
	//do not need to keep grabbing this info from the config.
	//You could put custom things into your nerves using these settings.
	//Some things will need to be arbitrarily set for the brain.
	//Example: for a nerve you could do Setting walk_only 1 or Setting flee_level 20%
	foreach setting in GetConfigStringArray(my_info, "AISetting")
		setting := SplitWords(setting);
		var key := setting[1];
		var value := setting[2];

		//Print("settings["+key+"] := UnPack("+value+")");
		settings[key] := UnPack(value);
		//Print("settings["+key+"] == "+settings[key]);
	endforeach
	
	//Allows you to set a dictionary prop on mobiles to add
	//extra settings to an npc as well as overriding settings in its
	//npcdesc.cfg entry
	var cstm_settings := GetObjProperty(me, "AI_Settings");
	foreach key in (cstm_settings.keys())
		var value := cstm_settings[key];
		if ( value == error )
			settings.erase(key);
		else
			settings[key] := value;
		endif
	endforeach
	//Free up that bit of memory since it is not needed in this function anymore.
	cstm_settings := {};

	//Checks here for important stuff.
	//The brain requires these settings to be set, if they are not,
	//it wil give them default values that work best in most cases.
	if ( !settings.exists("cycle_wait") )
		settings["cycle_wait"] := 10;
	endif
	if ( !settings.exists("sleep_time") )
		settings["sleep_time"] := 1024;
	endif
	if ( !settings.exists("idle_ticks") )
		settings["idle_ticks"] := 5;
	endif

	//If this is a new npc, set it up.
	if ( !GetProperty("npc_info") )
		//If there is an init script, run it. 
		//Otherwise, run the brain's own internal setup procedure.
		if ( settings.exists("init_script") )
			var init_script := Run_Script_To_Completion(settings["init_script"], me);
			if ( init_script.errortext )
				KillMe("Init script failed:"+init_script.errortext);
				return;
			endif
		else
			//Sets the npc's name by doing <random> replacement.
			//Sets up the npc's equipment.
			//Functions are in npcsetup.inc
			var name := SetNPCName(me);
			var equip := SetNPCEquipment(me);
			if ( name.errortext )
				KillMe("Error in SetNPCName() - " + name.errortext);
				return;
			elseif ( equip.errortext )
				KillMe("Error in SetNPCEquipment() - " + name.errortext);
				return;
			endif
		endif
	else
		//This can only happen if restart() was done
		//Kill all the old nerves in this situation.
		g_nerves := LoadNerves(me);
		StopNerves();
		SetWarmode(0);
		SetOpponent(0);
	endif

	//This is done outside the above if statement to update the PID
	//and set a new nerve dictionary cprop. See npc_setup.inc
	SetNPCProps(me);
	
	//Store the npc's serial on equipment that it is wearing.
	//Useful for victory nerves where npcs loot equipment from
	//players and equip it, and may remove their own stuff to do-so.
	//In the npc death.src script, you can get the OrigEquipment and
	//nerf those items if you like and/or remove the cprop. If this
	//loop is useless to you, then just remove it.
	foreach item in ListEquippedItems(me)
		SetObjProperty(item, "OrigEquipment", me.serial);
		sleepms(2);
	endforeach
	
	//
	//Initialize system events based on settings.
	//
	if ( settings.exists("listen_script") )
		EnableEvents(SYSEVENT_SPEECH, settings["listen_range"]);
	endif
	
	if ( settings.exists("ghost_listen_script") )
		EnableEvents(SYSEVENT_GHOST_SPEECH, settings["ghost_listen_range"]);
	endif
	
	if ( settings.exists("give_item_script") )
		EnableEvents(SYSEVENT_ITEM_GIVEN);
	endif
	
	if ( settings.exists("dbl_click_script") )
		EnableEvents(SYSEVENT_DOUBLECLICKED, settings["dbl_click_range"]);
	endif

	if ( settings.exists("enter_react_script") )
		EnableEvents(SYSEVENT_ENTEREDAREA, settings["reaction_range"]);
	endif

	if ( settings.exists("leave_react_script") )
		EnableEvents(SYSEVENT_LEFTAREA, settings["leave_react_range"]);
	endif

	if ( settings.exists("disengage_script") )
		EnableEvents(SYSEVENT_DISENGAGED);
	endif

	if ( settings.exists("merchant_script") )
		EnableEvents(SYSEVENT_MERCHANT_BOUGHT);
		EnableEvents(SYSEVENT_MERCHANT_SOLD);
	endif

	if ( settings.exists("combat_script") )
		EnableEvents(SYSEVENT_ENGAGED+SYSEVENT_DAMAGED);
	endif

	//These two are left disabled, because they fill up the event queue
	//fairly quickly. If anyone can think of a good way to use these or
	//can not live without them, let me know.
	//EnableEvents(SYSEVENT_OPPONENT_MOVED);
	//EnableEvents(SYSEVENT_HOSTILE_MOVED);
		
	set_priority(old_priority);
endfunction

