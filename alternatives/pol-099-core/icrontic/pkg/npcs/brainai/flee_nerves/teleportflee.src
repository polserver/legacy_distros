///////////////////////////////////////////////
// teleportflee.src
//
// Created 2/10/2003
// Updated 2/10/2003
//
// By MuadDib
// http://www.icrontic.net
//
///////////////////////////////////////////////
//
// This nerve causes a creature to run
// away from what ever is attacking it starting
// with a Teleport to random spot away from attacker.
//
// Based originally off Austin's runaway.src
///////////////////////////////////////////////

use uo;
use os;
use util;

include "../ai_include/NPC_Commands";
include "include/client";

program FleeNerve(params)
	var nerve_name	:= params[1];
	var npc		:= params[2];
	var opponent	:= params[3].source;
	var settings	:= params[4];

	AI_Setopponent(npc, opponent);

	//Store it here so it does not have to do the math over and over.
	var flee_level := CInt((GetVitalMaximumValue(npc, "hits") * settings["flee_level"]) / 100);

	while( npc )
		var dist := Distance(npc, opponent);

                // If below flee level and distance is 1
                if ( ( GetVital(npc, "hits") < flee_level ) and ( Distance(npc, opponent) == 1 ))
                  teleportAway(npc, opponent);
                  AI_Move(npc, opponent, NEMOVE_AWAY, NEMOVE_RUN, WAKEUP, 100);
		//If the npc has healed enough, stop running away.
		elseif ( ( GetVital(npc, "hits") > flee_level ) )
			if ( dist <= settings["reengage"] )
				AI_Attack(npc, opponent);
			endif
			AI_Disengage(npc);
			AI_EndNerve(npc, nerve_name);
		//If the person it was told to run away from is still chasing, keep running
		elseif ( Distance(npc, opponent) < 20 )
			AI_Move(npc, opponent, NEMOVE_AWAY, NEMOVE_RUN, WAKEUP, 100);
		//If we have not healed all the way, but the opponent is far enough away
		//then run away from anyone else attacking
		else
			//Do checks, and see if there are other opponents to run from.
			if ( opponent.dead )
				var new_opponent := FleeStatus(npc, opponent, nerve_name);
				if ( !new_opponent )
					AI_Disengage(npc);
					AI_WinFight(npc, opponent);
					AI_EndNerve(npc, nerve_name);
				else
					opponent := new_opponent;
				endif
			elseif ( !opponent )
				var new_opponent := FleeStatus(npc, opponent, nerve_name);
				if ( ! new_opponent )
					AI_Disengage(npc);
					AI_EndNerve(npc, nerve_name);
				else
					opponent := new_opponent;
				endif
			elseif ( dist > 20 )
				var new_opponent := FleeStatus(npc, opponent, nerve_name);
				if ( new_opponent )
					opponent := new_opponent;
				else
					AI_Disengage(npc);
					AI_EndNerve(npc, nerve_name);
				endif
			endif
		endif

		sleepms(600);
		wait_for_event(0);
	endwhile

endprogram

function FleeStatus(npc, byref opponent, nerve_name)

	var hostiles := ListHostiles(npc, 10);
	if ( hostiles.size() > 0 )
		//Return the first hostile in the list to run from.
		//It is usually the closest one.
		AI_Setopponent(npc, hostiles[1]);
		return hostiles[1];
	else
		//If there are no hostiles return 0.
		return 0;
	endif

	return 0;
endfunction

function teleportAway(npc, opponent)

  var jump := (RandomInt(10) + 1);
  var x := npc.x;
  var y := npc.y;
  var z := npc.z;
  var newx, newy;

  case(jump)
      1: newx := x+3;
      2: newy := y+3;
      3: newx := x-3;
      4: newy := y-3;
      5: newx := x+3; newy := y+3;
      6: newx := x-3; newy := y-3;
      7: newx := x+3; newy := y-3;
      8: newx := x-3; newy := y+3;
      9: newx := x+1; newy := y+3;
      10: newx := x-1; newy := y-3;
  endcase

  if(CheckLosAt( npc, newx, newy, z ))
    MoveCharacterToLocation( npc, newx, newy, z, MOVECHAR_FORCELOCATION);
    PlayStationaryEffect( x, y, z, FX_SMOKE, speed:=0xa, loop:=0xa );
    PlayStationaryEffect( npc.x, npc.y, npc.z, FX_SMOKE, speed:=0xa, loop:=0xa );
    PlaySoundEffect( npc, SFX_SPELL_TELEPORT );
  endif
  
  return;
  
endfunction
