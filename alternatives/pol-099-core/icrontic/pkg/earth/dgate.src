use uo;
use util;
use os;

include "include/client";
include "castopts";
include "include/spellrestrictions";
include "include/objtype";

const KillSound := 0x202;
const KillEffect := 0x375a;
const SFX_SPELL_FAIL := 0x005b;

program cast_dgate(caster)
  var mageryskill := CInt(GetEffectiveSkill(caster, SKILLID_MAGERY));
  var aloreskill := CInt(GetEffectiveSkill(caster, SKILLID_ANIMALLORE));
	if ((!mageryskill > 50) && (!aloreskill > 50))
	sendsysmessage(caster, "You are not yet learned enough in the ways of nature");
	return;
	endif

        var options := GetObjProperty(caster, "DruidOpts");
	var spelldelay := 8;

	if (!options)
		options := {};
	else
		options := splitwords(options);
	endif
        EraseObjProperty(caster, "DruidOpts");

	if (IsNoWords(options) = 0)
                SpeakPowerWords(caster, 100);
	endif


	if (IsNoDelay(options) = 0)
		While (spelldelay > 0)
			PerformAction(caster, ANIM_CAST_DIR);
			sleep(1);
			spelldelay := spelldelay - 1;
		endwhile
	endif

	if (IsNoMana(options) = 0)
                if (!ConsumeMana(caster, 100))
			PlayObjectCenteredEffect(caster, FX_SPELL_FAIL, 7, 7);
			PlaySoundEffect(caster, SFX_SPELL_FAIL);
			SendSysMessage(caster, "Insufficient Mana.");
			return;
		endif
	endif
			
	if (IsNoRegs(options) = 0)
                if (!ConsumeReagents(caster, 100))
			PlayObjectCenteredEffect(caster, FX_SPELL_FAIL, 7, 7);
			PlaySoundEffect(caster, SFX_SPELL_FAIL);
			SendSysMessage(caster, "Insufficient Reagents.");
			return;
		endif
	endif

	if (IsNoSkillCheck(options) = 0)
		if (!CheckSkill(caster, SKILLID_MAGERY, 50, 0))
			PlayObjectCenteredEffect(caster, FX_SPELL_FAIL, 7, 7);
			PlaySoundEffect(caster, SFX_SPELL_FAIL);
                        PrintTextAbove(caster, "The spell fizzles");
			return;
		endif
	endif

        var cast := caster;
        var casterskill := GetAttribute(caster, SKILLID_EVALINT);
	var casterpower := GetAttribute(caster, SKILLID_MAGERY);
	var circle := 7;

	SendSysmessage( caster, "Select a rune to gate from." );
	var cast_on := CanTargetThing(caster, circle, TGTOPT_CHECK_LOS );

	if (!cast_on)
		return;
	endif

	if (not Accessible(caster, cast_on))
		SendSysmessage (caster, "You can't reach that!");
	endif

	if (cast_on.objtype != UOBJ_RUNE)
		SendSysmessage(caster, "You can only cast that on a recall rune!");
		return;
	endif

	if(!ReserveItem(cast_on)) return; endif

	var tox := Cint(GetObjProperty( cast_on, "x" ));
	var toy := Cint(GetObjProperty( cast_on, "y" ));
	var toz := Cint(GetObjProperty( cast_on, "z" ));

	set_critical( 1 );
	var gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z, 0x1fd4, 1 );
	var gate2 := CreateItemAtLocation( tox, toy, toz, 0x1fd4, 1 );
	if (!gate1 or !gate2)
        	return;
	endif
	SetObjProperty( gate1, "GateDestX", gate2.x );
	SetObjProperty( gate1, "GateDestY", gate2.y );
	SetObjProperty( gate1, "GateDestZ", gate2.z );
	SetObjProperty( gate2, "GateDestX", gate1.x );
	SetObjProperty( gate2, "GateDestY", gate1.y );
	SetObjProperty( gate2, "GateDestZ", gate1.z );
   var umana;
    case (circle)
    1: umana :=  4;
    2: umana :=  6;
    3: umana :=  9;
    4: umana := 11;
    5: umana := 14;
    6: umana := 20;
    7: umana := 40;
    8: umana := 50;
    endcase
   var mana := GetMana(caster);
   if(mana >= umana)
     SetMana(caster, Cint(mana - umana));
   endif

	Detach();

	set_critical( 0 );

	PlaySoundEffect( caster, SFX_SPELL_GATE_TRAVEL );

	sleep(30);
    
	set_critical(1);
	DestroyItem( gate1 );
	DestroyItem( gate2 );
	set_critical(0);
endprogram
