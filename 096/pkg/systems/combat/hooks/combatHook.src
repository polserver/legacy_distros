/* $Id$
 *
 * NOTES: 
 *	Return 0 if you want the core to handle the
 *	combat cycle. Return 1 to say that the cycle is over.
 */
 
use uo;
use os;
use polsys;
use cfgfile;

include ":brainai:npcUtil";
include ":combat:settings";
include ":damage:damage";
include ":itemutils:itemdesc";
include "include/client";

/*
 * Global variables
 * With the way hooks work, these are only set only ONCE
 * and stay the same in every instance the hook gets run.
 */
var g_item_cfg := ReadConfigFile(":*:itemdesc");
var g_settings_cfg := CS_GetSettingsCfgFile();

program Install()
	print("INSTALLING: Combat hook... ");
	return 1;
endprogram

exported function Attack(attacker, defender)
	if ( !CanAttack(attacker, defender) )
		return 1;
	endif

	var a_info, d_info;
	SetupInfo(attacker, defender, a_info, d_info);
	
	if ( !DistanceChecks(a_info, d_info) )
		return 1;
	elseif ( !AmmoChecks(a_info, d_info) )
		return 1;
	else
		PlayAttackAnimation(a_info);
	endif
	
	var difficulty := CalcHitDifficulty(a_info, d_info);
	if ( SkillCheck(a_info.mobile, GetConfigString(a_info.cfginfo, a_info.prefix+"Attribute"), difficulty) > 0 )
		PlayHitSound(a_info, d_info);
	else
		PlayMissSound(a_info);
	endif	
endfunction

function CanAttack(attacker, defender)
	if ( attacker == defender )
		return 0;
	elseif ( !CheckLineOfSight(attacker, defender) )
		return 0;
	endif
	
	return 1;
endfunction

function DistanceChecks(byref a_info, byref d_info)
	var cur_range := Distance(a_info.mobile, d_info.mobile);
	if ( cur_range > GetConfigInt(a_info.cfginfo, a_info.prefix+"MaxRange") )
		CombatMsg(a_info.mobile, "Opponent is too far away.", "Dist");
		return 0;
	elseif ( cur_range < GetConfigInt(a_info.cfginfo, a_info.prefix+"MinRange") )
		CombatMsg(a_info.mobile, "Opponent is too close.", "Dist");
		return 0;
	else
		return 1;
	endif
endfunction

function AmmoChecks(byref a_info, byref d_info)
	if ( !(a_info.cfginfo).AmmoType )
		return 1;
	endif
	
	if ( ConsumeSubstance((a_info.mobile).backpack, (a_info.cfginfo).AmmoType, 1) )
		PlayMovingEffect(a_info.mobile, d_info.mobile, (a_info.cfginfo).ProjectileAnim, 10, 10);
		return 1;
	else
		CombatMsg(a_info.mobile, "You do not have any "+GetObjTypeDesc((a_info.cfginfo).AmmoType, 1)+"!", "Ammo");
		return 0;
	endif
endfunction

function PlayAttackAnimation(byref a_info)
	var attack_anim := 0x5; // Default attack anim for NPCs.
	if ( (a_info.cfginfo).Anim )
		// Normal weapons
		var anim_list := GetConfigStringArray(a_info.cfginfo, "Anim");
		attack_anim := anim_list[RandomInt(anim_list.size())+1];
	elseif ( (a_info.cfginfo).AttackAnimation )
		// NPC intrinsic weapons
		var anim_list := GetConfigStringArray(a_info.cfginfo, "AttackAnimation");
		attack_anim := anim_list[RandomInt(anim_list.size())+1];
	endif
	
	PerformAction(a_info.mobile, CInt(attack_anim));
	
	return attack_anim;
endfunction

function CalcHitDifficulty(byref a_info, byref d_info)
	return RandomInt(100);
endfunction

function PlayHitSound(byref a_info, byref d_info)
	var hit_sound := GetConfigStringArray(a_info.cfginfo, a_info.prefix+"HitSound");
	hit_sound := hit_sound[RandomInt(hit_sound.Size())+1];
	PlaySoundEffect(a_info.mobile, hit_sound);
	
	var damaged_sound;
	if ( (d_info.mobile).npctemplate )
		damaged_sound := GetConfigStringArray(d_info.cfginfo, "DamagedSound");
	else
		case ( (d_info.mobile).gender )
			0:// Male
				damaged_sound := array(341, 342, 343, 345, 346);
				break;
			1://Female
				damaged_sound := array(332, 333, 334, 335, 336);
				break;
		endcase
	endif
	damaged_sound := damaged_sound[RandomInt(damaged_sound.Size())+1];
	
	PlaySoundEffect(d_info.mobile, damaged_sound);
	
	return 1;
endfunction

function PlayMissSound(byref a_info)
	var miss_sound := GetConfigStringArray(a_info.cfginfo, a_info.prefix+"MissSound");
	miss_sound := miss_sound[RandomInt(miss_sound.Size())+1];
	PlaySoundEffect(a_info.mobile, miss_sound);
	
	return 1;
endfunction

function SetupInfo(attacker, defender, byref a_info, byref d_info)
	a_info := struct;
	a_info.+mobile := attacker;
	if ( attacker.IsA(POLCLASS_NPC) && (attacker.weapon).intrinsic )
		a_info.+prefix := "Attack";
		a_info.+cfginfo := NPC_GetNPCConfig(attacker.npctemplate);
	else
		a_info.+prefix := "";
		a_info.+cfginfo := g_item_cfg[(attacker.weapon).objtype];
	endif
		
	d_info := struct;
	d_info.+mobile := defender;
	if ( defender.IsA(POLCLASS_NPC) && (defender.weapon).intrinsic )
		d_info.+prefix := "Attack";
		d_info.+cfginfo := NPC_GetNPCConfig(defender.npctemplate);
	else
		d_info.+prefix := "";
		d_info.+cfginfo := g_item_cfg[(defender.weapon).objtype];
	endif
	var shield := GetEquipmentByLayer(defender, LAYER_HAND2);
	if ( shield.ISA(POLCLASS_ARMOR) )
		d_info.+shield := shield;
	endif
	
	return 1;
endfunction

function CombatMsg(mobile, text, type:="")
	// This is done just to prevent message spam on fast weapons.
	if ( CInt(GetObjProperty(mobile, "#CH-Msg"+type)) < ReadMillisecondClock() )
		SendSysMessage(mobile, text);
		SetObjProperty(mobile, "#CH-Msg"+type, ReadMillisecondClock()+800);
	endif
	
	return 1;
endfunction
