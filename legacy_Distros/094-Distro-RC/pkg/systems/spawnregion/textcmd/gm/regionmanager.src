include "../../../../foundations/gumps/gumps";
include "include/gumpUtil";
include "include/client";
include "../../spawnRegion";
include "include/yesNo";

const MAX_X     := 240;
const MAX_Y     := 340;
const TPERPAGE  := 12;
var alldone := 0;
var regiondone := 0;

program textcmd_RegionManager(who, param)
  if (param)
    case (param)
      "start": if (GetGlobalProperty("SpawnRegionOff"))
                 EraseGlobalProperty("SpawnRegionOff");
                 SendSysMessage(who, "SpawnRegionManager enabled.");
               else
                 SendSysMessage(who, "SpawnRegionManager already enabled.");
                 return 0;
               endif
      "1": if (GetGlobalProperty("SpawnRegionOff"))
                 EraseGlobalProperty("SpawnRegionOff");
                 SendSysMessage(who, "SpawnRegionManager enabled.");
               else
                 SendSysMessage(who, "SpawnRegionManager already enabled.");
                 return 0;
               endif
      "stop":  if (!GetGlobalProperty("SpawnRegionOff"))
                 SetGlobalProperty("SpawnRegionOff", 1);
                 SendSysMessage(who, "SpawnRegionManager disabled.");
               else
                 SendSysMessage(who, "SpawnRegionManager already disabled.");
                 return 0;
               endif
      "0":  if (!GetGlobalProperty("SpawnRegionOff"))
                 SetGlobalProperty("SpawnRegionOff", 1);
                 SendSysMessage(who, "SpawnRegionManager disabled.");
               else
                 SendSysMessage(who, "SpawnRegionManager already disabled.");
                 return 0;
               endif
    endcase
    return 1;
  endif
  repeat
    ComposeSpawnRegionGump(who);
  until (alldone);
endprogram

function GlobalSpawnGroups()
  var dfile := OpenDataFile("SpawnGroups");
  return dfile;
endfunction

function GlobalSpawnRegions()
  var dfile := OpenDataFile("SpawnRegions");
  return dfile;
endfunction

function ComposeSpawnRegionGump(who)
  GFInitGump(0, 0);
  GFNoDispose();
  GFNoClose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, MAX_X, MAX_Y);
  GFTextLine(32, 7, 0, "Spawn Region Manager");
  GFTextLine(30, 5, COLOR_YELLOW, "Spawn Region Manager");
  GFTextLine(20, 30, COLOR_BLUE_LIGHT, "Region Name");
  GFTextLine(180, 30, COLOR_BLUE_LIGHT, "Go To");
  GFTextLine(100, 315, COLOR_GREEN, "Add Region?");
  var addnew := GFButtonID(77, 315, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 1);
  GFTextLine(100, 295, COLOR_GREEN, "Edit Groups?");
  var groups := GFButtonID(77, 295, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 1);
  var cancel := GFButtonID(20, MAX_Y - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var rcfg := GlobalSpawnRegions();
  if (!rcfg)
    syslog("Could not read regions file");
    exit;
  endif
  var regions := rcfg.keys();
  var numtemp := regions.size();
  var numpages := 1;
  while (numtemp > 0)
    numtemp := numtemp - TPERPAGE;
    if (numtemp > 0)
        numpages := numpages + 1;
    endif
  endwhile
  var bt := array;
  var btgo := array;
  var pg;
  for (pg := 1; pg <= numpages; pg := pg + 1)
    ComposeRegionsPage(pg, regions, bt, btgo, numpages);
  endfor
  var retkey := GFSendGump(who);
  var num;
  for (num := 1; num <= btgo.size(); num := num + 1)
    if (retkey[btgo[num]])
      GoToRegion(who, regions[num]);
      exit;
    endif
  endfor
  if(retkey[cancel.keyid])
    alldone := 1;
    return 0;
  endif
  if(retkey[addnew.keyid])
    AddNewRegion(who);
    alldone := 0;
    return 0;
  endif
  if(retkey[groups.keyid])
    var done := ComposeSpawnGroupGump(who);
    while(done == 1)
      done := ComposeSpawnGroupGump(who);
    endwhile
    alldone := 0;
    return 0;
  endif
  var idx;
  for (num := 1; num <= bt.size(); num := num + 1)
    if (bt[num] == retkey[0])
      idx := num;
      break;
    endif
  endfor
  if (!idx)
      return 0;
  endif
  var holder := rcfg.FindElement(regions[idx]);
  var rgelem := holder.PropNames();
  var reggroups := {};
  foreach thing in rgelem
    if(thing != "rect")
      reggroups.append(holder.getprop(thing));
    endif
  endforeach
  if (!reggroups)
    syslog("Unable to find groups for: " + regions[idx]);
    SendMsg(who, "Unable to find groups for: " + regions[idx]);
    exit;
  endif
  repeat
    rgelem := holder.PropNames();
    reggroups := {};
    foreach thing in rgelem
      if(thing != "rect")
        reggroups.append(holder.getprop(thing));
      endif
    endforeach
    ComposeRegionGump(who, regions[idx], reggroups);
  until (regiondone);
endfunction

function ComposeSpawnGroupGump(who)
  GFInitGump(0, 0);
  GFNoDispose();
  GFNoClose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, MAX_X, MAX_Y);
  GFTextLine(32, 7, 0, "Spawn Group Editor");
  GFTextLine(30, 5, COLOR_YELLOW, "Spawn Group Editor");
  GFTextLine(20, 30, COLOR_BLUE_LIGHT, "group Name");
  GFTextLine(180, 30, COLOR_BLUE_LIGHT, "Edit");
  GFTextLine(100, 315, COLOR_GREEN, "Add Group?");
  var addnew := GFButtonID(77, 315, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 1);
  var cancel := GFButtonID(20, MAX_Y - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var rcfg := GlobalSpawnGroups();
  if(!rcfg)
    syslog("Could not read regions file");
    return 0;
  endif
  var regions := rcfg.keys();
  var numtemp := regions.size();
  var numpages := 1;
  while (numtemp > 0)
    numtemp := numtemp - TPERPAGE;
    if (numtemp > 0)
        numpages := numpages + 1;
    endif
  endwhile
  var bt := array;
  var btgo := array;
  var pg;
  for (pg := 1; pg <= numpages; pg := pg + 1)
    ComposeGroupsPage(pg, regions, bt, numpages);
  endfor
  var retkey := GFSendGump(who);
  var num;
  if(retkey[cancel.keyid])
    return 0;
  endif
  if(retkey[addnew.keyid])
    alldone := AddNewGroup(who);
    return 1;
  endif
  var idx;
  for (num := 1; num <= bt.size(); num := num + 1)
    if (bt[num] == retkey[0])
      idx := num;
      break;
    endif
  endfor
  if (!idx)
      return 0;
  endif
  var holder := rcfg.FindElement(regions[idx]);
  var reggroups := holder.GetProp("npc");
  repeat
    holder := rcfg.FindElement(regions[idx]);
    reggroups := holder.GetProp("npc");
    ComposeGroupGump(who, regions[idx], reggroups);
  until (regiondone);
  return 1;
endfunction

function ComposeGroupEditor(who, region, reggroups)
  var dfile := OpenDataFile("SpawnGroups");
  var entry := dfile.FindElement(region);
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Group Editor");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Group Editor");
  GFTextLine(20, 30, COLOR_GREEN, region);
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "NPC Name");
  var apply  := GFButtonID(10, 420 - 30, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var gdata;
  var holder := {};
  foreach grp in reggroups
    GFTextEntry(xTxt, yTxt, 200, 30, COLOR_GREEN, grp);
    yTxt := ytxt + yshift;
  endforeach
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "blank");
  var retkey := GFSendGump(who);
  if(!retkey[apply.keyid])
    SendSysMessage(who, "Cancelled");
    return 0;
  else
    SendSysMessage(who, "Editing");
    var temp;
    foreach thing in (retkey.keys)
      if(thing)
        temp := SplitWords(retkey[thing]);
        if((temp[2] != "blank") && (temp[2] != error))
          holder.append(temp[2]);
        endif
      endif
    endforeach
    entry.EraseProp("npc");
    entry.SetProp("npc", holder);
    return 1;
  endif
endfunction

function AddNewGroup(who);
  var dfile := OpenDataFile("SpawnGroups");
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Group Editor");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Group Editor");
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "Group Name");
  var new := GFTextEntry(20, 30, 200, 20, COLOR_GREEN, "new");
  var apply  := GFButtonID(10, 420 - 30, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var gdata;
  var holder := {};
  var split;
  GFTextEntry( xTxt, yTxt, 200, 30, COLOR_GREEN, "blank");
  var retkey := GFSendGump(who);
  if(!retkey[apply.keyid])
    SendSysMessage(who, "Cancelled");
    return 0;
  else
    if(retkey[new.keyid] == "new")
      SendSysMessage(who, "Cancelled.");
      return 0;
    endif
    if(SplitWords(retkey[new.keyid])[2] in dfile.Keys())
      SendSysMessage(who, "That Group already exists.");
      return 0;
    endif
    var entry := dfile.CreateElement(SplitWords(retkey[new.keyid])[2]);
    if(!entry)
      SendSysMessage(who, "Cancelled");
      return 0;
    endif
    SendSysMessage(who, "Editing");
    var rkeys := retkey.keys;
    var temp;
    foreach thing in rkeys
      if(thing)
        temp := SplitWords(retkey[thing]);
        if((temp[2] != "blank") && (temp[2] != error) && (temp[2] != SplitWords(retkey[new.keyid])[2]))
          holder.append(temp[2]);
        endif
      endif
    endforeach
    entry.SetProp("npc", holder);
    return 1;
  endif
endfunction

function AddNewRegion(who);
  var dfile := OpenDataFile("SpawnRegions");
  var rect := "X1 Y1 X2 Y2";
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Region Editor");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Region Editor");
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "Group Name");
  GFTextLine(340, 60, COLOR_BLUE_LIGHT, "Spawns");
  GFTextLine(420, 60, COLOR_BLUE_LIGHT, "Freq");
  var new := GFTextEntry(20, 30, 200, 20, COLOR_GREEN, "new");
  var apply  := GFButtonID(10, 420 - 30, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var gdata;
  var holder := {};
  var split;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, "");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, "");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, "");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, "");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, "");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, "");
  var rectret := GFTextEntry(400, 30, 200, 20, COLOR_GREEN, rect);
  var retkey := GFSendGump(who);
  if(!retkey[apply.keyid])
    SendSysMessage(who, "Cancelled");
    return 0;
  else
    if(retkey[new.keyid] == "new")
      SendSysMessage(who, "Cancelled.");
      return 0;
    endif
    if(retkey[new.keyid] in dfile.Keys())
      SendSysMessage(who, "That Region already exists.");
      return 0;
    endif
    var entry := dfile.CreateElement(SplitWords(retkey[new.keyid])[2]);
    if(!entry)
      SendSysMessage(who, "Cancelled");
      return 0;
    endif
    SendSysMessage(who, "Editing");
    var temp;
    foreach thing in (retkey.keys)
      if((thing) && (thing != rectret.keyid) && (thing != new.keyid))
        temp := SplitWords(retkey[thing]);
        holder.append(temp[2]);
      endif
    endforeach
    var num := 1;
    var turn := 1;
    temp := "";
    foreach thing in (entry.PropNames())
      entry.EraseProp(thing);
    endforeach
    split := SplitWords(retkey[rectret.keyid]);
    entry.SetProp("rect", split[2]+" "+split[3]+" "+split[4]+" "+split[5]);
    foreach thing in holder
      if((num == 1) || (num == 2))
        if((thing != "0") && (thing) && (thing != "blank"))
          temp := temp+thing+" ";
        endif
        num := num + 1;
      elseif(num == 3)
        if((thing != "0") && (thing) && (thing != "blank"))
          temp := temp+thing+" ";
        endif
        if(temp != "")
          entry.setprop("group"+turn, temp);
        endif
        temp := "";
        turn := turn + 1;
        num := 1;
      endif
    endforeach
    split := SplitWords(retkey[rectret.keyid]);
    entry.SetProp("rect", split[2]+" "+split[3]+" "+split[4]+" "+split[5]);
    return 1;
  endif
endfunction

function ComposeGroupsPage(page, byref reglist, byref buttons, maxpages)
  var bX := 5;
  var y := 60;
  var tx := 25;
  var yshift := 20;
  var numtemp := TPERPAGE * page;
  var starttemp := TPERPAGE * (page - 1) + 1;
  GFPage(page);
  if (page == 1 && page != maxpages) // 1st page
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  elseif (page == maxpages && page != 1) // last page
    GFButtonPage(MAX_X - 40, 40, G_STONE_UP, G_STONE_UP, page - 1);
  elseif (page > 1 && page < maxpages) // mid pages
    GFButtonPage(MAX_X - 40, 40, G_STONE_UP, G_STONE_UP, page - 1);
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  endif
  var bt;
  var tn;
  var reg;
  var txtcol;
  for (tn := starttemp; tn <= numtemp; tn := tn + 1)
    reg := reglist[tn];
    if (!reg)
      return;
    endif
    bt := GFButtonID(bX, y, G_STONE_RIGHT, G_STONE_RIGHT, 1);
    buttons.append(bt.keyid);
    GFTextCrop(tx, y - 3, 320, 20, COLOR_GREEN, reg);
    y := y + yshift;
  endfor
endfunction

function ComposeRegionsPage(page, byref reglist, byref buttons, byref btgo, maxpages)
  var bX := 5;
  var y := 60;
  var tx := 25;
  var yshift := 20;
  var numtemp := TPERPAGE * page;
  var starttemp := TPERPAGE * (page - 1) + 1;
  GFPage(page);
  if (page == 1 && page != maxpages) // 1st page
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  elseif (page == maxpages && page != 1) // last page
    GFButtonPage(MAX_X - 40, 40, G_STONE_UP, G_STONE_UP, page - 1);
  elseif (page > 1 && page < maxpages) // mid pages
    GFButtonPage(MAX_X - 40, 40, G_STONE_UP, G_STONE_UP, page - 1);
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  endif
  var bt;
  var tn;
  var reg;
  var txtcol;
  for (tn := starttemp; tn <= numtemp; tn := tn + 1)
    reg := reglist[tn];
    if (!reg)
      return;
    endif
    bt := GFButtonID(bX, y, G_STONE_RIGHT, G_STONE_RIGHT, 1);
    buttons.append(bt.keyid);
    GFTextCrop(tx, y - 3, 320, 20, COLOR_GREEN, reg);
    bt := GFButtonID(bX + 190, y, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 1);
    btgo.append(bt.keyid);
    y := y + yshift;
  endfor
endfunction

function GoToRegion(who, region)
  var rcfg := GlobalSpawnRegions();
  var rdata := SplitWords(rcfg.FindElement(region).GetProp("rect"));
  var rect := struct;
  rect.+x1 := CInt(rdata[1]);
  rect.+y1 := CInt(rdata[2]);
  rect.+x2 := CInt(rdata[3]);
  rect.+y2 := CInt(rdata[4]);
  var x := ((rect.x2 - rect.x1) / 2) + rect.x1;
  var y := ((rect.y2 - rect.y1) / 2) + rect.y1;
  var z := 0;
  var tries := 0;
  var sh;
  var info;
  var success := 0;
  if (!MoveCharacterToLocation(who, x, y, z, 0))
    SendMsg(who, "Cannot move to centre, trying random location in region: " + region + "...");
    repeat
      x := RandomInt(rect.x2 - rect.x1) + rect.x1;
      y := RandomInt(rect.y2 - rect.y1) + rect.y1;
      z := GetMapInfo(x, y).z;
      tries := tries + 1;
      sh := GetStandingHeight(x, y, z);
      info := Hex(GetMapInfo(x, y).landtile);
      if ((info < 0x406) || (info > 0x455))
        if (MoveCharacterToLocation(who, x, y, z, 0))
          success :=  1;
        endif
      endif
    until (tries > 10);
  else
    success := 1;
  endif
  if(!success)
    SendMsg(who, "Cannot move to region: " + region + ", try again.");
  else
    SendMsg(who, "Success.");
  endif
endfunction

function ComposeRegionEditor(who, region, byref reggroups)
  var dfile := OpenDataFile("SpawnRegions");
  var entry := dfile.FindElement(region);
  var rect  := entry.GetProp("rect");
  if(!rect)
    rect := "X1 Y1 X2 Y2";
  endif
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Region Editor");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Region Editor");
  GFTextLine(20, 30, COLOR_GREEN, region);
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(8, 60, COLOR_BLUE_LIGHT, "S");
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "Group Name");
  GFTextLine(340, 60, COLOR_BLUE_LIGHT, "Spawns");
  GFTextLine(420, 60, COLOR_BLUE_LIGHT, "Freq");
  var apply  := GFButtonID(10, 420 - 30, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var gdata;
  var holder := {};
  var split := SplitWords(rect);
  var rectret := GFTextEntry(400, 30, 200, 20, COLOR_GREEN, rect);
  foreach grp in reggroups
    gdata := SplitWords(grp);
    GFTextEntry(xTxt, yTxt, 200, 30, COLOR_GREEN, gdata[1]);
    GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, gdata[2]);
    if (!gdata[3])
      gdata[3] := DEFAULT_GRP_FREQUENCY;
    endif
    GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, gdata[3]);
    if(!gdata[4])
      gdata[4] := "0";
    endif
    if(!gdata[5])
      gdata[5] := "0";
    endif
    yTxt := ytxt + yshift;
  endforeach
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, " ");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, " ");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, " ");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, " ");
  yTxt := ytxt + yshift;
  GFTextEntry(    xTxt, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+324, yTxt, 200, 30, COLOR_GREEN, " ");
  GFTextEntry(xTxt+402, yTxt, 200, 30, COLOR_GREEN, " ");
  var retkey := GFSendGump(who);
  if(!retkey[apply.keyid])
    SendSysMessage(who, "Cancelled");
    return 0;
  else
    SendSysMessage(who, "Editing");
    var temp;
    foreach thing in (retkey.keys)
      if((thing) && (thing != rectret.keyid))
        temp := SplitWords(retkey[thing]);
        holder.append(temp[2]);
      endif
    endforeach
    var num := 1;
    var turn := 1;
    temp := "";
    foreach thing in (entry.PropNames())
      entry.EraseProp(thing);
    endforeach
    split := SplitWords(retkey[rectret.keyid]);
    entry.SetProp("rect", split[2]+" "+split[3]+" "+split[4]+" "+split[5]);
    foreach thing in holder
      if((num == 1) || (num == 2))
        if((thing != "0") && (thing) && (thing != "blank"))
          temp := temp+thing+" ";
        endif
        num := num + 1;
      elseif(num == 3)
        if((thing != "0") && (thing) && (thing != "blank"))
          temp := temp+thing+" ";
        endif
        if(temp != "")
          entry.setprop("group"+turn, temp);
        endif
        temp := "";
        turn := turn + 1;
        num := 1;
      endif
    endforeach
    return 1;
  endif
endfunction

function ComposeRegionGump(who, region, byref reggroups)
  var dfile := OpenDataFile("SpawnRegions");
  var entry := dfile.FindElement(region);
  var rect  := entry.GetProp("rect");
  if(!rect)
    rect := "error";
  endif
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Region Manager");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Region Manager");
  GFTextLine(20, 30, COLOR_GREEN, region);
  GFTextLine(460, 30, COLOR_GREEN, rect);
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(8, 60, COLOR_BLUE_LIGHT, "S");
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "Group Name");
  GFTextLine(240, 60, COLOR_BLUE_LIGHT, "Spawns");
  GFTextLine(320, 60, COLOR_BLUE_LIGHT, "Freq");
  GFTextLine(400, 60, COLOR_BLUE_LIGHT, "Spawn");
  GFTextLine(460, 60, COLOR_BLUE_LIGHT, "Despawn");
  GFTextLine(530, 60, COLOR_BLUE_LIGHT, "Respawn");
  GFTextLine(595, 60, COLOR_BLUE_LIGHT, "Detail");
  var edit  := GFButtonID(10, 5, 2640, 2641, 1);
  GFTextLine(50, 10, COLOR_RED, "Edit This Group?");
  var erase  := GFButtonID(450, 5, 2640, 2641, 1);
  GFTextLine(490, 10, COLOR_RED, "Delete This Group?");
  var apply  := GFButtonID(10, 420 - 30, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  var prev := GFButtonID(70, 420 - 30, G_RED_OVAL_PREV_0, G_RED_OVAL_PREV_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  GFTextLine(200, 420 - 30, COLOR_RED, "Red = Disabled");
  GFTextLine(320, 420 - 30, COLOR_BLUE_LIGHT, "NOTE: Spawn/Respawn forces spawn.");
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var idx := 1;
  var gdata, spawns, spawntxt, rdata, ctxt, status, freq, bt, edt := 0;
  var btstatus := array;
  var btspawn := array;
  var btdespawn := array;
  var btrespawn := array;
  var btdetail := array;
  var holder := {};
  foreach grp in reggroups
    gdata := SplitWords(grp);
    ctxt := COLOR_GREEN;
    status := 1;
    freq := GetGroupFreq(region, gdata[1]);
    if (freq == -1)
      ctxt := COLOR_RED_LIGHT;
      status := 0;
    endif
    bt := GFCheckBox(6, yTxt, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, status);
    btstatus.append(bt.keyid);
    GFTextLine(xTxt, yTxt, ctxt, gdata[1]);
    spawns := GetGroupSpawns(region, gdata[1]);
    foreach thing in spawns
      if(!SystemFindObjectBySerial(thing))
        RemoveSerialFromGroup(region, gdata[1], thing);
      endif
    endforeach
    spawns := GetGroupSpawns(region, gdata[1]);
    rdata := gdata;
    spawntxt := spawns.size() + "/" + rdata[2];
    GFTextLine(xTxt+224, yTxt, ctxt, spawntxt);
    if (!rdata[3])
      rdata[3] := DEFAULT_GRP_FREQUENCY;
    endif
    GFTextLine(xTxt+302, yTxt, ctxt, rdata[3]);
    bt := GFCheckBox(xTxt+380, yTxt, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 0);
    btspawn.append(bt.keyid);
    bt := GFCheckBox(xTxt+455, yTxt, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 0);
    btdespawn.append(bt.keyid);
    bt := GFCheckBox(xTxt+525, yTxt, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 0);
    btrespawn.append(bt.keyid);
    bt := GFButtonID(xTxt+575, yTxt, G_STONE_RIGHT, G_STONE_RIGHT, 1);
    btdetail.append(bt.keyid);
    idx := idx + 1;
    ytxt := ytxt + yshift;
  endforeach
  var retkey := GFSendGump(who);
  var num, rgelem;
  for(num := 1; num <= btdetail.size(); num := num + 1)
    if(retkey[btdetail[num]])
      edt := ComposeGroupDetailGump(who, region, SplitWords(reggroups[num])[1]);
      while(edt == 1)
        SendSysMessage(who, "Composing Group Details");
        edt := ComposeGroupDetailGump(who, region, SplitWords(reggroups[num])[1]);
      endwhile
      return 0;
    endif
  endfor
  if(retkey[cancel.keyid])
    exit;
  endif
  if(retkey[prev.keyid])
    regiondone := 1;
    return 0;
  endif
  if(retkey[edit.keyid])
    edt := ComposeRegionEditor(who, region, reggroups);
    while(edt == 1)
      rgelem := entry.PropNames();
      reggroups := {};
      foreach thing in rgelem
        if(thing != "rect")
          reggroups.append(entry.getprop(thing));
        endif
      endforeach
      edt := ComposeRegionEditor(who, region, reggroups);
    endwhile
    return 0;
  endif
  if(retkey[erase.keyid])
    if(YesNo(who, "Are You Sure?"))
      dfile.DeleteElement(region);
      SendSysMessage(who, "Region Deleted.");
      regiondone := 1;
      return 0;
    else
      regiondone := 0;
      return 0;
    endif
  endif
  for(num := 1; num <= btstatus.size(); num := num + 1)
    gdata := SplitWords(reggroups[num]);
    if (retkey[btstatus[num]])
      EnableGroup(region, gdata[1]);
    else
      DisableGroup(region, gdata[1]);
      DespawnGroup(region, gdata[1]);
      continue;
    endif
    if (retkey[btrespawn[num]])
      SendMsg(who, "Respawning: " + region + " - " + gdata[1]);
      DisableGroup(region, gdata[1]); // This resets the freq counter.
      EnableGroup(region, gdata[1]);
      DespawnGroup(region, gdata[1]);
      sleep(2);
      SpawnGroup(region, gdata[1], CInt(gdata[2]), CInt(gdata[3]), CInt(gdata[4]), CInt(gdata[5]));
      SendMsg(who, "done.");
      continue;
    endif
    if (retkey[btspawn[num]])
      SendMsg(who, "Spawning: " + region + " - " + gdata[1]);
      DisableGroup(region, gdata[1]); // This resets the freq counter.
      EnableGroup(region, gdata[1]);
      SpawnGroup(region, gdata[1], CInt(gdata[2]), CInt(gdata[3]), CInt(gdata[4]), CInt(gdata[5]));
      SendMsg(who, "done.");
    endif
    if (retkey[btdespawn[num]])
      SendMsg(who, "Despawning: " + region + " - " + gdata[1]);
      DespawnGroup(region, gdata[1]);
      SendMsg(who, "done.");
    endif
  endfor
endfunction

function ComposeGroupGump(who, region, byref reggroups)
  var dfile := OpenDataFile("SpawnGroups");
  var entry := dfile.FindElement(region);
  regiondone := 0;
  GFInitGump(0, 0);
  GFNoDispose();
  GFPage(0);
  GFResizePic(0, 0, BKGND_STONESLAB, 640, 420);
  GFTextLine(232, 7, 0, "Spawn Group Manager");
  GFTextLine(230, 5, COLOR_YELLOW, "Spawn Group Manager");
  GFTextLine(20, 30, COLOR_GREEN, region);
  GFTextLine(200, 30, COLOR_BLUE_LIGHT, "Time:");
  GFTextLine(245, 30, COLOR_GREEN, GetTimeOfDay());
  GFTextLine(30, 60, COLOR_BLUE_LIGHT, "Group Name");
  var edit  := GFButtonID(10, 5, 2640, 2641, 1);
  GFTextLine(50, 10, COLOR_RED, "Edit This Group?");
  var erase  := GFButtonID(450, 5, 2640, 2641, 1);
  GFTextLine(490, 10, COLOR_RED, "Delete This Group?");
  var prev := GFButtonID(70, 420 - 30, G_RED_OVAL_PREV_0, G_RED_OVAL_PREV_1, 1);
  var cancel := GFButtonID(135, 420 - 30, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var yTxt := 80;
  var xTxt := 30;
  var yshift := 20;
  var idx := 1;
  var gdata, spawns, spawntxt, rdata, ctxt, status, freq, bt, edt := 0;
  var btstatus := array;
  var btspawn := array;
  var btdespawn := array;
  var btrespawn := array;
  var holder := {};
  foreach grp in reggroups
    ctxt := COLOR_GREEN;
    GFTextLine(xTxt, yTxt, ctxt, grp);
    ytxt := ytxt + yshift;
  endforeach
  var retkey := GFSendGump(who);
  var num, rgelem;
  if(retkey[cancel.keyid])
    exit;
  endif
  if(retkey[prev.keyid])
    regiondone := 1;
    return 0;
  endif
  if(retkey[edit.keyid])
    edt := ComposeGroupEditor(who, region, reggroups);
    while(edt == 1)
      reggroups := entry.GetProp("npc");
      edt := ComposeGroupEditor(who, region, reggroups);
    endwhile
    return 0;
  endif
  if(retkey[erase.keyid])
    if(YesNo(who, "Are You Sure?"))
      dfile.DeleteElement(region);
      SendSysMessage(who, "Region Deleted.");
      regiondone := 1;
      return 0;
    else
      regiondone := 0;
      return 0;
    endif
  endif
endfunction

function ComposeGroupDetailGump(who, region, group)
  GFInitGump(0, 0);
  GFPage(0);
  GFNoDispose();
  GFNoClose();
  GFResizePic(0, 0, BKGND_STONESLAB, MAX_X, MAX_Y + 20);
  GFTextLine(32, 7, 0, "Spawn Region Manager");
  GFTextLine(30, 5, COLOR_YELLOW, "Spawn Region Manager");
  GFTextLine(10, 30, COLOR_GREEN, region + " - " + group);
  GFTextLine(5, 50, COLOR_BLUE_LIGHT, "Kill");
  GFTextLine(45, 50, COLOR_BLUE_LIGHT, "Template");
  GFTextLine(155, 50, COLOR_BLUE_LIGHT, "Go To");
  var kill := GFButtonID(10, MAX_Y - 35 + 20, G_GREEN_OVAL_OK_0, G_GREEN_OVAL_OK_1, 1);
  var cancel := GFButtonID(60, MAX_Y - 35 + 20, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  var spawns := GetGroupSpawns(region, group);
  var numtemp := spawns.size();
  var numpages := 1;
  while (numtemp > 0)
    numtemp := numtemp - TPERPAGE;
    if (numtemp > 0)
      numpages := numpages + 1;
    endif
  endwhile
  var bt := array;
  var btgo := array;
  var pg;
  for (pg := 1; pg <= numpages; pg := pg + 1)
    ComposeSpawnsPage(pg, spawns, bt, btgo, numpages, region, group);
  endfor
  var retkey := GFSendGump(who);
  var num;
  for (num := 1; num <= spawns.size(); num := num + 1)
    if(retkey[btgo[num]])
      var npc := SystemFindObjectBySerial(spawns[num]);
      if (!npc)
        RemoveSerialFromGroup(region, group, spawns[num]);
        SendMsg(who, "Unable to locate spawn: " + spawns[num]);
        return 1;
      endif
      MoveCharacterToLocation(who, npc.x, npc.y, npc.z, MOVECHAR_FORCELOCATION);
      return 1;
    endif
  endfor
  if(retkey[cancel.keyid])
    return 0;
  endif
  for (num := 1; num <= spawns.size(); num := num + 1)
    if(retkey[bt[num]])
      Despawn(spawns[num]);
    endif
  endfor
  return 1;
endfunction

function ComposeSpawnsPage(page, spawnlist, byref buttons, byref btgo, maxpages, region, group)
  var bX := 5;
  var y := 80;
  var tx := 45;
  var yshift := 20;
  var numtemp := TPERPAGE * page;
  var starttemp := TPERPAGE * (page - 1) + 1;
  GFPage(page);
  if (page == 1 && page != maxpages) // 1st page
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  elseif (page == maxpages && page != 1) // last page
    GFButtonPage(MAX_X - 40, 80, G_STONE_UP, G_STONE_UP, page - 1);
  elseif (page > 1 && page < maxpages) // mid pages
    GFButtonPage(MAX_X - 40, 80, G_STONE_UP, G_STONE_UP, page - 1);
    GFButtonPage(MAX_X - 40, MAX_Y - 40, G_STONE_DOWN, G_STONE_DOWN, page + 1);
  endif
  var bt;
  var tn;
  var serial;
  var txtcol;
  var obj;
  for (tn := starttemp; tn <= numtemp; tn := tn + 1)
    serial := spawnlist[tn];
    if (!serial)
      return;
    endif
    obj := SystemFindObjectBySerial(serial);
    if(!obj)
      RemoveSerialFromGroup(region, group, serial);
    else
      bt := GFCheckBox(bX, y, G_STONE_SQUARE, G_STONE_SQUARE_CHECK, 0);
      buttons.append(bt.keyid);
      GFTextCrop(tx, y - 3, 320, 20, COLOR_GREEN, TemplateName(obj.npctemplate)+"     "+serial);
      bt := GFButtonID(tx + 130, y - 3, G_STONE_LEFT, G_STONE_LEFT, 1);
      btgo.append(bt.keyid);
      y := y + yshift;
    endif
  endfor
endfunction

function SendMsg(byref who, msg)
  SendSysMessage(who, msg, FONT_NORMAL, COLOR_BLUE_LIGHT);
endfunction