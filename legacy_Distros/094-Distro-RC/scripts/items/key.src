use uo;
use os;
use boat;
include "include/objtype";
include "include/yesNo";
include "include/myUtil";
include "util/key";
include "include/canAccess";

const KEYSTART := 0x100e;
const KEYEND := 0x1013;
const KEYRING := 0x1011;

program use_key(who, key)
  EraseObjProperty(who, "IsMeditating");
  EraseObjProperty(who, "HealTimer");
  if(!can_access(who, key))
    return;
  endif
  if(key.movable == 0)
    SendSysMessage(who, "You cannot use that while its locked down.");
    return;
  endif
  var thetarget := Target(who);
  if(!Accessible(who, thetarget))
    if(thetarget.objtype != 0xf010)
      PrintTextAbovePrivate(who, "You can't reach that", who);
      return;
    endif
  endif
  if(GetObjProperty(thetarget, "Owner"))
    if(GetObjProperty(thetarget, "Owner") != who.serial)
      SendSysMessage(who, "You cannot use that.");
      return;
    endif
  endif
  if(GetObjProperty(thetarget, "Vendored"))
    SendSysMessage(who, "You cannot use that.");
    return;
  endif
  if (key.objtype == KEYRING)
    Use_KeyRing(who,key,thetarget);
	return;
  elseif (thetarget.serial == key.serial)
	RenameKey( who, key );
	return;
  endif
  if(thetarget.objtype == 0xf010)
    drydock(who, thetarget, key);
    return;
  endif
  if(GetObjProperty(thetarget, "Public"))
    SendSysMessage(who, "You cannot lock that while the house is public.");
    return;
  endif
  var lockid := GetObjProperty( key, "lockid" );
  var targetlockid := GetObjProperty( thetarget, "lockid" );
  if (! targetlockid)
	PrintTextAbovePrivate( thetarget, "That doesn't have a lock.", who );
	return;
  endif
  if (! lockid)
	CopyKey( who, key, thetarget );
	return;
  endif
  if (lockid != targetlockid )
 	PrintTextAbovePrivate( thetarget, "That's the wrong key!", who );
	return;
  else
	if ( (thetarget.objtype >= KEYSTART) && (thetarget.objtype <= KEYEND) )
	  PrintTextAbovePrivate( who, "These keys match", who );
	  return;
	else
	  UnLockIt(thetarget,who);
	  return;
	endif
  endif
endprogram

function UnLockIt(door,who)
  if(door.graphic in { GID_PLANK_EXTENDED_FACING_EAST, GID_PLANK_EXTENDED_FACING_WEST, GID_PLANK_EXTENDED_FACING_NORTH, GID_PLANK_EXTENDED_FACING_SOUTH } )
    PrintTextAbovePrivate( door, "You can't lock the plank while it's extended.", who );
    return;
  elseif(door.locked = 0)
    if(GetObjProperty(door, "Public"))
      SendSysMessage(who, "You cannot lock that while the house is public.");
      return;
    else
      door.locked := 1;
      PrintTextAbovePrivate(door, "You unlock it.", who);
      return;
    endif
  else
    door.locked := 0;
    PrintTextAbovePrivate(door, "You lock it.", who);
    return;
  endif
endfunction

function Use_KeyRing(who, key, thetarget)
  var lockid := GetObjProperty( key, "lockid" );
  var targetlockid := GetObjProperty( thetarget, "lockid" );
  var insidering := FindMyPack(key.serial);
  if (key.serial == thetarget.serial)
	PrintTextAbovePrivate( who, "You remove the keys from the ring.", who );
	foreach otherkey in EnumerateItemsInContainer(insidering)
	  MoveItemToContainer(otherkey, who.backpack);
	endforeach
	key.graphic := 4113;
	return;
  endif
  if (! targetlockid)
	PrintTextAbovePrivate( thetarget, "That doesn't have a lock.", who );
	return;
  endif
  if ( (thetarget.objtype >= KEYSTART) && (thetarget.objtype <= KEYEND) && (thetarget.objtype != KEYRING ))
	PrintTextAbovePrivate( who, "You put the key on the keyring.", who );
	MoveItemToContainer(thetarget, insidering);
	if (! key.graphic)
	  key.graphic := 4113;
	endif
	if (key.graphic == 4113)
	  key.graphic := 5993;
	elseif (key.graphic < 5995)
      key.graphic := key.graphic + 1;
	endif
	return;
  else
	foreach otherkey in EnumerateItemsInContainer(insidering)
	  lockid := GetObjProperty( otherkey, "lockid" );
	  if (lockid == targetlockid)
		UnLockIt(thetarget,who);
		return;
	  endif
	endforeach
  endif
  PrintTextAbovePrivate( key, "None of your keys fit that lock.", who );
  return;
endfunction

function RenameKey( who, key )
  var keydescription := RequestInput( who, key, "Please enter a description for this key. (max 20 whos)" );
     var descriptionlen := len( keydescription );
  if ( keydescription )
	if ( descriptionlen <= 20 )
	  key.name := "a key: "+ keydescription;
	  SendSysMessage( who, "Key is renamed." );
	else
	  SendSysMessage( who, "That name is too long" );
	endif
  endif
endfunction

function CopyKey( who, key, thetarget)
  var lockid := GetObjProperty( key, "lockid" );
  var targetlockid := GetObjProperty( thetarget, "lockid" );
  if ( (thetarget.objtype >= KEYSTART) && (thetarget.objtype <= KEYEND) )
	SetObjProperty( key, "lockid", targetlockid );
	PrintTextAbovePrivate( key, "You make a copy of the key", who );
  else
	PrintTextAbovePrivate( key, "This key is blank", who );
  endif
endfunction

function OpenTamedStorageAreas()
  var bank := FindStorageArea( "Tamed Storage" );
  if (!bank)
    bank := CreateStorageArea( "Tamed Storage" );
  endif
  return bank;
endfunction

function FindMyPack(myserial)
  var mybank := OpenTamedStorageAreas();
  var bank_obj_name := "Bankbox  " + Hex(myserial);
  var bankbox := FindRootItemInStorageArea( mybank, bank_obj_name );
  if (!bankbox)
    bankbox := CreateRootItemInStorageArea(mybank, bank_obj_name, UOBJ_BANKBOX  );
  endif
  return bankbox;
endfunction

function drydock(who, targ, key)
  var kid := GetObjProperty(key,"lockid");
  if ( GetObjProperty(targ,"lockid") == kid )
	if (!YesNo(who,"Drydock?"))
      return;
    endif
    var boat := SystemFindObjectBySerial(CInt(GetObjProperty(targ,"shipserial")));
	var shiptype := GetObjProperty(boat.hold,"shiptype");
	var newboat := CreateItemInContainer(who.backpack,shiptype,1);
	if (!newboat)
	  SendSysMessage(who,"Your backpack is full!");
      return;
	endif
	newboat.graphic := 0x14f3;
	if (!boat.tillerman.name)
	  newboat.name := "a toy boat";
	endif
	var items := (boat.items);
	var oldmovable;
	foreach item in items;
	  oldmovable := item.movable;
      item.movable := 1;
      MoveItemToLocation(item, who.x, who.y, who.z, MOVEITEM_FORCELOCATION);
      item.movable := oldmovable;
    endforeach
    items := ListRootItemsInContainer(boat.hold);
    foreach item in items;
      MoveItemToLocation(item, who.x, who.y, who.z, MOVEITEM_FORCELOCATION);
    endforeach
    var key := FindKey(who, boat.portplank);
    if (boat.tillerman.name)
      newboat.name := boat.tillerman.name;
    endif
    if (!DestroyBoat(who, boat))
	  DestroyItem(newboat);
	else
	  if (key)
        DestroyItem(key);
      endif
	endif
  else
   SendSysMessage(who,"the key does not belong to this boat");
  endif
endfunction

function DestroyBoat( who, boat )
  var res := DestroyMulti( boat );
  if (!res)
	SendSysMessage( who, "Can't delete: " + res.errortext );
	return 0;
  endif
  return 1;
endfunction