use uo;
use cfgfile;
use os;

/*
Here's how it works: type .writenpc. You'll be prompted to target an NPC. That npc's graphic, color, and all stats and skills will be written to npcdesc. You'll then be propmted for any CProps for the critter (for those new to us, CProps are "custom properties" for an NPC, and are visible with the .prop command. TYpical cprops are "Decay 1", which causes all of its weapons and armor to decay on death. "Rise" is another good on -- it rises whatever template you want when the critter is killed.). When you enter cprops, it's important that you enter the CProp like it is in npcdesc.cfg, without the "CProp" part. In other words, if you want it to show up in npcdesc.cfg like
cprop rise sLiche
you must enter "rise sLiche" at the prompt. For cprops you have to enter the variable type code (s for string, i for integer) before the value (hence the "sLiche" entry : s means it's a string, Liche is the value).

important entries (for some critters)
MerchantType (string) : the type of merchant he is, duh!
Rise (string) : on death the creature will rise whatever npc template is specified here
Decay (integer): on death, all weapons and armor of the critter will decay
Equipt (string) : the equipment that a MERCHANT will be equipped from
Guardkill(integer) : when killed, the body will decay and leave no loot

Finally, you're prompted for other, non-custom properties.Any entries other than skills and stats are filled in here. You don't need to enter the type declaration code here, just the value. Important entries:

AttackSkillId: the skill he uses to attack. Use swordsmanship, macefighting, archery, fencing, or wrestling. Most non-human critters use wrestling.
AttackSpeed : uhh, the attack damage
AttackDamage: the damage the critter does. If the critter is using a weapon, that damage is used instead
Equip : the template from which the critter should be equipped
AttackHitSound  : self-explainatory. Use the sounds from inside UO, including the "0x" part
AttackMissSound  : self-explainatory. Use the sounds from inside UO, including the "0x" part
tameskill: the skill needed to tame this creature
provokeskill: the skill needed to provoke this critter
lootgroup : the entry from nlootgroup that this critter has

*/

program write_npctemplate(who)

local ncfg := readconfigfile("::npcdesc");
Sendsysmessage(who, "Select an NPC");

local what := target(who, TGTOPT_NOCHECK_LOS);
if (!what)

        return;
endif
local parms := {};
local parm := {};
local scfg := readconfigfile("::skills");
parm.+pname;
parm.+pval;

parm.pname := "ObjType";
parm.pval := cstr(what.objtype);

parms[1] := parm;

parm.pname := "color";
parm.pval := cstr(what.color);
parms[2] := parm;

parm.pname := "script";
parm.pval := what.script;
parms[3] := parm;

parm.pname := "Strength";
parm.pval := cstr(what.strength);
parms[4] := parm;

parm.pname := "Dexterity";
parm.pval := cstr(what.dexterity);
parms[5] := parm;

parm.pname := "Intelligence";
parm.pval := cstr(what.intelligence);
parms[6] := parm;

parm.pname := "hp";
parm.pval := cstr(what.hp);
parms[7] := parm;

parm.pname := "mana";
parm.pval := cstr(what.mana);
parms[8] := parm;

parm.pname := "stam";
parm.pval := cstr(what.stamina);
parms[9] := parm;

parm.pname := "TrueColor";
parm.pval := cstr(what.color);
parms[10] := parm;


parm.pname := "Name";
parm.pval := what.name;
parms[11] := parm;

local i;
parm.pname := "AttackSkillID";
parm.pval := cstr(ncfg[what.npctemplate].attackskillid);
parms[12] := parm;

parm.pname := "AttackHitSound";
parm.pval := cstr(ncfg[what.npctemplate].attackhitsound);
parms[13] := parm;

parm.pname := "AttackMissSound";
parm.pval := cstr(ncfg[what.npctemplate].attackmisssound);
parms[14] := parm;

parm.pname := "Gender";
parm.pval := "0";
parms[15] := parm;


local curparm := 16;
local skl;

for (i:= 0; i <= 48; i := i  + 1)
        skl := getskill(what, i);
        
        if (skl)
                sendsysmessage(who, "Skill " + i + " = " + skl);
                parm.pname :=   scfg[i].name;
                parm.pval := cstr(skl);
                parms[curparm] := parm;
                curparm := curparm + 1;
        endif
endfor

local ok;

ok := sendtextentrygump(who, "You must now enter CProps (custom properties) for the creature, with their value");
local cprop;
cprop  := Sendtextentrygump(who, "Enter cprops, or cancel to stop");

while((cprop) and (cprop != ""))
        parm.pname := "CProp";
        parm.pval := cprop;
        parms[curparm] := parm;
        curparm := curparm + 1;
        sleep(1);
        cprop := Sendtextentrygump(who, "Enter cprops, or cancel to stop");
endwhile

ok := "";

ok := sendtextentrygump(who, "You must now enter other properties for the creature, with their value");


cprop := Sendtextentrygump(who, "Enter property, or cancel to stop");

while((cprop) and (cprop != ""))
        parm.pname := "";
        parm.pval := cprop;
        parms[curparm] := parm;
        curparm := curparm + 1;
        sleep(1);
        cprop := Sendtextentrygump(who, "Enter propery, or cancel to stop");
endwhile



ok := sendtextentrygump(who, "NPC Complete! Enter OK to save");

if (lower(ok) != "ok")
        sendsysmessage(who, "NPC Cancelled");
        return;
endif



local tname := SendTextentrygump(who, "Enter the name for this npc template");
if (!tname)
        return;
endif


if (ncfg[tname])
        sendsysmessage(who, "That template already exists! ");
        return;
        local tname := SendTextentrygump(who, "Enter the name for this npc template");
        sleep(1);
        if (!tname)
                return;
        endif
endif
what.script := parms[3].pval;
AppendConfigFileElem( "npcdesc", "npctemplate", tname, parms );
sendsysmessage(who, "Creation complete!");
unloadconfigfile("::npcdesc");


endprogram