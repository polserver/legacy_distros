/////////////////////////////////////////////////////
// runebook.src -- Dynamically created rune storage
//                 and activation tome
//
// Usage: Double-click book (0x6100) and click add button
//        to transfer rune items to the book.
//        Click on recall or gate icon to activate.
//
// Author: Racalac
// Revisions: 1.0, 11/13/99: Initial revision;
//                           scribe runes, gate or recall
//                           Maximum 32 runes capacity
//
// Notes: (rev1.0) - No bugs known, waiting on input
//
// Dependencies: (rev1.0) - math.inc (Mod function)
//                          customspells.inc (this package)
//
// Contemplating: Rune Removal (interface needed)
//                Rune Renaming
//                Rune Re-marking
//                Rename book
//                Scribing needed to add runes?
//                Making sure recall and gate from here 
//                  is no better/worse than the normal 
//                  spells
//                Just how cool i really am
//
// Modified: 08/06/00: added ability to drop runes.
//                     added a brand new user interface.
//                     added a "quick" view" index page.
//                     added charges. casting recall via the index
//                       page consumes a charge (making possible 
//                       casting without regs.
//                     added a recharge function (targets recall scrolls)
//                     changed runebook graphic so it is now equippable.
//                     runebook color has been modified to a brown color.
//                     overall functionality is modeled after OSI's runebooks.
//                     added "default option so casting recall or gate and 
//                       targeting the book will take you to the default rune's
//                       coordinates (requires modification to recall and gate)
//                      
// Questions or comments: mail me at bish0p@cfl.rr.com
/////////////////////////////////////////////////////

use uo;
use os;

include "customspells";
include "include/math";
include "include/client";

const OBJTYPE_RUNE := 0x1F14;
const X1 := 28;  // Layout starting point definitions
const X2 := 210; //
const Y1 := 40;  //
const Y2 := 115; //
const TILE_OFFSET_X := 42;    //
const TEXT_OFFSET_X := 25;    //
const TEXT1_OFFSET_Y := 40;   //
const TEXT2_OFFSET_Y := 20;   // More layout definitions
const BUTTON_OFFSET_X := 100; //
const GATE_OFFSET_Y := 43;    //
global maxcharges;
global charges;

global critical_runes := { 3,5,7,9,11,13,15}; //rune numbers that signal a new book page
global runecount := 0;   //this is rune number x
global pagecount := 1;   //this is page number y

global layout := {
"page 0",
"gumppic 0   0 2220",               //book gump

"page 1",
"button   55  10 2472 2473 1 0 900",
"text     85  12    0    0        ",
"button  230  10 2472 2473 1 0 800",
"text    260  12    0    6        ",
"text     85  38    0    1        ",
"text    150  38    0    3        ",
"text    230  38    0    2        ",
"text    333  38    0    4        ",
"gumppic  50  50   57             ",
"gumppic  70  50   58             ",
"gumppic  85  50   58             ",
"gumppic 100  50   58             ",
"gumppic 115  50   58             ",
"gumppic 130  50   58             ",
"gumppic 145  50   58             ",
"gumppic 160  50   59             ",
"gumppic 218  50   57             ",
"gumppic 233  50   58             ",
"gumppic 248  50   58             ",
"gumppic 263  50   58             ",
"gumppic 278  50   58             ",
"gumppic 293  50   58             ",
"gumppic 308  50   58             ",
"gumppic 323  50   59             ",
};

global data := {
"Rename Book",
"Charges:",
"Max charges:",
"",
"",
"Set Default",
"Recharge",
};

program runebook( who , book )
  charges := GetObjProperty(book, "charges");
  if((!charges) or (charges = error))
    charges := 0;
    SetObjProperty(book,"charges", charges);
  endif
  maxcharges := GetObjProperty(book, "maxcharges");
  if((!maxcharges) or (maxcharges = error))
    maxcharges := 5;
    SetObjProperty(book,"maxcharges", maxcharges);
  endif
  data[4] := charges;
  data[5] := maxcharges;
  var selected_rune_struct;
  var ret;
  FillInArrays(book);
  local result := SendDialogGump( who, layout, data );
  if( result[0] = 0 )
    return;
  elseif(result[0] = 900)
    renamebook(who, book);
    return;
  elseif(result[0] = 800)
    rechargebook(who, book);
    return;
  endif
  if(result[0] >= 600)
    if(charges < 1)
      sendsysmessage(who,"your book is out of charges.");
      return;
    endif
    local d := (result[0] - 600);
    local defs := GetObjProperty( book, "runedefs" );
    local runeinfo := defs[d];
    ret := custom_recall( who , runeinfo);
    charges := getObjProperty(book,"charges") - 1;
    SetObjProperty(book,"charges", charges);
    bookname(who, book);
    if( ret = 0 )
      SendSysmessage( who , "Recall Failed." );
    endif
    return;
  elseif(result[0] >= 500)
    local d := (result[0] - 500);

    local defs := GetObjProperty( book, "runedefs" );
    local runeinfo := defs[d];
    SetObjProperty(book,"x", runeinfo[2]);
    SetObjProperty(book,"y", runeinfo[3]);
    SetObjProperty(book,"z", runeinfo[4]);
    return;
  elseif (result[0] >= 81)
    local d := (result[0] - 80);
    local rune := createiteminbackpack(who, 0x1f14);
    local defs := GetObjProperty( book, "runedefs" );
    local runeinfo := defs[d];
    setname(rune, runeinfo[1]);
    setobjproperty(rune,"x", runeinfo[2]);
    setobjproperty(rune,"y", runeinfo[3]);
    setobjproperty(rune,"z", runeinfo[4]);
    defs.erase(d);
    setobjproperty(book,"runedefs", defs);
    return;
  endif
  var funct := NormalizeReturnValue( result[0] );
  if( result[0] != 1 )
    selected_rune_struct := FindThatRune( book , result[0]);
  endif

  case (funct)
    0: return;
    1: AddRune( who , book );
    2: if(!ConsumeReagents(who, 32 ))
         sendsysmessage(who,"you do not have enough reagents.");
	     PerformAction(who,ANIM_CAST_DIR);
         PlaySoundEffect(who,0x005d);
         PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
         return;
       endif
       ret := custom_recall( who , selected_rune_struct );
       if( ret = 0 )
       	 PlayObjectCenteredEffect( who, 0x3735, 0xA );
       	 PlaySoundEffect( who, 0x5D );
         SendSysmessage( who , "Recall Failed." );
       endif
    3: ret := custom_gate( who , selected_rune_struct );
       if( ret = 0 )
         PlayObjectCenteredEffect( who, 0x3735, 0xA );
         PlaySoundEffect( who, 0x5D );
         SendSysmessage( who , "Gate Failed." );
       endif
    default:
  endcase
endprogram

function bookname(who, book)
  local name := getObjProperty(book,"name");
  charges := getObjProperty(book,"charges");
  local newname := (name + " [charges: " + charges + "]");
  book.name := newname;
endfunction

function renamebook(who, book)
  local charges := GetObjProperty(book, "charges");
  if(!charges)
    charges := 0;
  endif
  local name := SendTextEntryGump( who, "enter the new name of the runebook. ", TE_CANCEL_ENABLE, TE_STYLE_NORMAL);
  SetObjProperty(book,"name", name);
  bookname(who, book);
endfunction

function rechargebook(who, book)
  local maxcharges := GetObjProperty(book, "maxcharges");
  if(!maxcharges)
    maxcharges := 5;
    SetObjProperty(book,"maxcharges", maxcharges);
  endif
  local charges := GetObjProperty(book, "charges");
  if(!charges)
    charges := 0;
  endif
  sendsysmessage(who,"target a recall scroll to recharge the book with.");
  local trg := target(who);
  if(!trg)
    sendsysmessage(who,"cancelled");
  endif
  if(!reserveitem(trg))
    return;
  endif
  if(trg.objtype != 0x1f4c)
    sendsysmessage(who,"you must target a recall scroll.");
    return;
  endif
  if(charges >= maxcharges)
    sendsysmessage(who,"that runebook is full");
    return;
  endif
  if(subtractamount(trg, 1))
    charges := charges + 1;
    PlayObjectCenteredEffect( who , FX_SPARK_EFFECT , 7 , 0x10 );
    PlaySoundEffect( who , 0x1f1);
    SetObjProperty(book,"charges", charges);
  endif
  local name := GetObjProperty(book,"name");
  local newname := (name + " [charges: " + charges + "]");
  book.name := newname;
endfunction

function FillInArrays(book)
  local r := 1;
  local desc;
  var i := 5;
  var datalen;
  var layoutlen;
  var line1;
  var line2;
  var page_rune_num;
  var buttonret := 2;
  local val := 10;
  var runedefs;
  if( runedefs != "error" )
    layout.append( "page " + Cstr(pagecount));
    pagecount := pagecount + 1;
    layout.append( "button 320   8 2236 2236 0 " + cstr(pagecount));
    layout.append( "button 142 200 2462 2461 1 0 1");
    runedefs := GetObjProperty( book, "runedefs" );
    foreach runed in runedefs
      var txt := runed[1];
      if( len(txt) <= 12 )
        desc := txt;
      else
        desc := txt[1,12];
      endif
      if (!desc)
        desc := "";
      endif
      datalen := data.size();
      data.append(desc);
      case(r)
         1: layout.append("text    76  60    0 " + datalen);
            layout.append("button  56  62 2118 2117 1 0 " + (r+600));
         2: layout.append("text    76  75    0 " + datalen);
            layout.append("button  56  77 2118 2117 1 0 " + (r+600));
         3: layout.append("text    76  90    0 " + datalen);
            layout.append("button  56  92 2118 2117 1 0 " + (r+600));
         4: layout.append("text    76 105    0 " + datalen);
            layout.append("button  56 107 2118 2117 1 0 " + (r+600));
         5: layout.append("text    76 120    0 " + datalen);
            layout.append("button  56 122 2118 2117 1 0 " + (r+600));
         6: layout.append("text    76 135    0 " + datalen);
            layout.append("button  56 137 2118 2117 1 0 " + (r+600));
         7: layout.append("text    76 150    0 " + datalen);
            layout.append("button  56 152 2118 2117 1 0 " + (r+600));
         8: layout.append("text    76 165    0 " + datalen);
            layout.append("button  56 167 2118 2117 1 0 " + (r+600));
         9: layout.append("text   226  60    0 " + datalen);
            layout.append("button 206  62 2118 2117 1 0 " + (r+600));
        10: layout.append("text   226  75    0 " + datalen);
            layout.append("button 206  77 2118 2117 1 0 " + (r+600));
        11: layout.append("text   226  90    0 " + datalen);
            layout.append("button 206  92 2118 2117 1 0 " + (r+600));
        12: layout.append("text   226 105    0 " + datalen);
            layout.append("button 206 107 2118 2117 1 0 " + (r+600));
        13: layout.append("text   226 120    0 " + datalen);
            layout.append("button 206 122 2118 2117 1 0 " + (r+600));
        14: layout.append("text   226 135    0 " + datalen);
            layout.append("button 206 137 2118 2117 1 0 " + (r+600));
        15: layout.append("text   226 150    0 " + datalen);
            layout.append("button 206 152 2118 2117 1 0 " + (r+600));
        16: layout.append("text   226 165    0 " + datalen);
            layout.append("button 206 167 2118 2117 1 0 " + (r+600));
      endcase 
      r := r + 1;
    endforeach
    layout.append( "page " + cstr(pagecount) );
    runedefs := GetObjProperty( book, "runedefs" );
    layout.append( "button 50 8 2235 2235 0 " + cstr(pagecount - 1) );
    r := 1;
    foreach runedef in runedefs
      var txt := runedef[1];
      runecount := runecount + 1;
      datalen := data.size();
      layoutlen := layout.size();
      local runename := txt;
      if (!runename)
        runename := "";
      endif
      local split := SplitWords( runename );
      local j;
      for( j := 1 ; j <= 10 ; j := j + 1 )
        if( !split[j] )
          split[j] := "";
        endif
      endfor
      if( len(runename) <= 16 )
        line1 := runename;
        line2 := "";
      elseif( (len(split[1]) + len(split[2]) + len(split[3]) + 2) <= 16 )
        line1 := split[1] + " " + split[2] + " " + split[3];
        line2 := split[4] + " " + split[5];
      elseif( len(split[1]) + len(split[2]) + 1 <= 12 )
        line1 := split[1] + " " + split[2];
        line2 := split[3] + " " + split[4] + " " + split[5];
      elseif( len(split[1]) <= 12 )
        line1 := split[1];
        line2 := split[2] + " " + split[3] + " " + split[4] + " " + split[5];
      endif
      data.append( line1 );
      data.append( line2 );
      data.append("Drop Rune");
      if( runecount in critical_runes )   //we've gone over a page boundary
        layout.append( "button 320 8 2236 2236 0 " + cstr(pagecount + 1) );
        pagecount := pagecount + 1;
        layout.append( "page " + (pagecount) );
        layout.append( "button 50 8 2235 2235 0 " + cstr(pagecount - 1) );
      endif
      page_rune_num := CurrentPageRuneNum( pagecount + 1, i );  //which rune am i on for this page? 1-4?
      case( page_rune_num )
        1: layout.append( "button   85  15 2361 2362 1 0    " + (r+ 500)       );
           layout.append( "text     85  38    0    1        " );
           layout.append( "text    150  38    0    3        " );
           layout.append( "gumppic  50  50   57             " );
           layout.append( "gumppic  70  50   58             " );
           layout.append( "gumppic  85  50   58             " );
           layout.append( "gumppic 100  50   58             " );
           layout.append( "gumppic 115  50   58             " );
           layout.append( "gumppic 130  50   58             " );
           layout.append( "gumppic 145  50   58             " );
           layout.append( "gumppic 160  50   59             " );
           layout.append( "text    100  12    0    5        " );
           layout.append( "button   50  64 2118 2118 1 0    " + (r+ 600)       );
           r := r + 1;
           layout.append( "text     66  62    0             " + datalen        );
           layout.append( "text     66  82    0             " + cstr(datalen+1));
           layout.append( "text     80 120    0             " + Cstr(datalen+2));
           layout.append( "button   62 124 2438 2437 1 0    " + (val + 71)     );
           layout.append( "button   65 150 2271 2271 1 0    " + buttonret      );
           buttonret := buttonret + 1;
           layout.append( "button  135 150 2291 2291 1 0    " + buttonret      );
           val := val + 1;
        2: layout.append( "button  220  15 2361 2362 1 0    " + (r+ 500)       );
           layout.append( "text    228  38    0    2        " );
           layout.append( "text    333  38    0    4        " );
           layout.append( "gumppic 218  50   57             " );
           layout.append( "gumppic 233  50   58             " );
           layout.append( "gumppic 248  50   58             " );
           layout.append( "gumppic 263  50   58             " );
           layout.append( "gumppic 278  50   58             " );
           layout.append( "gumppic 293  50   58             " );
           layout.append( "gumppic 308  50   58             " );
           layout.append( "gumppic 323  50   59             " );
           layout.append( "text    235  12    0    5        " );
           layout.append( "button  205  64 2118 2118 1 0    " + (r+ 600)       );
           r := r + 1;
           layout.append( "text    226  62    0             " + datalen        );
           layout.append( "text    226  82    0             " + cstr(datalen+1));
           layout.append( "text    232 120    0             " + Cstr(datalen+2));
           layout.append( "button  212 124 2438 2437 1 0    " + (val + 71)     );
           layout.append( "button  230 150 2271 2271 1 0    " + buttonret      );
           buttonret := buttonret + 1;
           layout.append( "button  290 150 2291 2291 1 0    " + buttonret      );

           val := val + 1;
      endcase
      buttonret := buttonret + 1;
      i := i + 1;
    endforeach
  endif
endfunction

function AddRune( who , book )
  var runedefs := GetObjProperty( book , "runedefs" );
  if(len(runedefs) >= 16)
    sendsysmessage(who,"this book cannot hold any more runes");
    return;
  endif
  SendSysmessage( who , "Target a recall rune." );
  var rune := Target( who );
  if( rune = "error" or rune.objtype != OBJTYPE_RUNE )
    SendSysmessage( who , "Cancelled." );
    return;
  endif
  if (!reserveitem(rune))
    sendsysmessage(who,"cancelled");
    return;
  endif
  if(!GetObjProperty( rune , "x"))
    Sendsysmessage( who ,"You can only add marked runes.");
    return;
  endif
  set_critical(1);
  var x := GetObjProperty( rune, "x");
  var y := GetObjProperty( rune, "y");
  var z := GetObjProperty( rune, "z");
  var rname := rune.desc - "A recall rune for";
  var new_rune_struct := { rname , x , y , z };
  if( !runedefs )
    var new_runedefs := {new_rune_struct};
    SetObjProperty( book , "runedefs" , new_runedefs );
  elseif( runedefs.size() = 32 )
    SendSysmessage( who , "That rune book is full." );
    return;
  else
    runedefs.append( new_rune_struct );
    SetObjProperty( book , "runedefs" , runedefs );
  endif
  DestroyItem( rune );
  set_critical(0);
endfunction

function CurrentPageRuneNum( pagecount, rune_number )
  return( rune_number - ( (pagecount-1) * 2));
endfunction

function NormalizeReturnValue( button_num )
  if( button_num = 1 )
    return 1;
  elseif( button_num = 2 )
    return 2;
  endif
  var mod_ret := Mod( button_num, 2);
  return (mod_ret + 2);
endfunction

function FindThatRune( book , button_num )
  var runedefs := GetObjProperty( book , "runedefs" );
  var rune_num := cint( button_num / 2);
  return( runedefs[rune_num] );
endfunction


