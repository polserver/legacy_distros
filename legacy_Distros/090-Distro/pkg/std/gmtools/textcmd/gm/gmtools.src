//////////////////////////////////////////////////////////////////////////////////
// Package GMtools
// Maintainer: GM Bishop Ebonhand
// ingame systems for improving staff efficiency
// this package contains:
//   my account management tool which is very useful for jailing or banning 
//   players. it also has a text entry pad allowing staff members to place 
//   notes on players accounts (Special thanks to Shinigami for all his help 
//   with the text entry fields). included is my traps package which allows
//   staff members to trap any item in the game. great for quests. one touch
//   buttons for recall and gate spells making getting around alot easier, 
//   plus this package incorporates an updated .go function with sending
//   capabilities. And finally, this package contains my "Levers and Switches"
//   scripts for making levers to perform a variety of tasks.. 
// 
// please report any bugs to me via email at the following address:
//   bish0p@cfl.rr.com
//
// this package has no external dependencies, and only one itemdesc entry, so
// there should be no hastle with integrating this package.
//////////////////////////////////////////////////////////////////////////////////


use uo;
use os;
use cfgfile;
use util;

include "include/objtype";
include "include/math";
include "layout";
include "golayout";
include "info";
include "gotolayout";
include "accountlayout";
include "spawnerlayout";
include "util/bank";
Include "include/gumputil"; // Added by Shinigami

const TEXTSTARTLOCY :=  70;
global locationscount := 0;  
global pagecount := 1;  
global playercount := 0;

program textcmd_gmtools( params )
  var who;
  if ( params[1] = "ICP" )
    who := params[2];
  else
	who := params;
  endif
  if ( who  = -1 )
	return 1;
  endif
  detach();
  maintaingump(who);
endprogram

function maintaingump(who)
  local gmtool := SendDialogGump( who, layout, data);
  case (gmtool[0])
    1: setsummonnpc(who); 
    2: setsummongroup(who);
    3: setgomenu(who);
    4: itemaddset(who);
    5: invokegotomenu(who);
    6: setmakehidden(who);;
    7: setcrimflagging(who);
    8: return;
    9: return;
   10: setitemtodefaults(who);
   11: setinfernotrap(who);
   12: invokegomenu(who);
   13: spawnpoint(who);
   14: showspawn(who, 5);
   15: showspawn(who, 10);
   16: hidespawn(who, 5);
   17: hidespawn(who, 10);
   18: standard_trap(who, 3);
   19: standard_trap(who, 2);
   20: standard_trap(who, 1);
   21: remove_trap(who);
   22: hideinferno(who, 5);
   23: hideinferno(who, 10);
   24: showinferno(who, 5);
   25: showinferno(who, 10);
   26: recall(who);
   27: gate(who);
   28: mark(who);
   29: permgate(who);
   30: lighting(who);
   31: sendsysmessage(who,"Target the character whos account you wish to view. canceling will bring up a listing of all accounts.");
       local person := target(who);
       local trg := findaccount(person.acctname);
       accountmanagement(who, trg);
   32: createswitch(who);
   33: chestspawner(who);
  endcase
endfunction

////////////////////////////////////////
// basic tool functions contained here
////////////////////////////////////////

function chestspawner(who)
  local res := SendDialogGump(who, spawnerlayout, spawnerdata);
  print(res[5]);
  if(res[0] = 99)
    local duration := res[5];
    local amount;
    local level;
    local range;
    foreach thing in (res.keys)
      if((thing >= 10) and (thing < 20))
        level := thing - 10;
      elseif((thing >= 20) and (thing < 30))
        amount := thing - 20;
      elseif((thing >= 30) and (thing < 40))
        range := thing - 30;
      endif
    endforeach
    local targ := TargetCoordinates(who);
    if(!targ)
      return;
    endif
    duration[1, Find(duration, ": ", 1)+1]:="";
    print("dur " +duration);
    local newduration := (Cint(duration) * 60);
    print("new " +newduration);
    if(newduration < 60)
      sendsysmessage(who,"Duration Error: Aborting");
      return;
    endif
    local item := CreateItemAtLocation(targ.x, targ.y, targ.z, 0x888b, 1);
    SetObjProperty(item,"level", level);
    SetObjProperty(item,"range", range);
    SetObjProperty(item,"amount", amount);
    SetObjProperty(item,"duration", Cint(newduration));
    EraseObjProperty(item,"waiting");
  elseif(res[0] = 89)
    foreach item in ListItemsNearLocationOfType( who.x, who.y, who.z, 5, 0x888b);
      item.graphic := 4483;
    endforeach
  else
    foreach item in ListItemsNearLocationOfType( who.x, who.y, who.z, 5, 0x888b);
      item.graphic := 1;
    endforeach
  endif
  maintaingump(who);
endfunction

function createswitch(who);
  sendsysmessage(who,"select the item to make a switch out of");
  local chest := target(who);
  if (!chest)
    sendsysmessage(who,"canceled");
  else
    SetObjProperty(chest, "usescript", chest.usescript);
    SendSysmessage (who, "You create a switch out of the item, be sure to change its graphic through the interface.");
    chest.usescript := ":gmtools:lever";
  endif
  maintaingump(who);
endfunction

function lighting(who)
  sendsysmessage(who,"tartet the item you want wish to set this command to.");
  local targetitem :=target(who);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  local oldgraphic := targetitem.graphic;
  setobjproperty(targetitem,"oldgraphic", oldgraphic);
  local oldcolor := targetitem.color;
  setobjproperty(targetitem,"oldcolor", oldcolor);
  local oldname := targetitem.name;
  setobjproperty(targetitem,"oldname", oldname);
  targetitem.name    := "lighting crystal";
  targetitem.graphic :=  7885;
  targetitem.color   :=  0x455;
  targetitem.usescript := ":gmtools:lightingitem";
  targetitem.newbie := 1;
  maintaingump(who);
endfunction

function permgate( caster )
  SendSysmessage( caster, "Select a rune to gate from." );
  local cast_on := target(caster);
  local tox := Cint(GetObjProperty( cast_on, "x" ));
  local toy := Cint(GetObjProperty( cast_on, "y" ));
  local toz := Cint(GetObjProperty( cast_on, "z" ));
  local gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z, UOBJ_BLUE_MOONGATE, 1 );
  gate1.movable := 0;
  local gate2 := CreateItemAtLocation( tox, toy, toz, UOBJ_BLUE_MOONGATE, 1 );
  gate2.movable := 0;
  SetObjProperty( gate1, "GateDestX", gate2.x );
  SetObjProperty( gate1, "GateDestY", gate2.y );
  SetObjProperty( gate1, "GateDestZ", gate2.z );
  SetObjProperty( gate2, "GateDestX", gate1.x );
  SetObjProperty( gate2, "GateDestY", gate1.y );
  SetObjProperty( gate2, "GateDestZ", gate1.z );
  maintaingump(caster);
endfunction

function gate( caster )
  SendSysmessage( caster, "Select a rune to gate from." );
  local cast_on := target(caster);
  local tox := Cint(GetObjProperty( cast_on, "x" ));
  local toy := Cint(GetObjProperty( cast_on, "y" ));
  local toz := Cint(GetObjProperty( cast_on, "z" ));
  set_critical( 1 );
  local gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z, UOBJ_BLUE_MOONGATE, 1 );
  gate1.movable := 0;
  local gate2 := CreateItemAtLocation( tox, toy, toz, UOBJ_BLUE_MOONGATE, 1 );
  gate2.movable := 0;
  SetObjProperty( gate1, "GateDestX", gate2.x );
  SetObjProperty( gate1, "GateDestY", gate2.y );
  SetObjProperty( gate1, "GateDestZ", gate2.z );
  SetObjProperty( gate2, "GateDestX", gate1.x );
  SetObjProperty( gate2, "GateDestY", gate1.y );
  SetObjProperty( gate2, "GateDestZ", gate1.z );
  Detach();
  set_critical( 0 );
  sleep(10);
  set_critical(1);
  DestroyItem( gate1 );
  DestroyItem( gate2 );
  set_critical(0);
  maintaingump(caster);
endfunction

function mark( caster )
  SendSysmessage( caster, "Select a rune to mark." );
  local cast_on := Target( caster );
  SetObjProperty(cast_on, "x", caster.x);
  SetObjProperty(cast_on, "y", caster.y);
  SetObjProperty(cast_on, "z", caster.z);
  SendSysmessage( caster, "You marked: " +  caster.x + " " + caster.y + " " + caster.z );
  SetName(cast_on, "a Marked Recall Rune");
  maintaingump(caster);
endfunction

function recall( caster )
  SendSysmessage( caster, "Select a rune to recall from." );
  local cast_on := Target(caster);
  local tox := Cint(GetObjProperty( cast_on, "x" ));
  local toy := Cint(GetObjProperty( cast_on, "y" ));
  local toz := Cint(GetObjProperty( cast_on, "z" ));
  MoveCharacterToLocation( caster, tox, toy, toz );
  maintaingump(caster);
endfunction

function hideinferno( who, range)
  local i := 0;
  foreach x in ListItemsNearLocationOfType(who.x, who.y, who.z, range, 0x888a)
    x.graphic := 0x0001;
    x.movable := 0;
	i := i + 1;
  endforeach
  SendSysMessage(who, "hid " + i + " infernos.");
  maintaingump(who);
endfunction

function showinferno( who, range)
  local i := 0;
  foreach x in ListItemsNearLocationOfType(who.x, who.y, who.z, range, 0x888a)
    x.graphic := 0x1ea7;
	PrintTextAbove(x, "Hello, I am bringer of DOOM!");
	i := i + 1;
  endforeach
  SendSysMessage(who, "Revealed " + i + " infernos.");
  maintaingump(who);
endfunction

function remove_trap(who)
  sendsysmessage(who,"select the item to remove traps from");
  local chest := target(who);
  if (!chest)
    sendsysmessage(who,"canceled");
  else
    local scr := getobjproperty(chest,"usescript");
    if (!scr or scr = error)
      chest.usescript := "";
    else
      chest.usescript := scr;
    endif
	EraseObjProperty( chest, "trap_type" );
	EraseObjProperty( chest, "trap_strength" );
	EraseObjProperty( chest, "usescript" );
  endif
  maintaingump(who);
endfunction

function standard_trap(who, type)
  Local str := cint(SendTextEntryGump( who, "what trap strength? [0 - 100]", 40 ));
  sendsysmessage(who,"select the item to place a trap on");
  local chest := target(who);
  if (!chest)
    sendsysmessage(who,"canceled");
  else
    SetObjProperty(chest, "trap_type", type);
    SetObjProperty(chest, "trap_strength", str);
    SetObjProperty(chest, "usescript", chest.usescript);
    SendSysmessage (who, "You carefully place the trap on the container");
    chest.usescript := ":gmtools:tooltraps";
  endif
  maintaingump(who);
endfunction

function hidespawn( who, range)
  local i := 0;
  foreach x in ListItemsNearLocationOfType(who.x, who.y, who.z, range, 0xA401)
    x.graphic := 0x0001;
	i := i + 1;
  endforeach
  SendSysMessage(who, "hid " + i + " spawnpoints.");
  maintaingump(who);
endfunction

function showspawn( who, range)
  local i := 0;
  foreach x in ListItemsNearLocationOfType(who.x, who.y, who.z, range, 0xA401)
    x.graphic := 0x1ea7;
	PrintTextAbove(x, "Hello, I am a spawnpoint!");
	i := i + 1;
  endforeach
  SendSysMessage(who, "Revealed " + i + " spawnpoints.");
  maintaingump(who);
endfunction

function spawnpoint(who)
  sendsysmessage(who,"where would you like to create it?");
  local tar := targetcoordinates(who);
  if (!tar)
    sendsysmessage(who,"canceled");
  else
    local doodad := createitematlocation(tar.x, tar.y, tar.z, 0xa401, 1);
    doodad.movable := 0;
  endif
  maintaingump(who);
endfunction

function setinfernotrap(who)
  sendsysmessage(who,"set it where");
  local where := targetcoordinates(who);
  local landmine := createitematlocation(where.x, where.y, where.z, 0x888a, 1);
  detach();
  maintaingump(who);
endfunction

function setsummonnpc(who)
  var mobilearray := {};
  sendsysmessage(who,"target the NPC you wish to call from the item");
  local npctarget := target(who);
  if (!npctarget.npctemplate)
    sendsysmessage(who,"that is not a NPC");
  else
    sendsysmessage(who,"now tartet the item you want wish to call the npc from");
    local targetitem :=target(who);
    local oldscript := targetitem.script;
    setobjproperty(targetitem,"oldscript", oldscript);
    mobilearray[1] := npctarget.serial;
    setobjproperty(targetitem,"mobilearray", mobilearray);
    targetitem.usescript := ":gmtools:summonnpc";
  endif
  maintaingump(who);
endfunction

function setsummongroup(who)
  var mobilearray := {};
  sendsysmessage(who,"to define the NPCs you wish to summon, the script will ask you to target 2 coordinates that it uses to create a box around the npcs");
  sendsysmessage(who,"the script will now ask you to choose the coordinates to create that box");
  sendsysmessage(who,"target the northwest corner of area your NPCs are stored");
  local boxnw := targetcoordinates(who);
  sendsysmessage(who,"now target the southwest corner of the ares your NPCs are stored");
  local boxse := targetcoordinates(who);
  local box := ListObjectsInBox( boxnw.x, boxnw.y, boxnw.z, boxse.x, boxse.y, boxse.z);
  foreach item in box
    if (item.npctemplate)
      mobilearray.append(item.serial);
    endif
  endforeach
  sendsysmessage(who,"now tartet the item you want wish to call the npc from");
  local targetitem :=target(who);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  setobjproperty(targetitem,"mobilearray", mobilearray);
  targetitem.usescript := ":gmtools:summonnpc";
  maintaingump(who);
endfunction

function setgomenu(who)
  sendsysmessage(who,"tartet the item you want wish to set this command to.");
  local targetitem :=target(who);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  targetitem.usescript := ":gmtools:itemgo";
  maintaingump(who);
endfunction

function itemaddset( who)
  Local range := cint(SendTextEntryGump( who, "what range do you want to search for items", 40 ));
  sendsysmessage(who,"select an item to add this set to");
  local targetitem := target(who);
  sendsysmessage(who, "Select the center of the set area (radius " + range + ")");
  local whereleft := targetcoordinates(who);
  local stuff := ListItemsNearLocation( whereleft.x,whereleft.y,whereleft.z, cint(range));
  local numthings := 1;
  var totalthings := {};
  foreach thing in stuff
    totalthings.append(thing.objtype);
    var itemnumber := {};
    itemnumber.append(thing.x -whereleft.x);
    itemnumber.append(thing.y -whereleft.y);
    itemnumber.append(thing.z -whereleft.z);
    itemnumber.append(thing.color);
    if (thing.movable = 1)
      itemnumber.append(1);
    else
      itemnumber.append(0);
    endif
    setobjproperty(targetitem, "iteminfo" + numthings, itemnumber);
    numthings := numthings + 1;
  endforeach
  setobjproperty(targetitem,"totalthings", totalthings);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  targetitem.usescript := ":gmtools:itemaddset";
  maintaingump(who);
endfunction

function setmakehidden(who)
  sendsysmessage(who,"tartet the item you want wish to set this command to.");
  local targetitem :=target(who);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  targetitem.usescript := ":gmtools:makehidden";
  maintaingump(who);
endfunction

function setcrimflagging(who)
  sendsysmessage(who,"tartet the item you want wish to set this command to.");
  local targetitem :=target(who);
  local oldscript := targetitem.script;
  setobjproperty(targetitem,"oldscript", oldscript);
  local oldgraphic := targetitem.graphic;
  setobjproperty(targetitem,"oldgraphic", oldgraphic);
  local oldcolor := targetitem.color;
  setobjproperty(targetitem,"oldcolor", oldcolor);
  local oldname := targetitem.name;
  setobjproperty(targetitem,"oldname", oldname);
  targetitem.name    := "criminal flagging crystal";
  targetitem.graphic :=  7885;
  targetitem.color   :=  88;
  targetitem.usescript := ":gmtools:greyitem";
  targetitem.newbie := 1;
  maintaingump(who);
endfunction

function setitemtodefaults(who)
  sendsysmessage(who,"target the item you wish to return to normal");
  local targetitem := target(who);
  local scrip := getobjproperty(targetitem,"oldscript");
  eraseobjproperty(targetitem,"oldscript");
  eraseobjproperty(targetitem,"mobilearray");
  if (scrip = error)
    scrip := "";
  endif
  local oldgraphic := getobjproperty(targetitem,"oldgraphic");
  targetitem.graphic := oldgraphic;
  eraseobjproperty(targetitem,"oldgraphic");
  local oldcolor := getobjproperty(targetitem,"oldcolor");
  targetitem.color := oldcolor;
  eraseobjproperty(targetitem,"oldcolor");
  local oldname := targetitem.name;
  if (oldname = "")
    targetitem.name := "";
  else
    targetitem.name := oldname;
  endif
  eraseobjproperty(targetitem,"oldname");
  local totalthings := getobjproperty(targetitem,"totalthings");
  if (totalthings)
    eraseobjproperty(targetitem, "totalthings");
    local itemtotal := len(totalthings);
    local i :=1;
    For (i:=1;i<=itemtotal;i:=i+1)
      eraseobjproperty(targetitem, "iteminfo" +i);
    endfor
  endif
  targetitem.usescript := scrip;
  maintaingump(who);
endfunction

///////////////////////////////////
// end basic tool functions
///////////////////////////////////

///////////////////////////////////
// goto functions contained here
///////////////////////////////////

function invokegotomenu( who)
  FillIngotoArrays();
  local gotoresult := SendDialogGump( who, gotolayout, gotodata );
  local name := gotodata[gotoresult[0]+2];
  foreach onlinechr in EnumerateOnlineCharacters()
    if (onlinechr.name = name)
      MoveCharactertoLocation(who, onlinechr.x, onlinechr.y, onlinechr.z);
      break;
    endif
  endforeach
  maintaingump(who);
endfunction

function FillIngotoArrays()
  local players := EnumerateOnlineCharacters();
  local datalen;
  local layoutlen;
  local prev_y := cint(80);
  local datindx;
  local buttonret := 1;
  gotolayout[GetLayoutLength()+1] := "page " + pagecount;
  if( len(EnumerateOnlineCharacters()) > 19)
    gotolayout[GetLayoutLength()+1] := "button 285 465 2648 2647 0 " + (pagecount + 1);
  endif
  foreach player in players
    playercount := playercount + 1;
    datalen := GetDataLength();
    layoutlen := GetLayoutLength();
    datindx := datalen+1;
    gotodata[datindx] := player.name;
    if( playercount = 20 or playercount = 39 or playercount = 58 or playercount = 77 or playercount = 96)
      pagecount := pagecount + 1;
      gotolayout[GetLayoutLength()+1] := "page " + pagecount;
      prev_y := 80;
      gotolayout[GetLayoutLength()+1] := "button 285 85 2650 2651 0 " + (pagecount - 1);
      if( len(EnumerateOnlineCharacters()) > playercount + 19)
        gotolayout[GetLayoutLength()+1] := "button 285 465 2648 2647 0 " + (pagecount + 1);
      endif
    endif
    gotolayout[GetLayoutLength()+1] := ("text 20 " + cstr(prev_y + 20) + " 40 " + datalen);
    gotolayout[GetLayoutLength()+1] := ("button 260 " + cstr(prev_y + 20) + " 2640 2641 1 0 " + buttonret);
    prev_y := prev_y + 20;
    buttonret := buttonret + 1;
  endforeach
endfunction

function GetLayoutLength();
    return (len(gotolayout));
endfunction

function GetDataLength();
    return (len(gotodata));
endfunction

///////////////////////////////////
// end goto functions
///////////////////////////////////

///////////////////////////////////
// go functions contained here
///////////////////////////////////

function invokegomenu( who)
  local tname := lower(who.name);
  FillIngoArrays( tname );
  local goresult := SendDialogGump( who, golayout, godata );
  if (!(goresult[0] == 0))
    local locs    := readconfigfile("::golocs");
    local MaxLocs := GetConfigMaxIntKey(locs)+1;
    local Dest    := locs[mod(goresult[0], MaxLocs)];
    local Traveler;
    if ( goresult[0] > MaxLocs ) // teleporting someone else
      SendSysmessage( who , "Select a MOBILE." );
      Traveler :=  Target( who , TGTOPT_NOCHECK_LOS );
      if(!Traveler or !Traveler.strength)
        SendSysmessage( who , "Invalid selection." );
      endif
    else
      Traveler := who;
    endif
    MoveCharactertoLocation(Traveler, Dest.X, Dest.Y, GetMapInfo(Dest.X, Dest.Y).Z);
    UnloadConfigFile("::golocs");
  endif
  maintaingump(who);
endfunction

function FillIngoArrays( tname )
    local telelocations := readconfigfile("::golocs");
    local datalen;
    local layoutlen;
    local prev_y := cint(TEXTSTARTLOCY);
    local datindx := 2;
    local buttonret := 1;
    local i;
    local numlocations := GetConfigMaxIntKey(telelocations);
    local CurrLoc;
    for( i := 1 ; i <= numlocations; i := i + 1  )
      CurrLoc := telelocations[i];
      if ((CurrLoc.TYPE == "all") || (CurrLoc.TYPE == tname))
        locationscount := locationscount + 1;
        datalen := GetgoDataLength();
        layoutlen := GetgoLayoutLength();
        // Store Name
        datindx := datalen+1;
        godata[datindx] := CurrLoc.Name;
        if (mod(locationscount, 19) == 1)
          // Pointer Down
          if (locationscount >= 19)
            golayout[GetgoLayoutLength()+1] := "button 285 465 2648 2647 0 " + (pagecount);
          endif
          // Set Page Number
          golayout[GetgoLayoutLength()+1] := "page " + pagecount;
          pagecount := pagecount + 1;
          prev_y := TEXTSTARTLOCY;
          if (locationscount > 19)
            // Pointer Up
            if( i > 19)
              golayout[GetgoLayoutLength()+1] := "button 285 85 2650 2651 0 " + (pagecount - 2);
            endif
          endif
        endif
        golayout[GetgoLayoutLength()+1] := ("text 20 " + cstr(prev_y + 20) + " 40 " + datalen);
        golayout[GetgoLayoutLength()+1] := ("button 200 " + cstr(prev_y + 20) + " 2640 2641 1 0 " + ((buttonret+1) / 2)); // Go Button
       golayout[GetgoLayoutLength()+1] := ("button 260 " + cstr(prev_y + 20) + " 2640 2641 1 0 " + (((buttonret+1) / 2) + numlocations+1)); // Send Button
        prev_y := prev_y + 20;
      endif
      buttonret := buttonret + 2;
    endfor
endfunction

function GetgoLayoutLength();
    return (len(golayout));
endfunction

function GetgoDataLength();
    return (len(godata));
endfunction

///////////////////////////////////
// end go functions
///////////////////////////////////

//////////////////////////////////////////
// account info functions contained here
//////////////////////////////////////////

function accountmanagement(who, trg);
  detach();
  maintainaccountgump(who, trg);
endfunction

function maintainaccountgump(who, trg)
  if (!trg or (trg = error))
    local act := SendTextEntryGump(who, "type account name", 40 );
//    local act := Accountlisting(who);
    trg := FindAccount(act);
  endif
  if (!trg)
    sendsysmessage(who,"cancelled");
  else
    if (!trg.getprop("email"));
      trg.setprop("email", "");
    endif
    if (!trg.getprop("notes"));
      trg.setprop("notes", "");
    endif
    if (!trg.getprop("releaseday"));
      trg.setprop("releaseday", "");
    endif
    testdata[16] := trg.name;
    if (trg.banned = 1)
      testdata[17] := "banned";
    elseif (trg.enabled = 0)
      testdata[17] := "jailed";
    else
      testdata[17] := "active";
    endif
    testdata[18] := trg.GetCharacter(1).name;
    if (testdata[18] = error)
      testdata[18] := "";
    endif
    testdata[19] := trg.GetCharacter(2).name;
    if (testdata[19] = error)
      testdata[19] := "";
    endif
    testdata[20] := trg.GetCharacter(3).name;
    if (testdata[20] = error)
      testdata[20] := "";
    endif
    testdata[21] := trg.GetCharacter(4).name;
    if (testdata[21] = error)
      testdata[21] := "";
    endif
    testdata[22] := trg.GetCharacter(5).name;
    if (testdata[22] = error)
      testdata[22] := "";
    endif
    local mail := trg.getprop("email");
    if (!mail)
      mail := "Not Provided";
    endif
    testdata[23] := mail;
    if(!trg)
      sendsysmessage(who,"canceled");
      return;
    endif
    SetNotes(trg.name); // Modified by Shinigami
    if (trg.enabled = 0)
      testlayout.append("button  400 195 2662 2662 1 0 10");    //jail index box
      testlayout.append("gumppic 400 185 2660 2660 1 0 10");    //jail index box
      testlayout.append("text    320 190  910 37"); //jail duration text    (white)
      testlayout.append("text    440 190  910 38"); //jail duration text    (white)
      testlayout.append("text    408 190  100 39"); //jail tine left text   (blue)
      local releaseday := trg.getprop("releaseday");
      local timeremaining := (((releaseday - readgameclock())/86400) + 1);
      if (timeremaining < 2)
        timeremaining := 0;
      endif
      testdata[40] := timeremaining;
    endif
    local accounttool := SendDialogGump( who, testlayout, testdata);
    case (accounttool[0])
      2: jail(who, trg.name);
      3: Notes(trg.name, accounttool); //notes(who, trg.name); // Modified by Shinigami
      4: editemail(who, trg);
      5: info( who, trg.GetCharacter(1).serial, trg);
      6: info( who, trg.GetCharacter(2).serial, trg);
      7: info( who, trg.GetCharacter(3).serial, trg);
      8: info( who, trg.GetCharacter(4).serial, trg);
      9: info( who, trg.GetCharacter(5).serial, trg);
     10: editjail(who, trg);
     11: ban(who, trg.name);
    endcase
  endif
  maintaingump(who);
endfunction

Function SetNotes(acctname) // Added by Shinigami
  Local act:=FindAccount(acctname);
  Local note:=act.GetProp("notes");
  If ((!note) Or (note=error))
    note:="";
  EndIf
  Local split:=SplitWords(note);
  Local width:=0;
  Local lines:=0;
  Local index:=1;
  While ((index<=Len(split)) And (lines<=12))
    If (width=0)
      Local testword:=split[index];
      lines:=lines+1;
      testdata[25+lines]:=testword;
      width:=GumpTextWidthFast(testword);
      index:=index+1;
    Else
      Local testword:=" "+split[index];
      Local testwidth:=GumpTextWidthFast(testword);
      If (width+testwidth<CInt(790/1.5))
        testdata[25+lines]:=testdata[25+lines]+testword;
        width:=width+testwidth;
        index:=index+1;
      Else
        width:=0;
      EndIf
    EndIf
  EndWhile
  If (lines>12)
    testdata[24+lines]:=testdata[24+lines]+"...";
  Else
    While (lines<12)
      lines:=lines+1;
      testdata[25+lines]:="";
    EndWhile
  EndIf
EndFunction

function editjail(who, trg);
  Local val := cint(SendTextEntryGump( who, "enter new total? (Max 14)", 40 ));
  local time;
  case(val)
     1: time := 86400;
     2: time := 172800;
     3: time := 259200;
     4: time := 345600;
     5: time := 432000;
     6: time := 518400;
     7: time := 604800;
     8: time := 691200;
     9: time := 777600;
    10: time := 864000;
    11: time := 950400;
    12: time := 1036800;
    13: time := 1123200;
    14: time := 1209600;
  endcase
  trg.setprop("releaseday", (readgameclock() + time));
endfunction

function ban(who, acctname);
  local banverify := SendDialogGump( who, banlayout, bandata);
  local act := FindAccount(acctname);
  case (banverify[0])
    1: local characters := EnumerateOnlineCharacters();
       foreach char in characters
         if (char.acctname = acctname)
           SendSysmessage( char , "You were kicked by " + who.name + ".");
           SetObjProperty(char,"justbanned", 1);
           DisconnectClient(char);
           break;
         endif
       endforeach
       foreach chr in characters
         if (chr.cmdlevel > 1)
           sendsysmessage(chr, "account " + acctname + " has been banned.");
         endif
       endforeach
       detach();
       sleep(10);
       act.ban();
	   local x, i;
       WipeBankBox(act.GetCharacter(1));
	   for (i := 1; i <= 24; i := i + 1)
	     x := GetEquipmentByLayer(act.GetCharacter(1), i);
	     MoveItemToContainer(x, act.GetCharacter(1).backpack);
	   endfor
       destroyitem(act.GetCharacter(1).backpack);
       act.DeleteCharacter(1);
       i := 0;
       WipeBankBox(act.GetCharacter(2));
	   for (i := 1; i <= 24; i := i + 1)
	     x := GetEquipmentByLayer(act.GetCharacter(2), i);
	     MoveItemToContainer(x, act.GetCharacter(2).backpack);
	   endfor
       destroyitem(act.GetCharacter(2).backpack);
       act.DeleteCharacter(2);
       i := 0;
       WipeBankBox(act.GetCharacter(3));
	   for (i := 1; i <= 24; i := i + 1)
	     x := GetEquipmentByLayer(act.GetCharacter(3), i);
	     MoveItemToContainer(x, act.GetCharacter(3).backpack);
	   endfor
       destroyitem(act.GetCharacter(3).backpack);
       act.DeleteCharacter(3);
       i := 0;
       WipeBankBox(act.GetCharacter(4));
	   for (i := 1; i <= 24; i := i + 1)
	     x := GetEquipmentByLayer(act.GetCharacter(4), i);
	     MoveItemToContainer(x, act.GetCharacter(4).backpack);
	   endfor
       destroyitem(act.GetCharacter(4).backpack);
       act.DeleteCharacter(4);
       i := 0;
       WipeBankBox(act.GetCharacter(5));
	   for (i := 1; i <= 24; i := i + 1)
	     x := GetEquipmentByLayer(act.GetCharacter(5), i);
	     MoveItemToContainer(x, act.GetCharacter(5).backpack);
	   endfor
       destroyitem(act.GetCharacter(5).backpack);
       act.DeleteCharacter(5);
    2: sendsysmessage(who,"cancelled");
       return;
  endcase
endfunction

Function Notes(acctname, result) // Added by Shinigami
  Local note:=result[25];
  note[1, Find(note, ": ", 1)+1]:="";
  Local subnote;
  Local i;
  For (i:=26; i<=36; i:=i+1)
    subnote:=result[i];
    subnote[1, Find(subnote, ": ", 1)+1]:="";
    If (subnote<>"")
      note:=note+" "+subnote;
    EndIf
  EndFor
  Local act:=FindAccount(acctname);
  act.setprop("notes", note);
EndFunction

function editemail(who, trg);
  Local val := cstr(SendTextEntryGump( who, "enter the new email address?", 40 ));
  trg.setprop("email", val);
endfunction

function jail(who, acctname);
  Local val := cint(SendTextEntryGump( who, "How many days will this account remain jailed? (Max 14)", 40 ));
  local time;
  case(val)
     1: time := 86400;
     2: time := 172800;
     3: time := 259200;
     4: time := 345600;
     5: time := 432000;
     6: time := 518400;
     7: time := 604800;
     8: time := 691200;
     9: time := 777600;
    10: time := 864000;
    11: time := 950400;
    12: time := 1036800;
    13: time := 1123200;
    14: time := 1209600;
  endcase
  local act := FindAccount(acctname);
  act.setprop("releaseday", (ReadGameClock() + time));
  local characters := EnumerateOnlineCharacters();
  act.disable();
  foreach char in characters
    if (char.acctname = acctname)
      SendSysmessage( char , "You were kicked by " + who.name + ".");
      DisconnectClient(char);
      break;
    endif
  endforeach
endfunction

function Accountlisting(who)
  FillInaccountArrays();
  local num := SendDialogGump( who, gotolayout, accountdata );
  local accounts := listaccounts();
  local accountresult := accounts[num[0]];
  return accountresult;
endfunction

function FillInAccountArrays()
  local players := ListAccounts();
  local datalen;
  local layoutlen;
  local prev_y := cint(80);
  local datindx;
  local buttonret := 1;
  local i := 0;
  gotolayout[GetAccountLayoutLength()+1] := "page " + pagecount;
  if( len(ListAccounts()) > 19)
    gotolayout[GetAccountLayoutLength()+1] := "button 285 465 2648 2647 0 " + (pagecount + 1);
  endif
  foreach player in players
    i := i + 1;
    playercount := playercount + 1;
    datalen := GetAccountDataLength();
    layoutlen := GetAccountLayoutLength();
    datindx := datalen+1;
    Accountdata[datindx] := players[i];
    if( playercount = 20 or playercount = 39 or playercount = 58 or playercount = 77 or playercount = 96)
      pagecount := pagecount + 1;
      gotolayout[GetAccountLayoutLength()+1] := "page " + pagecount;
      prev_y := 80;
      gotolayout[GetAccountLayoutLength()+1] := "button 285 85 2650 2651 0 " + (pagecount - 1);
      if( len(players) > playercount + 19)
        gotolayout[GetAccountLayoutLength()+1] := "button 285 465 2648 2647 0 " + (pagecount + 1);
      endif
    endif
    gotolayout[GetAccountLayoutLength()+1] := ("text 20 " + cstr(prev_y + 20) + " 40 " + datalen);
    gotolayout[GetAccountLayoutLength()+1] := ("button 260 " + cstr(prev_y + 20) + " 2640 2641 1 0 " + buttonret);
    prev_y := prev_y + 20;
    buttonret := buttonret + 1;
  endforeach
endfunction

function GetAccountLayoutLength();
    return (len(gotolayout));
endfunction

function GetAccountDataLength();
    return (len(accountdata));
endfunction 

///////////////////////////////////
// end account info functions
///////////////////////////////////

///////////////////////////////////
// info functions contained here
///////////////////////////////////
function info( who , character, trg)
  local online := 0;
  foreach char in EnumerateOnlineCharacters()
    if( char.serial = character)
      character := char;
      online := 1;
    endif
  endforeach
  if (online = 0)
    character := SystemFindObjectBySerial(character, SYSFIND_SEARCH_OFFLINE_MOBILES);
  endif
  if( !character )
     Sendsysmessage( who , "That player does not exist. Cancelled." );
  else
    infodata[1] := "Info On: " + character.name;
    FillInStats( character);
    FillInSkills( character);
    FillInWeapon( character );
    local result := SendDialogGump( who, infolayout, infodata );   
    local reskey;
    foreach key in (result.keys)
      if( key >= 1000 )
        reskey := key;
      endif
    endforeach
    case( result[0] )
       1:   //fall through intentional
       2:
       3:
       4:
       5:
       6:
       7:
       9:
      11:
      14:
      13:
      15: EditStat( who , character , result[0], trg);
      16: EditSkill( who , character , reskey-1000, trg);
      17: character.frozen := 1; SendSysmessage( who , character.name + " is frozen.");
      18: character.frozen := 0; SendSysmessage( who , character.name + " is unfrozen.");
      19: if( !character.npctemplate )
            SendSysmessage( character , "You were kicked by " + who.name + "."); 
            DisconnectClient( character );
          endif
      20: MoveCharacterToLocation( character , 5288 , 1176 , 0 );
      21: if( !character.npctemplate )
            local bankbox := FindBankBox( character );
            SendOpenSpecialContainer( who, bankbox );
          else
            SendSysmessage( who, "Only can be used on players." );
          endif
      22: if( !character.npctemplate )
            SendOpenSpecialContainer( who, character.backpack );
          else
            SendSysmessage( who, "Only can be used on players." );
          endif
      23: MoveCharacterToLocation( character , who.x , who.y , who.z );
      24: SetName( character , RequestInput( who, who.backpack, "Enter a new name.") );
    endcase
  endif
endfunction

function FillInStats( who )
  local levelname;
  case( who.cmdlevel )
      0: levelname := "Player";
      1: levelname := "Counselor";
      2: levelname := "Seer";
      3: levelname := "GM";
      4: levelname := "Admin";
      5: levelname := "Development";
  endcase
  infodata[8] := who.strength;
  infodata[10] := who.intelligence;
  infodata[12] := who.dexterity;
  infodata[14] := who.x;
  infodata[16] := who.y;
  infodata[18] := who.z;
  infodata[20] := who.hp + "/" + who.maxhp;
  infodata[22] := who.mana + "/" + who.maxmana;
  infodata[24] := who.stamina + "/" + who.maxstamina;
  infodata[26] := who.ar;
  infodata[28] := who.graphic;
  infodata[30] := who.color;
  infodata[144] := levelname;
  infodata[146] := who.acctname;
endfunction

function FillInSkills( who )
  local datindx;
  local skillindx := 0;
  for( datindx := 32 ; datindx <= 128 ; datindx := datindx + 2 )
    infodata[datindx] := GetSkill( who, skillindx);
    skillindx := skillindx + 1;
   endfor
endfunction

function FillInWeapon( who )
  local weapfile := ReadConfigFile( ":combat:itemdesc" );
  local npcfile := ReadConfigFile( "::npcdesc" );
  if(who.weapon)
    local idx := find( who.weapon.name , "[" , 1 ); //ignore maker's mark
    if(idx!=0)
      local tempn := who.weapon.desc;
      tempn := tempn[1,idx-1];
      infodata[138] := tempn;
    else
      if(who.weapon.desc = "nodraw")
        infodata[138] := "Wrestling";
      else
        infodata[138] := who.weapon.desc;
      endif
    endif
    local dam := weapfile[who.weapon.objtype].Damage;
    if(!dam)
      infodata[140] := "n/a";
    else
      infodata[140] := dam;
    endif
    infodata[142] := who.weapon.hp + " / " + who.weapon.maxhp;
   else
    infodata[138] := "n/a";
    infodata[140] := "n/a";
    infodata[142] := "n/a";
    if(who.npctemplate) //Hi, i'm an NPC
      local dam := npcfile[who.npctemplate].AttackDamage;
      local weap := npcfile[who.npctemplate].AttackSkillId;      
      local ar := npcfile[who.npctemplate].AR;      
      if( weap )
        infodata[138] := weap;
      endif
      if( dam )
        infodata[140] := dam;
      endif
      if( ar )
        infodata[142] := "AR: " + ar;
      endif
    endif
  endif
endfunction

function EditStat( who , character , result, trg)
    SendSysmessage( who, "Caution! Values are changed immediately, Integers only!. Hit ESC to cancel." );
    local val := cint(RequestInput( who, who.backpack, "Enter a new value."));
    if( !val )
      SendSysmessage( who , "Cancelled." );
    else
      case( result )
         1: character.setstr(val);
         2: character.setint(val);
         3: character.setdex(val);
         4: MoveCharacterToLocation( character, val, character.y, character.z );
         5: MoveCharacterToLocation( character, character.x, val, character.z );
         6: MoveCharacterToLocation( character, character.x, character.y, val );
         7: character.hp := val;
         9: character.mana := val;
        11: character.stamina := val;
        13: character.ar_mod := 0;
            character.ar_mod := val - character.ar;
        14: character.graphic := val;
        15: character.color := val;
      endcase
    endif
endfunction

function EditSkill( who , character , skill, trg);
    SendSysmessage( who, "Caution! Values are changed immediately, Integers only!. Hit ESC to cancel." );
    local val := cint(RequestInput( who, who.backpack, "Enter a new value.")) * 10;
    if ((!val) and (val != 0))
      SendSysmessage( who , "Cancelled." );
    else
      SetRawSkill( character , skill , BaseSkillToRawSkill(val));
    endif
endfunction

///////////////////////////////////
// end info functions
///////////////////////////////////