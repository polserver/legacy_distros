/////////////////////////////////////////////////////////////////////////////
//
// Simple Townperson AI. responds to a few keywords and barks out
// some crappy responses
//
// He also runs like heck if you try to attack him :)
//
// TODO: put all keyword / response text in a cfg file.
//
/////////////////////////////////////////////////////////////////////////////

use npc;
use os;
use uo;
use util;

global  cfg;

include "include/eventid";
include "include/randname";
include "include/speech";
include "include/objtype";
include "include/anchors";
include "include/dist";
include "ai/main/loot";

const HALT_THRESHOLD := 1; // how close before he barks?

global me := Self();

program CastleGuard()
drop_anchor();

	SetObjProperty(me,"serial",me.serial);

    local next_wander := ReadGameClock() + 10;
    EnableEvents( EVID_SPEECH + EVID_ENGAGED + EVID_DISENGAGED + EVID_DAMAGED, HALT_THRESHOLD);
    EnableEvents( EVID_ENTEREDAREA + EVID_LEFTAREA, HALT_THRESHOLD );
    EnableEvents( EVID_OPPONENT_MOVED );

	if (getobjproperty(me, "frozen"))
		me.frozen := 1;
	endif

    SetWarMode( 0 );
    set_priority(10);

if( me.name["<random>"] )
   SetName ( me , RandomName( me ) );
   
local title := randomint(10);
local ttitle := "";

case (title) 
        0: ttitle := "";
        1: ttitle := " the townsperson";
        2: ttitle := " the farmer";
        3: ttitle := " the sailor";
        4: ttitle := " the drunkard";
        5: ttitle := " the wanderer";
        6: ttitle := " the villager";
        7: ttitle := " the gypsie";
        8: ttitle := " the vagabond";
        9: ttitle := " the laborer";
        default: ttitle := "";
endcase



local tname := randomname(me);


setname(me, tname + ttitle);

UnloadConfigFile( "equip" );
cfg := readconfigfile("equip");
local maxelem := GetConfigMaxIntKey(cfg );


local thistempl := randomint(maxelem) + 1;

equipfromtemplate(me, cstr(thistempl));
endif
    local ev;
    local looter := GetObjProperty( me, "looter" );
    while (1)
        wander();
        ev := os::wait_for_event( 120 );
        // print( "event type: " + ev.type );
        case (ev.type)
            EVID_SPEECH:
               local tspeech := process_text(ev.text, "default","default");
               if (tspeech)
                        say(tspeech);
               endif
                
            EVID_ENGAGED:
		say("Aaahhh! Help! Help!  I'm being oppressed!");
                Run( ev.source );

            EVID_DAMAGED:
                say( "By the virtues! Why? WHY??" );
                //print( "I just took " + ev.damage + " points of damage!" );
                if (ev.source)
                    Run( ev.source );
                else
                    say( "What sinister force is this!" );
                endif
           default: wander();

        endcase
        if (ReadGameClock() >= next_wander)
                wander();
		if (looter)
			grabloot();
		endif
                next_wander := ReadGameClock() + 10;
        endif
        
        // TODO: ReturnToPost();
    endwhile
     UnloadConfigFile( "equip" );
endprogram


function Run( opponent )
    TurnAwayFrom( opponent );

    DisableEvents( EVID_ENTEREDAREA + EVID_LEFTAREA );
    //SetOpponent( opponent );

    local waittime;
  outer:
    while (opponent and !opponent.dead)
        waittime := OpenDistance( opponent ) * 15;

        local ev := wait_for_event( waittime );
        // print( "event type: " + ev.type );
        case (ev.type)
            EVID_SPEECH:
            
            EVID_DISENGAGED:
                if (ev.source.serial = opponent.serial)
                    say( "Whew!" );
                    break outer;
                endif

            EVID_ENGAGED:
            EVID_DAMAGED:
                if (ev.source)
                    if (ev.source.serial != opponent.serial)
                        say( "Ack! Leave me alone!" );
                    else
                        if (ev.type = "damage")
			    say("Ouch! Heeelp!");
                            //print( "I just took " + ev.damage + " points of damage." );
                        endif
                    endif
                endif

            EVID_OPPONENT_MOVED:
                
                
            EVID_ENTEREDAREA:
            EVID_LEFTAREA:
                // ignore both of these
        endcase
    endwhile

    EnableEvents( EVID_ENTEREDAREA + EVID_LEFTAREA, HALT_THRESHOLD );
    SetWarMode( 0 );
endfunction


/////////////////////////////////////////////////////////////////////////////
//
//  OpenDistance - open the distance between self and an opponent.
//  Returns: 1 if distance is 10 (no move necessary)
//           0 if distance is < 10 (may still need to move)
//
/////////////////////////////////////////////////////////////////////////////
function OpenDistance( opponent )
    case Distance( me, opponent )
        10:
            return 1;
        
        default:
            RunAwayFrom( opponent );
            return 0;
    endcase
endfunction