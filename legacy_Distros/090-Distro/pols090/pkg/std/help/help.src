// created by zulu (zuluhotel@hotmail.com) Feb 2, 2000
//				updated	   Jun 6, 2000
// based on louds (louds@geocities.com) help system

use uo;
use os;

include "help";

//edit these for your shard
const SHARD_NAME := "Foo Shard";
const SHARD_WWWMAIN := "http://foo.shard.com";
const SHARD_WWWRULES := "http://foo.shard.com/rules.html";
const SHARD_BUGSADDR := "bugs@shard.com";
const SHARD_HELPADDR := "help@shard.com";
const SHARD_MAILADDR := "shard@shard.com";

global layout := {

"resizepic 0 0 2600 600 450",
"resizepic 40 45 2620 175 315",
"page 0",
"gumppic 40 125 12",
"gumppic 40 125 50987",
"text 60 50 95 0",
"text 55 65 995 1",
"text 52 80 995 2",
"text 64 95 995 3",
"text 64 110 995 4",
"text 80 125 995 5",
"text 67 140 995 6",
"text 80 155 995 7",
"text 180 17 995 28",
"text 40 365 995 29",
"text 40 380 995 30",
"text 120 415 995 31",
"button 485 415 243 241 1 0 0",
"page 1",
"text 240 40 995 8",
"button 220 42 210 211 0 2 1",
"text 240 55 0 9",
"text 240 70 0 10",
"text 240 85 0 11",
"text 240 105 995 12",
"button 220 107 210 211 1 0 2",
"text 240 120 995 13",
"text 240 135 0 14",
"text 240 150 0 15",
"text 240 170 995 16",
"button 220 172 210 211 1 0 3",
"text 240 185 0 17",
"text 240 200 0 18",
"text 240 215 0 19",
"text 240 230 0 20",
"text 240 245 0 21",
"text 240 265 995 22",
"button 220 267 208 208 0 0 4",
"text 240 280 0 23",
"text 240 295 0 24",
"text 240 310 0 25",
"text 240 325 0 26",
"text 240 340 0 27",
"page 2",
"text 240 40 995 32",
"button 220 42 208 208 0 2 5",
"text 240 55 0 33",
"text 240 70 0 34",
"text 240 85 0 35",
"text 240 100 0 36",
"text 240 120 995 37",
"button 220 122 208 208 0 2 6",
"text 240 135 0 38",
"text 240 150 0 39",
"text 240 165 0 40",
"text 240 180 0 41",
"text 240 200 995 42",
"button 220 202 210 211 1 2 7",
"text 240 215 0 43",
"text 240 230 0 44",
"text 240 245 0 45",
"text 240 260 0 46",
"text 240 275 0 47",
"text 240 290 0 48",
"text 240 305 0 49",
"text 240 320 0 50",
"text 240 340 995 51",
"button 220 342 210 211 0 1 8",

	"nodispose"
};

global data := {

"Greetings, traveler!",
"This menu will help",
"guide you to the best",
"place for answers",
"about "+SHARD_NAME+".",
"Please choose",
"from the options",
"on the right.",
"General questions about "+SHARD_NAME+".",
"Select this option if you are having difficulties",
"learning to use a skill, if you are lost, or if",
"you have a general gameplay question.",
"My character is physically stuck or cannot",
"continue to play.",
"This choice covers cases where your character is",
"in a location they cannot move out of.",
"I wish to page a GM.",
"Another player is harassing your character, be",
"it by verbal or physical means, or is breaking",
"the Terms of Service Agreement. To see what",
"constitutes harassment, please visit",
SHARD_WWWRULES,
"Other",
"If you are experiencing a problem in the game",
"that does not fall into one of the other",
"categories or is not addressed on the Support",
"web page and requires in-game assistance, ",
"email: "+SHARD_HELPADDR+"",
""+SHARD_NAME+" Shard Help Menu",
"If you cannot find the help you require on this list, please visit our webpage",
"at "+SHARD_WWWMAIN+" for more information.",
""+SHARD_NAME+" Shard- "+SHARD_MAILADDR+"",
"Visit the "+SHARD_NAME+" website.",
"You can find detailed answers to many of the",
"most frequently asked questions on our shard",
"website. You will need to launch your web",
"browser and go to "+SHARD_WWWMAIN+"",
"Report a bug to the shard staff.",
"Email your bug report to "+SHARD_BUGSADDR+"",
"It will be read by our customer support staff.",
"We apologize for not being able to reply to",
"individual reports.",
"Contact a Counselor.",
"A Counselor is an experienced "+SHARD_NAME+"",
"player who has volunteered their time to help",
"answer general questions. Selecting this option",
"will let you send a message to a Counselor.",
"Please remember that Counselors are volunteers",
"and may not be available at all times, so",
"please be patient and remember to check the",
"website for additional help.",
"Back to the first page."

};


program help(who2)
var who := who2[1];
local box := SendDialogGump( who, layout, data );             

CheckQueueExistance();

case (box[0])
	2: stuckpage(who); //stuck
	3: mainpagegm(who);
	7: mainpagecoun(who);
	default: SendSysMessage( who,  "Canceled");
endcase

endprogram

function mainpagecoun(who)
//make sure that there are any counselors online.

staffcheck();
if (!OnlineCounselors)
	SendSysmessage( who, "There are no available Counselors online now.");
	return;
endif

local thepage := cstr(RequestInput( who, who.backpack, "Type in your question:" ));

if(thepage="0")
	SendSysMessage(who, "Canceled");
	return;
endif

counpage(who, thepage);

EraseObjProperty( who, "canpage" );
SendSysmessage( who, "Available Counselors have been notified of your request.");
pagewarning(2, thepage, who);

endfunction

function stuckpage(who)

staffcheck();

if ((OnlineStaff < 1) and (!OnlineCounselors))
	SendSysmessage( who, "There are no available staff online now.");
	return;
endif

local thepage := "I'm stuck and cannot move, please help.";

if (OnlineStaff > 0)
    gmpage (who, thepage);
    pagewarning(1, thepage, who);
elseif (OnlineCounselors)
    counpage(who, thepage);
    pagewarning(2, thepage, who);
endif

EraseObjProperty( who, "canpage" );
SendSysmessage( who, "Available staff have been notified of your request.");

endfunction


function mainpagegm(who)
//make sure that there are someone from the staff online.
staffcheck();

if (OnlineStaff < 1)
	SendSysmessage( who, "There are no available Game Masters online now.");
	return;
endif

local thepage := cstr(RequestInput( who, who.backpack, "Type in your problem:" ));

if(thepage="0")
	SendSysMessage(who, "Canceled");
	return;
endif

gmpage (who, thepage);

EraseObjProperty( who, "canpage" );
SendSysmessage( who, "Available Game Masters have been notified of your request.");

pagewarning(1, thepage, who);

endfunction



function counpage(who, thepage)
//make sure no one is pageing right now, will keep waiting till sistem is free
while(1)
	if (!Icanpage(who))
		sleep(1);
	else
		break;
	endif
endwhile

//set the variables to the post routine
local cserial := cint(who.serial);
local pcount := counpages.size();
local poffset := pagecheck(cserial, 2);

SendSysMessage(who, "There are " + ((pcount/2)+1) + " messages queued ahead of you.");

//check for other pages for who and add the it to the queue
if (!poffset)
	counpages[pcount+1] := cstr(cserial);
	counpages[pcount+2] := cstr(thepage);
else
	counpages[poffset] := cstr(cserial);
	counpages[poffset+1] := cstr(thepage);
	SendSysMessage(who, "You have an existing page. It has been updated.");
endif

SetGlobalProperty("counpages", counpages);

endfunction


function gmpage(who, thepage)
//make sure no one is pageing right now, will keep waiting till sistem is free
while(1)
	if (!Icanpage(who))
		sleep(1);
	else
		break;
	endif
endwhile

//set the variables to the post routine
local cserial := cint(who.serial);
local pcount := gmpages.size();
local poffset := pagecheck(cserial, 1);
print("pcount: " + pcount);
foreach page in gmpages
  print(page);
endforeach
SendSysMessage(who, "There are " + (pcount/2) + " messages queued ahead of you.");

//check for other pages for who and add the it to the queue
if (!poffset)
	gmpages[pcount+1] := cstr(cserial);
	gmpages[pcount+2] := cstr(thepage);
else
	gmpages[poffset] := cstr(cserial);
	gmpages[poffset+1] := cstr(thepage);
	SendSysMessage(who, "You have an existing page. It has been updated.");
endif

SetGlobalProperty("gmpages", gmpages);

endfunction
