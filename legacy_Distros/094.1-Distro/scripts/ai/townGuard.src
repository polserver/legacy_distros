use npc;
use os;
use uo;
use cfgfile;

include "include/client";
include "include/attributes";
include "include/eventID";
include "include/sysEvent";
include "include/randName";
include "include/vetement";
include "include/dist";
include "include/anchors";
include "include/NPCBackpacks";
include "include/skillLists";
include "include/begging";

var flee_point := 0;
var npccfg := ReadConfigFile("::npcdesc");

const HALT_THRESHOLD := 10;
var me := Self();

program CastleGuard()
  SetObjProperty(me, "MerchantType", "TownGuard");
  start_script("NPCKeeper", me);
  var myanchor := GetObjProperty(me, "Anchor");
  if(myanchor)
    MoveCharacterToLocation(me, myanchor[1], myanchor[2], myanchor[3], MOVECHAR_FORCELOCATION);
  endif
  drop_anchor();
  myanchor := GetObjProperty(me, "Anchor");
  EnableEvents(SYSEVENT_ENGAGED + SYSEVENT_DISENGAGED + SYSEVENT_DAMAGED);
  EnableEvents(EVID_NODE + SYSEVENT_ITEM_GIVEN);
  EnableEvents(SYSEVENT_SPEECH, 2);
  SetWarMode(0);
  set_priority(100);
  var ev;
  var evtext;
  var next_wander := ReadGameClock() + 10;
  var wanders := 9;
  var txt;
  var ph := SplitWords(me.name);
  var myname := lower(ph[1]);
  while (1)
    ev := os::wait_for_event(120);
	if (ev)
      case(ev.type)
        SYSEVENT_SPEECH:     txt := lower(ev.text);
                             if(txt[myname] && (txt["train"] || txt["teach"]))
                               TurnToward(ev.source);
                               MerchantTrain(me, ev.source, ev.text);
                             endif
        EVID_NODE:           wanders := 0;
		                     next_wander := ReadGameClock()+30;
		                     crimcheck(ev.source);
        SYSEVENT_ENGAGED:    if((ev.source) && (!ev.source.dead))
		                       say("Thou wilt regret thine actions, swine!");
                               Fight(ev.source);
                             endif
        SYSEVENT_DAMAGED:    if((ev.source) && (!ev.source.dead))
		                       say("Thou wilt regret thine actions, swine!");
                               Fight(ev.source);
                             endif
        SYSEVENT_ITEM_GIVEN: TrainSkill(me, ev.source, ev.item);
      endcase
	endif
	if(ReadGameClock() >= next_wander)
	  begpurse(me);
      wander();
      if(coordist(me.x, me.y, myanchor[1], myanchor[2]) > 15)
        MoveCharacterToLocation(me, myanchor[1], myanchor[2], myanchor[3], MOVECHAR_FORCELOCATION);
      endif
      next_wander := ReadGameClock() + 10;
    endif
    lookiehere(me);
  endwhile
endprogram

function crimcheck(who)
  var mobiles := ListMobilesNearLocation(who.x, who.y, who.z, 20);
  var guard, num, i, hogcall, guardzone, element, range, timer, elem;
  var cfgfile := ReadConfigFile("::gzone");
  var entries := GetConfigStringKeys(cfgfile);
  foreach listing in entries
    element :=  cfgfile[listing];
    range := element.range;
    range := SplitWords(range);
    if((who.x >= CInt(range[1])) && (who.x <= CInt(range[3])) && (who.y >= CInt(range[2])) && (who.y <= CInt(range[4])))
      guardzone := 1;
      break;
    endif
  endforeach
  if(!guardzone)
    return;
  endif
  var targ, master;
  foreach npc in mobiles
	if(!npc.acctname)
	  elem := FindConfigElem(npccfg, npc.npctemplate);
	  if((npc.script == "tamed") || (npc.script == "employed"))
	    master := SystemFindObjectBySerial(GetObjProperty(npc, "master"));
	    if(master.criminal)
	      Fight(npc);
	    endif
	  elseif((!elem.guardignore) || (npc.criminal));
	    Fight(npc);
	  endif
    else
	  timer := GetObjProperty(npc, "guardstimer");
	  if(npc.criminal && (timer < ReadGameClock() || timer.errortext))
        Fight(npc);
	  endif
	endif
  endforeach
  sleep(1);
endfunction

function lookiehere(who)
  var mobiles := ListMobilesNearLocation(who.x, who.y, who.z, 15);
  var guard, num, i, hogcall, guardzone, element, range, timer, elem;
  var cfgfile := ReadConfigFile("::gzone");
  var entries := GetConfigStringKeys(cfgfile);
  foreach listing in entries
    element :=  cfgfile[listing];
    range := element.range;
    range := SplitWords(range);
    if((who.x >= CInt(range[1])) && (who.x <= CInt(range[3])) && (who.y >= CInt(range[2])) && (who.y <= CInt(range[4])))
      guardzone := 1;
      break;
    endif
  endforeach
  var targ, master;
  foreach npc in mobiles
	if(!npc.acctname)
	  elem := FindConfigElem(npccfg, npc.npctemplate);
	  if((npc.script == "tamed") || (npc.script == "employed"))
	    master := SystemFindObjectBySerial(GetObjProperty(npc, "master"));
	    if(master.criminal)
	      Fight(npc);
	    endif
	  elseif((!elem.guardignore) || (npc.criminal));
	    Fight(npc);
	  endif
    else
	  timer := GetObjProperty(npc, "guardstimer");
	  if(npc.criminal && (timer < ReadGameClock() || timer.errortext))
        Fight(npc);
	  endif
	endif
  endforeach
endfunction

function MerchantTrain(me, who, text)
  var totaltrain := 0;
  var words := SplitWords(text);
  var skill := words[3];
  if(!skill)
    var trainable := "";
    var holder := "";
    foreach thing in getskilllist(me)
      if(holder == "")
        holder := thing;
      else
        holder := holder + ", " + thing;
      endif
      totaltrain := totaltrain + 1;
    endforeach
    trainable  := trainable + holder;
    if(totaltrain > 0)
      say("I can train thee in the following skills:");
      say(trainable);
    else
      say("I can not train thee.");
    endif
  else
    skill := lower(skill);
    var npclevel := 33;
    var pclevel;
    var holder;
    foreach thing in getskilllist(me)
      if(lower(thing) == skill)
        holder := FindSkillId(thing);
        pclevel := GetEffectiveSkill(who, holder);
        if(pclevel > npclevel)
          say("I cannot teach you anymore.");
          return;
        else
          var trainmaxcost := GoldForSkillGain(npclevel, pclevel, holder);
          say("I will train thee " + thing + " for " + trainmaxcost + " gold.");
          SetObjProperty(who, "TrainMaxCost", trainmaxcost);
          SetObjProperty(who, "TrainSkillID", holder);
          return;
        endif
      endif
    endforeach
    say("I know not of that skill.");
  endif
endfunction

function TrainSkill(me, who, item)
  var variance := 0;
  var npc_level := 0;
  var pc_level := 0;
  var goldreceived := 0;
  var new_level := 0;
  var currentnpccost := 0;
  if((item.objtype == 0xeed) && (item.amount != 0))
    var trainmaxcost := GetObjProperty(who, "TrainMaxCost");
    var trainskillid := GetObjProperty(who, "TrainSkillID");
    if((!trainmaxcost || !trainskillid) && trainskillid != 0)
      say("I don't know what this is for, but thanks!");
      DestroyItem(item);
      return;
    endif
    npc_level    := 33;
    pc_level     := GetEffectiveSkill(who, trainskillid);
    goldreceived := item.amount;
    variance     := npc_level - pc_level;
    currentnpccost := GoldForSkillGain(npc_level, pc_level, trainskillid);
    if(pc_level < npc_level)
      if(currentnpccost != trainmaxcost)
        if(currentnpccost > trainmaxcost)
          npc_level := SkillGainForGold(npc_level, pc_level, trainskillid, trainmaxcost);
          variance  := npc_level - pc_level;
        else
          if(goldreceived > currentnpccost)
            say("I can not train thee to that level.");
            MoveItemToContainer(who.backpack, item);
            return;
          else
            trainmaxcost := currentnpccost;
          endif
        endif
      endif
      if(trainmaxcost <= goldreceived)
        new_level := (npc_level * 10);
        EraseObjProperty( who, "TrainMaxCost" );
        EraseObjProperty( who, "TrainSkillID" );
      else
        new_level := ((pc_level + CInt((CDbl(variance) * (CDbl(goldreceived) / CDbl(trainmaxcost))))) * 10);
        SetObjProperty( who, "TrainMaxCost", trainmaxcost-goldreceived );
      endif
      say("Let me show you how it's done.");
      SetBaseSkillBaseValue(who, trainskillid, new_level);
      var skillarray := GetObjProperty(who,"SkillArray");
      if(!skillarray)
        skillarray := {};
        skillarray.append(trainskillid);
        foreach thing in GetSkillIds()
          if(GetBaseSkill(who, thing) > 0)
            skillarray.append(thing);
          endif
        endforeach
        SetObjProperty(who,"SkillArray", skillarray);
      else
        var holder := {};
        holder.append(trainskillid);
        foreach thing in skillarray
          if((thing != trainskillid) and (GetBaseSkill(who, thing) > 0))
            holder.append(thing);
          endif
        endforeach
        skillarray := holder;
        SetObjProperty(who,"SkillArray", skillarray);
      endif
      DestroyItem(item);
      SendSysMessage(who, "Your skill increases.");
    else
      say("I'm not as good as thee.  Please find another to train thee.");
      MoveItemToContainer(who.backpack, item);
    endif
  else
    say("Bah, I have no use for this. Be off with ye.");
    MoveItemToContainer(who.backpack, item);
  endif
endfunction

function Fight(opponent)
  SetAnchor( me.x, me.y, 20, 0 );
  if(opponent.isA(POLCLASS_NPC))
	SetObjProperty(opponent, "guardkill", 1);
  endif
  if((opponent.cmdlevel > 0) || (opponent.serial == me.serial))
    SetWarMode(0);
    opponent := 0;
	return;
  endif
  var parms := {};
  parms[1] := me.x;
  parms[2] := me.y;
  parms[3] := me.z;
  SetObjProperty(me, "StartCoords", parms);
  var newx := opponent.x + RandomInt(2) - RandomInt(2);
  var newy := opponent.y + RandomInt(2) - RandomInt(2);
  if((Distance(me, opponent) > 7) || (!CheckLineOfSight(me, opponent)))
    PlayStationaryEffect(me.x, me.y, me.z, 0x3728, 0xa, 0xa);
    sleepms(500);
    MoveCharacterToLocation(me, newx, newy, opponent.z, MOVECHAR_FORCELOCATION);
    PlayStationaryEffect(me.x, me.y, me.z, 0x3728, 0xa, 0xa);
    PlaySoundEffect(me, 0x01ff);
  endif
  PrintTextAbove(me, "Thou wilt regret thine actions, swine!");
  SetObjProperty(opponent, "guardkill", 1);
  var oldprio := set_priority(50);
  SetOpponent(opponent);
  prepare_for_fight(opponent);
  TurnToward(opponent);
  var loops := 0;
  var ev;
  var waittime := 0;
  while((opponent) && (!opponent.dead) && (!opponent.hidden) && (!opponent.concealed) && (dist(me,opponent) < 20))
	if(!CloseDistance(opponent))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 1;
	endif
	in_combat_event_loop(opponent, loops);
	ev := wait_for_event(waittime);
  endwhile
  post_combat();
  return;
endfunction

function post_combat()
  DisableCombatEvents();
  EnableMainEvents();
  SetWarMode(0);
  SetOpponent(0);
  lookiehere(me);
  if(GetObjProperty(me, "poison_level"))
    sleep(1);
    PerformAction(me, 0x22);
    EraseObjProperty(me, "poison_level");
    PlaySoundEffect(me, 0x31);
    sleep(1);
  endif
  if(GetHp(me) < GetMaxHP(me))
    sleep(1);
    PerformAction(me, 0x22);
    SetHp(me, GetMaxHP(me));
    PlaySoundEffect(me, 0x32);
    sleep(1);
  endif
  lookiehere(me);
  sleep(1);
  RestartScript(me);
endfunction

function CloseDistance( opponent )
  case Distance( me, opponent )
    1:
    0:       return 1;
    default: RunToward( opponent );
             return 0;
  endcase
endfunction

function CheckForCriminals(jerk)
  if(jerk.dead)
	return;
  endif
  if(jerk.criminal)
	say("Thou wilt regret thine actions, swine!");
	Fight(jerk);
  endif
endfunction

function cleareventque()
  var ev;
  repeat
  until(!(ev := os::wait_for_event(0)));
endfunction

function prepare_for_fight(opponent)
  DisableMainEvents();
  EnableCombatEvents();
endfunction

function EnableMainEvents()
    cleareventque();
    DisableEvents(SYSEVENT_DISENGAGED);
    EnableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED);
    EnableEvents(SYSEVENT_ITEM_GIVEN);
endfunction

function DisableMainEvents()
    cleareventque();
    DisableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED );
    DisableEvents(SYSEVENT_ITEM_GIVEN);
endfunction

function EnableCombatEvents()
    EnableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function DisableCombatEvents()
    DisableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function in_combat_event_loop(opponent, loops)
  if(GetObjProperty(me, "poison_level"))
    sleep(1);
    PerformAction(me, 0x22);
    EraseObjProperty(me, "poison_level");
    PlaySoundEffect(me, 0x31);
    sleep(1);
  endif
  if(GetHp(me) < (GetStrength(me) / 2))
    sleep(1);
    PerformAction(me, 0x22);
    SetHp(me, me.strength);
    PlaySoundEffect(me, 0x32);
    sleep(1);
  endif
  if(loops > 50)
	RestartScript(me);
	return;
  endif
endfunction

function GoldForSkillGain( npc_skill, pc_skill, skillid )
  var maxskill := npc_skill - pc_skill;
  return maxskill*10;
endfunction

function SkillGainForGold(npc_level, pc_level, trainskillid, goldreceived)
  return (goldreceived/10) + pc_level;
endfunction